using System;
using Microsoft.EntityFrameworkCore.Migrations;

namespace back.Migrations
{
    public partial class initial : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Tags",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    CreatedAt = table.Column<DateTime>(nullable: false, defaultValueSql: "date('now')"),
                    Name = table.Column<string>(nullable: false),
                    Description = table.Column<string>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Tags", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "UserSettings",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    MaxReviewsPerDay = table.Column<long>(nullable: false),
                    NewCardDensity = table.Column<float>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserSettings", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Users",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    IsAdmin = table.Column<bool>(nullable: false),
                    AccountCreatedAt = table.Column<DateTime>(nullable: false, defaultValueSql: "date('now')"),
                    LastLoggedInAt = table.Column<DateTime>(nullable: false),
                    IsAccountActive = table.Column<bool>(nullable: false, defaultValueSql: "true"),
                    FirstName = table.Column<string>(maxLength: 80, nullable: false),
                    LastName = table.Column<string>(maxLength: 80, nullable: false),
                    Email = table.Column<string>(maxLength: 256, nullable: false),
                    SettingsId = table.Column<int>(nullable: false),
                    Salt = table.Column<string>(nullable: true),
                    PasswordHash = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Users", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Users_UserSettings_SettingsId",
                        column: x => x.SettingsId,
                        principalTable: "UserSettings",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Cards",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    CreatedAt = table.Column<DateTime>(nullable: false, defaultValueSql: "date('now')"),
                    UpdatedAt = table.Column<DateTime>(nullable: false, defaultValueSql: "date('now')"),
                    IsActive = table.Column<bool>(nullable: true, defaultValue: true),
                    CreatorId = table.Column<int>(nullable: false),
                    Kind = table.Column<int>(nullable: false),
                    FrontText = table.Column<string>(nullable: false),
                    RearText = table.Column<string>(nullable: false),
                    Engine = table.Column<int>(nullable: false),
                    DueAt = table.Column<DateTime>(nullable: false),
                    Interval = table.Column<TimeSpan>(nullable: false),
                    Ease = table.Column<float>(nullable: false),
                    ClozeItem = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cards", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Cards_Users_CreatorId",
                        column: x => x.CreatorId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CardAttempts",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    CardId = table.Column<int>(nullable: false),
                    UserId = table.Column<int>(nullable: false),
                    Result = table.Column<int>(nullable: false),
                    ResultText = table.Column<string>(nullable: false),
                    TimeBeforeResponding = table.Column<TimeSpan>(nullable: false),
                    AttemptedAt = table.Column<DateTime>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CardAttempts", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CardAttempts_Cards_CardId",
                        column: x => x.CardId,
                        principalTable: "Cards",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_CardAttempts_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CardTags",
                columns: table => new
                {
                    CardId = table.Column<int>(nullable: false),
                    TagId = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CardTags", x => new { x.CardId, x.TagId });
                    table.ForeignKey(
                        name: "FK_CardTags_Cards_CardId",
                        column: x => x.CardId,
                        principalTable: "Cards",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_CardTags_Tags_TagId",
                        column: x => x.TagId,
                        principalTable: "Tags",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 1, "", "constants" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 27, "", "abbreviation" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 28, "", "ml-svm" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 29, "", "library-layout" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 30, "", "software-ecosystem" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 31, "", "api" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 32, "", "library" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 33, "", "standard_library" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 34, "", "DRF" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 35, "", "jekyll" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 26, "", "analysis" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 36, "", "frp" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 38, "", "aws" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 39, "", "tmux" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 40, "", "unix" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 41, "", "numpy" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 42, "", "filesystem" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 43, "", "data-ethics" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 44, "", "regex" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 45, "", "c-sharp" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 46, "", "entityframework-core" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 37, "", "lenses" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 25, "", "optimization" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 24, "", "statistics" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 23, "", "linear-algebra" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 2, "", "concept" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 3, "", "formula" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 4, "", "derivation" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 5, "", "definition" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 6, "", "equation" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 7, "", "10.1038/s41586-019-1591-7" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 8, "", "history" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 9, "", "number" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 10, "", "exercise" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 11, "", "fact" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 12, "", "10.1126/science.aav1910" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 13, "", "1910.09047" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 14, "", "theorem" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 15, "", "pandas" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 16, "", "python" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 17, "", "tooling" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 18, "", "probability" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 19, "", "identity" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 20, "", "math" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 21, "", "computer-science" });

            migrationBuilder.InsertData(
                table: "Tags",
                columns: new[] { "Id", "Description", "Name" },
                values: new object[] { 22, "", "machine-learning" });

            migrationBuilder.InsertData(
                table: "UserSettings",
                columns: new[] { "Id", "MaxReviewsPerDay", "NewCardDensity" },
                values: new object[] { 1, 200L, 0.5f });

            migrationBuilder.InsertData(
                table: "UserSettings",
                columns: new[] { "Id", "MaxReviewsPerDay", "NewCardDensity" },
                values: new object[] { 2, 200L, 0.5f });

            migrationBuilder.InsertData(
                table: "Users",
                columns: new[] { "Id", "Email", "FirstName", "IsAdmin", "LastLoggedInAt", "LastName", "PasswordHash", "Salt", "SettingsId" },
                values: new object[] { 1, "admin", "Admin", false, new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), "Admin", "EoX+u0v+2EEa3/isjavNwQmfANn753EfjgpHrSPxWOEKhAA32d+idxENEC8rgQJSVPDDPO36IYgvIPJEGO+RWw==", "75e16bb86dae4bb084a5191ca6b687a7", 1 });

            migrationBuilder.InsertData(
                table: "Users",
                columns: new[] { "Id", "Email", "FirstName", "IsAdmin", "LastLoggedInAt", "LastName", "PasswordHash", "Salt", "SettingsId" },
                values: new object[] { 2, "regular-user", "Average", false, new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), "Joe", "Vcu7MLvZ/niMNFhRDqNceseuqrQ3CUdCgAdLhzKKl3nsmtogPdwvJAZfQO7WL0mUCZ4sjipocjVJpDLRiz7EnA==", "e019074d14ae4fca9e755c8632864882", 2 });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 825, DateTimeKind.Utc).AddTicks(5851), 2.5f, 2, "Front", new TimeSpan(0, 0, 10, 0, 0), 2, "Back" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1309, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(5887), 2.5f, 2, "Intuitively, the {{c1::Fisher information}} is a measure of {{c2::the curvature of the expected NLL and therefore a measure of the stability of the MLE}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1308, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(5794), 2.5f, 2, "Intuitively, the {{c1::Fisher information}} is a measure of {{c2::the curvature of the expected NLL and therefore a measure of the stability of the MLE}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1307, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(5271), 2.5f, 2, "The {{c1::Fisher information}} used in {{c1::Jeffreys prior}} is given by {{c2::$I(\\phi) \\triangleq-\\mathbb{E}\\left[\\left(\\frac{d \\log p(X \\mid \\phi)}{d \\phi}\\right) ^2\\right]$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1306, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(5169), 2.5f, 2, "The {{c1::Fisher information}} used in {{c1::Jeffreys prior}} is given by {{c2::$I(\\phi) \\triangleq-\\mathbb{E}\\left[\\left(\\frac{d \\log p(X \\mid \\phi)}{d \\phi}\\right) ^2\\right]$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1305, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(5145), 2.5f, 2, "The {{c1::Fisher information}} used in {{c1::Jeffreys prior}} is given by {{c2::$I(\\phi) \\triangleq-\\mathbb{E}\\left[\\left(\\frac{d \\log p(X \\mid \\phi)}{d \\phi}\\right) ^2\\right]$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1304, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(4614), 2.5f, 2, "The idea of the {{c1::Jeffreys prior}} is that the {{c2::prior is non-informative when it is invariant under reparameterization}}. This suggests taking the form {{c2::$p_{\\phi}(\\phi) \\propto(I(\\phi))^{\\frac{1}{2} }$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1303, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(4559), 2.5f, 2, "The idea of the {{c1::Jeffreys prior}} is that the {{c2::prior is non-informative when it is invariant under reparameterization}}. This suggests taking the form {{c2::$p_{\\phi}(\\phi) \\propto(I(\\phi))^{\\frac{1}{2} }$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1302, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(4478), 2.5f, 2, "The idea of the {{c1::Jeffreys prior}} is that the {{c2::prior is non-informative when it is invariant under reparameterization}}. This suggests taking the form {{c2::$p_{\\phi}(\\phi) \\propto(I(\\phi))^{\\frac{1}{2} }$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1301, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(3847), 2.5f, 2, "If you are uncertain if the prior you are setting is appropriate, you can {{c1::perform a sensitivity analysis to determine the empirical effect of your prior choice by varying it}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1300, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(3175), 2.5f, 2, "The {{c1::Haldane prior}} refers to setting a prior of {{c2::$\\theta\\sim\\lim _{c \\rightarrow 0} \\operatorname{Beta}(c, c)=\\operatorname{Beta}(0,0)$}} in {{c2::the beta-binomial model}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1299, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(3144), 2.5f, 2, "The {{c1::Haldane prior}} refers to setting a prior of {{c2::$\\theta\\sim\\lim _{c \\rightarrow 0} \\operatorname{Beta}(c, c)=\\operatorname{Beta}(0,0)$}} in {{c2::the beta-binomial model}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1298, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(3049), 2.5f, 2, "The {{c1::Haldane prior}} refers to setting a prior of {{c2::$\\theta\\sim\\lim _{c \\rightarrow 0} \\operatorname{Beta}(c, c)=\\operatorname{Beta}(0,0)$}} in {{c2::the beta-binomial model}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1310, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(6434), 2.5f, 2, "Using a {{c1::robust prior}} refers to {{c2::choosing a prior that has heavy tails}}. This is another approach used when {{c2::we are not otherwise confident in any particular choice of prior}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1297, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(2545), 2.5f, 2, "What are three different options for setting an uninformative prior in a beta-binomial model? What problems does each have? 1. {{c1::$\\theta\\sim\\operatorname{Beta}(1,1)$, a uniform prior. In this case though the MLE estimate is not the posterior mean because we are effectively using Laplace smoothing.}} 2. {{c2::$\\theta\\sim\\operatorname{Beta}(0,0)$, which places all weight on the extremal values 0 and 1. This is called the Haldane prior}} 3. {{c3::$\\theta\\sim\\operatorname{Beta}(1/2,1/2)$ the Jeffreys prior}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1295, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(2315), 2.5f, 2, "What are three different options for setting an uninformative prior in a beta-binomial model? What problems does each have? 1. {{c1::$\\theta\\sim\\operatorname{Beta}(1,1)$, a uniform prior. In this case though the MLE estimate is not the posterior mean because we are effectively using Laplace smoothing.}} 2. {{c2::$\\theta\\sim\\operatorname{Beta}(0,0)$, which places all weight on the extremal values 0 and 1. This is called the Haldane prior}} 3. {{c3::$\\theta\\sim\\operatorname{Beta}(1/2,1/2)$ the Jeffreys prior}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1294, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(1441), 2.5f, 2, "If we don't have strong beliefs informing our model parameters it is typical to use an {{c1::uninformative prior}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1293, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(955), 2.5f, 2, "{{c1::Bayes factors}} are a tool used in {{c2::Bayesian model comparison}} defined by {{c1::$B F_{1,0} \\triangleq \\frac{p\\left(\\mathcal{D} \\mid M_{1}\\right)}{p\\left(\\mathcal{D} \\mid M_{0}\\right)}=\\frac{p\\left(M_{1} \\mid \\mathcal{D}\\right)}{p\\left(M_{0} \\mid \\mathcal{D}\\right)} / \\frac{p\\left(M_{1}\\right)}{p\\left(M_{0}\\right)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1292, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(716), 2.5f, 2, "{{c1::Bayes factors}} are a tool used in {{c2::Bayesian model comparison}} defined by {{c1::$B F_{1,0} \\triangleq \\frac{p\\left(\\mathcal{D} \\mid M_{1}\\right)}{p\\left(\\mathcal{D} \\mid M_{0}\\right)}=\\frac{p\\left(M_{1} \\mid \\mathcal{D}\\right)}{p\\left(M_{0} \\mid \\mathcal{D}\\right)} / \\frac{p\\left(M_{1}\\right)}{p\\left(M_{0}\\right)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1291, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(646), 2.5f, 2, "{{c1::Bayes factors}} are a tool used in {{c2::Bayesian model comparison}} defined by {{c1::$B F_{1,0} \\triangleq \\frac{p\\left(\\mathcal{D} \\mid M_{1}\\right)}{p\\left(\\mathcal{D} \\mid M_{0}\\right)}=\\frac{p\\left(M_{1} \\mid \\mathcal{D}\\right)}{p\\left(M_{0} \\mid \\mathcal{D}\\right)} / \\frac{p\\left(M_{1}\\right)}{p\\left(M_{0}\\right)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1290, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(116), 2.5f, 2, "{{c1::Empirical Bayes (EB)}} is an approach to optimizing a {{c2::hierarchical Bayesian model}} where the marginal likelihood is {{c2::$p(\\mathcal{D} \\mid m) \\approx \\int p(\\mathcal{D} \\mid \\mathbf{w}) p(\\mathbf{w} \\mid \\hat{\\alpha}, m) d \\mathbf{w}$}} {{c2::$\\hat{\\alpha}=\\underset{\\alpha}{\\operatorname{argmax} } p(\\mathcal{D} \\mid \\alpha, m)=\\underset{\\alpha}{\\operatorname{argmax} } \\int p(\\mathcal{D} \\mid \\mathbf{w}) p(\\mathbf{w} \\mid \\alpha, m) d \\mathbf{w}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1289, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 880, DateTimeKind.Utc).AddTicks(9905), 2.5f, 2, "{{c1::Empirical Bayes (EB)}} is an approach to optimizing a {{c2::hierarchical Bayesian model}} where the marginal likelihood is {{c2::$p(\\mathcal{D} \\mid m) \\approx \\int p(\\mathcal{D} \\mid \\mathbf{w}) p(\\mathbf{w} \\mid \\hat{\\alpha}, m) d \\mathbf{w}$}} {{c2::$\\hat{\\alpha}=\\underset{\\alpha}{\\operatorname{argmax} } p(\\mathcal{D} \\mid \\alpha, m)=\\underset{\\alpha}{\\operatorname{argmax} } \\int p(\\mathcal{D} \\mid \\mathbf{w}) p(\\mathbf{w} \\mid \\alpha, m) d \\mathbf{w}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1288, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 880, DateTimeKind.Utc).AddTicks(9785), 2.5f, 2, "{{c1::Empirical Bayes (EB)}} is an approach to optimizing a {{c2::hierarchical Bayesian model}} where the marginal likelihood is {{c2::$p(\\mathcal{D} \\mid m) \\approx \\int p(\\mathcal{D} \\mid \\mathbf{w}) p(\\mathbf{w} \\mid \\hat{\\alpha}, m) d \\mathbf{w}$}} {{c2::$\\hat{\\alpha}=\\underset{\\alpha}{\\operatorname{argmax} } p(\\mathcal{D} \\mid \\alpha, m)=\\underset{\\alpha}{\\operatorname{argmax} } \\int p(\\mathcal{D} \\mid \\mathbf{w}) p(\\mathbf{w} \\mid \\alpha, m) d \\mathbf{w}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1287, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 880, DateTimeKind.Utc).AddTicks(9747), 2.5f, 2, "{{c1::Empirical Bayes (EB)}} is an approach to optimizing a {{c2::hierarchical Bayesian model}} where the marginal likelihood is {{c2::$p(\\mathcal{D} \\mid m) \\approx \\int p(\\mathcal{D} \\mid \\mathbf{w}) p(\\mathbf{w} \\mid \\hat{\\alpha}, m) d \\mathbf{w}$}} {{c2::$\\hat{\\alpha}=\\underset{\\alpha}{\\operatorname{argmax} } p(\\mathcal{D} \\mid \\alpha, m)=\\underset{\\alpha}{\\operatorname{argmax} } \\int p(\\mathcal{D} \\mid \\mathbf{w}) p(\\mathbf{w} \\mid \\alpha, m) d \\mathbf{w}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1286, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 880, DateTimeKind.Utc).AddTicks(9161), 2.5f, 2, "In Bayesian hierarchical modeling, the approach is robust because {{c1::the end of our hierarchy is not too affected by distant hyperpriors, partly due to the reality that in ascending the hierarchy the number of hyperparameters continually gets smaller}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1285, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 880, DateTimeKind.Utc).AddTicks(8324), 2.5f, 2, "In {{c1::Bayesian hierarchical modeling}} where {{c2::a hierarchy of priors and hyperpriors is used in order to deal with the problem of how to set a model's prior hyperparameters}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1284, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 880, DateTimeKind.Utc).AddTicks(8190), 2.5f, 2, "In {{c1::Bayesian hierarchical modeling}} where {{c2::a hierarchy of priors and hyperpriors is used in order to deal with the problem of how to set a model's prior hyperparameters}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1296, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(2478), 2.5f, 2, "What are three different options for setting an uninformative prior in a beta-binomial model? What problems does each have? 1. {{c1::$\\theta\\sim\\operatorname{Beta}(1,1)$, a uniform prior. In this case though the MLE estimate is not the posterior mean because we are effectively using Laplace smoothing.}} 2. {{c2::$\\theta\\sim\\operatorname{Beta}(0,0)$, which places all weight on the extremal values 0 and 1. This is called the Haldane prior}} 3. {{c3::$\\theta\\sim\\operatorname{Beta}(1/2,1/2)$ the Jeffreys prior}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1311, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(6481), 2.5f, 2, "Using a {{c1::robust prior}} refers to {{c2::choosing a prior that has heavy tails}}. This is another approach used when {{c2::we are not otherwise confident in any particular choice of prior}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1312, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(6551), 2.5f, 2, "Using a {{c1::robust prior}} refers to {{c2::choosing a prior that has heavy tails}}. This is another approach used when {{c2::we are not otherwise confident in any particular choice of prior}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1313, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(7335), 2.5f, 2, "Conjugate priors are not as restrictive as they seem because {{c1::we can always use a mixture of conjugate priors in the place of a single component which allows approximating other desirable prior densities}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1340, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(5450), 2.5f, 2, "The goal in {{c1::Bayesian decision theory}} is to determine a {{c2::decision procedure}} or {{c2::policy}} (mathematically: {{c2::$\\delta:\\mathcal{X}\\rightarrow\\mathcal{A}$}}) which has the {{c2::lowest expected risk}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1339, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(5422), 2.5f, 2, "The goal in {{c1::Bayesian decision theory}} is to determine a {{c2::decision procedure}} or {{c2::policy}} (mathematically: {{c2::$\\delta:\\mathcal{X}\\rightarrow\\mathcal{A}$}}) which has the {{c2::lowest expected risk}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1338, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(5373), 2.5f, 2, "The goal in {{c1::Bayesian decision theory}} is to determine a {{c2::decision procedure}} or {{c2::policy}} (mathematically: {{c2::$\\delta:\\mathcal{X}\\rightarrow\\mathcal{A}$}}) which has the {{c2::lowest expected risk}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1337, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(5359), 2.5f, 2, "The goal in {{c1::Bayesian decision theory}} is to determine a {{c2::decision procedure}} or {{c2::policy}} (mathematically: {{c2::$\\delta:\\mathcal{X}\\rightarrow\\mathcal{A}$}}) which has the {{c2::lowest expected risk}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1336, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(5330), 2.5f, 2, "The goal in {{c1::Bayesian decision theory}} is to determine a {{c2::decision procedure}} or {{c2::policy}} (mathematically: {{c2::$\\delta:\\mathcal{X}\\rightarrow\\mathcal{A}$}}) which has the {{c2::lowest expected risk}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1335, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(4780), 2.5f, 2, "In Bayesian decision theory, we imagine that there is {{c1::an unobserved state $y\\in\\mathcal{Y}$}} which is used to generate {{c1::an observation $x\\in\\mathcal{X}$}}. From this we must choose an {{c2::action $a$ from the action space $\\mathcal{A}$}}. Finally, because of our choice {{c3::we incur a loss $L(y,a)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1334, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(4716), 2.5f, 2, "In Bayesian decision theory, we imagine that there is {{c1::an unobserved state $y\\in\\mathcal{Y}$}} which is used to generate {{c1::an observation $x\\in\\mathcal{X}$}}. From this we must choose an {{c2::action $a$ from the action space $\\mathcal{A}$}}. Finally, because of our choice {{c3::we incur a loss $L(y,a)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1333, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(4662), 2.5f, 2, "In Bayesian decision theory, we imagine that there is {{c1::an unobserved state $y\\in\\mathcal{Y}$}} which is used to generate {{c1::an observation $x\\in\\mathcal{X}$}}. From this we must choose an {{c2::action $a$ from the action space $\\mathcal{A}$}}. Finally, because of our choice {{c3::we incur a loss $L(y,a)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1332, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(4619), 2.5f, 2, "In Bayesian decision theory, we imagine that there is {{c1::an unobserved state $y\\in\\mathcal{Y}$}} which is used to generate {{c1::an observation $x\\in\\mathcal{X}$}}. From this we must choose an {{c2::action $a$ from the action space $\\mathcal{A}$}}. Finally, because of our choice {{c3::we incur a loss $L(y,a)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1331, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(4033), 2.5f, 2, "In {{c1::Bayesian decision theory}} we think about a {{c2::statistical decision problem}} as {{c2::a game played against nature}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1330, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(3997), 2.5f, 2, "In {{c1::Bayesian decision theory}} we think about a {{c2::statistical decision problem}} as {{c2::a game played against nature}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1329, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(3959), 2.5f, 2, "In {{c1::Bayesian decision theory}} we think about a {{c2::statistical decision problem}} as {{c2::a game played against nature}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1328, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(3408), 2.5f, 2, "In the {{c1::full Bayesian inference approach}} the probability for our data is proportional to {{c2::$p(\\boldsymbol{\\theta}, \\boldsymbol{\\eta} \\mid \\mathcal{D}) \\propto p(\\mathcal{D} \\mid \\boldsymbol{\\theta}) p(\\boldsymbol{\\theta} \\mid \\boldsymbol{\\eta}) p(\\boldsymbol{\\eta})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1327, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(3223), 2.5f, 2, "In the {{c1::full Bayesian inference approach}} the probability for our data is proportional to {{c2::$p(\\boldsymbol{\\theta}, \\boldsymbol{\\eta} \\mid \\mathcal{D}) \\propto p(\\mathcal{D} \\mid \\boldsymbol{\\theta}) p(\\boldsymbol{\\theta} \\mid \\boldsymbol{\\eta}) p(\\boldsymbol{\\eta})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1326, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(2644), 2.5f, 2, "In {{c1::type-II MAP or MAP-II}} we take as our hyperparameter estimate {{c2::$\\hat{\\boldsymbol{\\eta} }=\\operatorname{argmax}_{\\boldsymbol{\\eta} } \\int p(\\mathcal{D} \\mid \\boldsymbol{\\theta}) p(\\boldsymbol{\\theta} \\mid \\boldsymbol{\\eta}) p(\\boldsymbol{\\eta}) d \\boldsymbol{\\theta}=\\operatorname{argmax}_{\\boldsymbol{\\eta} } p(\\mathcal{D} \\mid \\boldsymbol{\\eta}) p(\\boldsymbol{\\eta})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1325, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(2338), 2.5f, 2, "In {{c1::type-II MAP or MAP-II}} we take as our hyperparameter estimate {{c2::$\\hat{\\boldsymbol{\\eta} }=\\operatorname{argmax}_{\\boldsymbol{\\eta} } \\int p(\\mathcal{D} \\mid \\boldsymbol{\\theta}) p(\\boldsymbol{\\theta} \\mid \\boldsymbol{\\eta}) p(\\boldsymbol{\\eta}) d \\boldsymbol{\\theta}=\\operatorname{argmax}_{\\boldsymbol{\\eta} } p(\\mathcal{D} \\mid \\boldsymbol{\\eta}) p(\\boldsymbol{\\eta})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1324, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(1814), 2.5f, 2, "In empirical Bayes, we take as our hyperparameter estimate {{c1::$\\hat{\\boldsymbol{\\eta} }=\\operatorname{argmax}_{\\boldsymbol{\\eta} } \\int p(\\mathcal{D} \\mid \\boldsymbol{\\theta}) p(\\boldsymbol{\\theta} \\mid \\boldsymbol{\\eta}) d \\boldsymbol{\\theta}=\\operatorname{argmax}_{\\boldsymbol{\\eta} } p(\\mathcal{D} \\mid \\boldsymbol{\\eta})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1323, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(733), 2.5f, 2, "In MAP estimation we take as our parameter estimate {{c1::$\\hat{\\boldsymbol{\\theta} }=\\operatorname{argmax}_{\\boldsymbol{\\theta} } p(\\mathcal{D} \\mid \\boldsymbol{\\theta}) p(\\boldsymbol{\\theta} \\mid \\boldsymbol{\\eta})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1322, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(9958), 2.5f, 2, "In maximum likelihood estimation, the estimate we take for the parameters is given by {{c1::$\\hat{\\boldsymbol{\\theta} }=\\operatorname{argmax}_{\\boldsymbol{\\theta} } p(\\mathcal{D} \\mid \\boldsymbol{\\theta})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1321, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(9242), 2.5f, 2, "{{c1::Empirical Bayes}} is sometimes referred to as {{c2::type-II maximum likelihood}} or {{c3::the evidence procedure}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1320, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(9212), 2.5f, 2, "{{c1::Empirical Bayes}} is sometimes referred to as {{c2::type-II maximum likelihood}} or {{c3::the evidence procedure}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1319, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(9176), 2.5f, 2, "{{c1::Empirical Bayes}} is sometimes referred to as {{c2::type-II maximum likelihood}} or {{c3::the evidence procedure}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1318, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(8695), 2.5f, 2, "By having {{c1::fewer hyperparameters}} in a multi-level model we allow more undersampled parameters in our model to {{c2::borrow statistical strength from parameters that derive from the same hyperprior}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1317, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(8576), 2.5f, 2, "By having {{c1::fewer hyperparameters}} in a multi-level model we allow more undersampled parameters in our model to {{c2::borrow statistical strength from parameters that derive from the same hyperprior}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1316, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(8031), 2.5f, 2, "Graphically, we can think of a {{c1::hierarchical Bayesian model}} or a {{c1::multi-level model}} as a graph {{c2::$\\eta\\rightarrow\\theta\\rightarrow\\mathcal{D}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1315, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(7979), 2.5f, 2, "Graphically, we can think of a {{c1::hierarchical Bayesian model}} or a {{c1::multi-level model}} as a graph {{c2::$\\eta\\rightarrow\\theta\\rightarrow\\mathcal{D}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1314, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 881, DateTimeKind.Utc).AddTicks(7952), 2.5f, 2, "Graphically, we can think of a {{c1::hierarchical Bayesian model}} or a {{c1::multi-level model}} as a graph {{c2::$\\eta\\rightarrow\\theta\\rightarrow\\mathcal{D}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1283, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 880, DateTimeKind.Utc).AddTicks(7488), 2.5f, 2, "What does the marginal likelihood in Bayesian model comparison look like if we opt to set a hyperprior? {{c1::$p(\\mathcal{D} \\mid m)=\\iint p(\\mathcal{D} \\mid \\mathbf{w}) p(\\mathbf{w} \\mid \\alpha, m) p(\\alpha \\mid m) d \\mathbf{w} d \\alpha$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1341, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(6046), 2.5f, 2, "The {{c1::Bayes estimator}} or {{c1::Bayes decision rule}} in Bayesian decision theory is given by {{c2::$\\rho(a \\mid \\mathbf{x}) \\triangleq \\mathbb{E}_{p(y \\mid \\mathbf{x})}[L(y, a)]=\\sum_{y} L(y, a) p(y \\mid \\mathbf{x})$}} {{c2::$\\delta(\\mathbf{x})=\\arg \\min _{a \\in \\mathcal{A} } \\rho(\\mathbf{a} \\mid \\mathbf{x})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1282, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 880, DateTimeKind.Utc).AddTicks(6741), 2.5f, 2, "The {{c1::Bayesian information criterion}} or {{c1::BIC}} is defined by {{c2::$\\mathrm{BIC} \\triangleq \\log p(\\mathcal{D} \\mid \\hat{\\boldsymbol{\\theta} })-\\frac{\\operatorname{dof}(\\hat{\\boldsymbol{\\theta} })}{2} \\log N \\approx \\log p(\\mathcal{D})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1280, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 880, DateTimeKind.Utc).AddTicks(6554), 2.5f, 2, "The {{c1::Bayesian information criterion}} or {{c1::BIC}} is defined by {{c2::$\\mathrm{BIC} \\triangleq \\log p(\\mathcal{D} \\mid \\hat{\\boldsymbol{\\theta} })-\\frac{\\operatorname{dof}(\\hat{\\boldsymbol{\\theta} })}{2} \\log N \\approx \\log p(\\mathcal{D})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1248, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 879, DateTimeKind.Utc).AddTicks(6893), 2.5f, 2, "Because of the skew of the posterior distribution {{c1::MAP estimation}} is a poor choice for posteriors modeling {{c2::non-negative quantities like variances}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1247, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 879, DateTimeKind.Utc).AddTicks(6389), 2.5f, 2, "MAP estimation can be a very poor summary of the posterior if {{c1::the posterior is bimodal}} or {{c2::the posterior is skewed}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1246, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 879, DateTimeKind.Utc).AddTicks(6356), 2.5f, 2, "MAP estimation can be a very poor summary of the posterior if {{c1::the posterior is bimodal}} or {{c2::the posterior is skewed}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1245, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 879, DateTimeKind.Utc).AddTicks(5860), 2.5f, 2, "{{c1::MAP estimation}} is very common as a summary of the posterior distribution because it {{c2::corresponds to an optimization problem}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1244, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 879, DateTimeKind.Utc).AddTicks(5812), 2.5f, 2, "{{c1::MAP estimation}} is very common as a summary of the posterior distribution because it {{c2::corresponds to an optimization problem}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1243, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 879, DateTimeKind.Utc).AddTicks(5307), 2.5f, 2, "For high dimensional continuous posteriors a high quality estimator is to retain {{c1::the marginal distributions}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1242, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 879, DateTimeKind.Utc).AddTicks(4764), 2.5f, 2, "Bayes rule for linear Gaussian systems says the conditional probability for the unknown quantity is {{c1::$p(\\mathbf{x} \\mid \\mathbf{y})=\\mathcal{N}\\left(\\mathbf{x} \\mid \\boldsymbol{\\mu}_{x \\mid y}, \\mathbf{\\Sigma}_{x \\mid y}\\right)$}} {{c1::$\\boldsymbol{\\Sigma}_{x \\mid y}^{-1}=\\boldsymbol{\\Sigma}_{x}^{-1}+\\mathbf{A}^{T} \\boldsymbol{\\Sigma}_{y}^{-1} \\mathbf{A}$}} {{c1::$\\boldsymbol{\\mu}_{x \\mid y}=\\boldsymbol{\\Sigma}_{x \\mid y}\\left[\\mathbf{A}^{T} \\boldsymbol{\\Sigma}_{y}^{-1}(\\mathbf{y}-\\mathbf{b})+\\boldsymbol{\\Sigma}_{x}^{-1} \\boldsymbol{\\mu}_{x}\\right]$}} With the marginal distribution for $y$ {{c1::$p(\\mathbf{y})=\\mathcal{N}\\left(\\mathbf{y} \\mid \\mathbf{A} \\boldsymbol{\\mu}_{x}+\\mathbf{b}, \\mathbf{\\Sigma}_{y}+\\mathbf{A} \\boldsymbol{\\Sigma}_{x} \\mathbf{A}^{T}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1241, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 879, DateTimeKind.Utc).AddTicks(4592), 2.5f, 2, "Bayes rule for linear Gaussian systems says the conditional probability for the unknown quantity is {{c1::$p(\\mathbf{x} \\mid \\mathbf{y})=\\mathcal{N}\\left(\\mathbf{x} \\mid \\boldsymbol{\\mu}_{x \\mid y}, \\mathbf{\\Sigma}_{x \\mid y}\\right)$}} {{c1::$\\boldsymbol{\\Sigma}_{x \\mid y}^{-1}=\\boldsymbol{\\Sigma}_{x}^{-1}+\\mathbf{A}^{T} \\boldsymbol{\\Sigma}_{y}^{-1} \\mathbf{A}$}} {{c1::$\\boldsymbol{\\mu}_{x \\mid y}=\\boldsymbol{\\Sigma}_{x \\mid y}\\left[\\mathbf{A}^{T} \\boldsymbol{\\Sigma}_{y}^{-1}(\\mathbf{y}-\\mathbf{b})+\\boldsymbol{\\Sigma}_{x}^{-1} \\boldsymbol{\\mu}_{x}\\right]$}} With the marginal distribution for $y$ {{c1::$p(\\mathbf{y})=\\mathcal{N}\\left(\\mathbf{y} \\mid \\mathbf{A} \\boldsymbol{\\mu}_{x}+\\mathbf{b}, \\mathbf{\\Sigma}_{y}+\\mathbf{A} \\boldsymbol{\\Sigma}_{x} \\mathbf{A}^{T}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1240, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 879, DateTimeKind.Utc).AddTicks(4397), 2.5f, 2, "Bayes rule for linear Gaussian systems says the conditional probability for the unknown quantity is {{c1::$p(\\mathbf{x} \\mid \\mathbf{y})=\\mathcal{N}\\left(\\mathbf{x} \\mid \\boldsymbol{\\mu}_{x \\mid y}, \\mathbf{\\Sigma}_{x \\mid y}\\right)$}} {{c1::$\\boldsymbol{\\Sigma}_{x \\mid y}^{-1}=\\boldsymbol{\\Sigma}_{x}^{-1}+\\mathbf{A}^{T} \\boldsymbol{\\Sigma}_{y}^{-1} \\mathbf{A}$}} {{c1::$\\boldsymbol{\\mu}_{x \\mid y}=\\boldsymbol{\\Sigma}_{x \\mid y}\\left[\\mathbf{A}^{T} \\boldsymbol{\\Sigma}_{y}^{-1}(\\mathbf{y}-\\mathbf{b})+\\boldsymbol{\\Sigma}_{x}^{-1} \\boldsymbol{\\mu}_{x}\\right]$}} With the marginal distribution for $y$ {{c1::$p(\\mathbf{y})=\\mathcal{N}\\left(\\mathbf{y} \\mid \\mathbf{A} \\boldsymbol{\\mu}_{x}+\\mathbf{b}, \\mathbf{\\Sigma}_{y}+\\mathbf{A} \\boldsymbol{\\Sigma}_{x} \\mathbf{A}^{T}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1239, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 879, DateTimeKind.Utc).AddTicks(4267), 2.5f, 2, "Bayes rule for linear Gaussian systems says the conditional probability for the unknown quantity is {{c1::$p(\\mathbf{x} \\mid \\mathbf{y})=\\mathcal{N}\\left(\\mathbf{x} \\mid \\boldsymbol{\\mu}_{x \\mid y}, \\mathbf{\\Sigma}_{x \\mid y}\\right)$}} {{c1::$\\boldsymbol{\\Sigma}_{x \\mid y}^{-1}=\\boldsymbol{\\Sigma}_{x}^{-1}+\\mathbf{A}^{T} \\boldsymbol{\\Sigma}_{y}^{-1} \\mathbf{A}$}} {{c1::$\\boldsymbol{\\mu}_{x \\mid y}=\\boldsymbol{\\Sigma}_{x \\mid y}\\left[\\mathbf{A}^{T} \\boldsymbol{\\Sigma}_{y}^{-1}(\\mathbf{y}-\\mathbf{b})+\\boldsymbol{\\Sigma}_{x}^{-1} \\boldsymbol{\\mu}_{x}\\right]$}} With the marginal distribution for $y$ {{c1::$p(\\mathbf{y})=\\mathcal{N}\\left(\\mathbf{y} \\mid \\mathbf{A} \\boldsymbol{\\mu}_{x}+\\mathbf{b}, \\mathbf{\\Sigma}_{y}+\\mathbf{A} \\boldsymbol{\\Sigma}_{x} \\mathbf{A}^{T}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1238, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 879, DateTimeKind.Utc).AddTicks(3389), 2.5f, 2, "{{c1::Linear Gaussian systems}} are a model describing {{c2::noisy linear measurements of an unobserved, normally distributed quantity}}. Mathematically this model can be written as {{c2::$p(\\mathbf{x})=\\mathcal{N}\\left(\\mathbf{x} \\mid \\boldsymbol{\\mu}_{x}, \\boldsymbol{\\Sigma}_{x}\\right)$}} {{c2::$p(\\mathbf{y} \\mid \\mathbf{x})=\\mathcal{N}\\left(\\mathbf{y} \\mid \\mathbf{A} \\mathbf{x}+\\mathbf{b}, \\mathbf{\\Sigma}_{y}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1237, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 879, DateTimeKind.Utc).AddTicks(3226), 2.5f, 2, "{{c1::Linear Gaussian systems}} are a model describing {{c2::noisy linear measurements of an unobserved, normally distributed quantity}}. Mathematically this model can be written as {{c2::$p(\\mathbf{x})=\\mathcal{N}\\left(\\mathbf{x} \\mid \\boldsymbol{\\mu}_{x}, \\boldsymbol{\\Sigma}_{x}\\right)$}} {{c2::$p(\\mathbf{y} \\mid \\mathbf{x})=\\mathcal{N}\\left(\\mathbf{y} \\mid \\mathbf{A} \\mathbf{x}+\\mathbf{b}, \\mathbf{\\Sigma}_{y}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1249, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 879, DateTimeKind.Utc).AddTicks(6942), 2.5f, 2, "Because of the skew of the posterior distribution {{c1::MAP estimation}} is a poor choice for posteriors modeling {{c2::non-negative quantities like variances}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1236, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 879, DateTimeKind.Utc).AddTicks(3117), 2.5f, 2, "{{c1::Linear Gaussian systems}} are a model describing {{c2::noisy linear measurements of an unobserved, normally distributed quantity}}. Mathematically this model can be written as {{c2::$p(\\mathbf{x})=\\mathcal{N}\\left(\\mathbf{x} \\mid \\boldsymbol{\\mu}_{x}, \\boldsymbol{\\Sigma}_{x}\\right)$}} {{c2::$p(\\mathbf{y} \\mid \\mathbf{x})=\\mathcal{N}\\left(\\mathbf{y} \\mid \\mathbf{A} \\mathbf{x}+\\mathbf{b}, \\mathbf{\\Sigma}_{y}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1234, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 879, DateTimeKind.Utc).AddTicks(2384), 2.5f, 2, "Information form for an MVN allows easily writing the product of distributions: {{c1::$\\mathcal{N}_{c}\\left(\\xi_{f}, \\lambda_{f}\\right) \\mathcal{N}_{c}\\left(\\xi_{g}, \\lambda_{g}\\right)=\\mathcal{N}_{c}\\left(\\xi_{f}+\\xi_{g}, \\lambda_{f}+\\lambda_{g}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1233, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 879, DateTimeKind.Utc).AddTicks(1552), 2.5f, 2, "{{c1::Canonical form}} of an MVN is also called {{c2::information form}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1232, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 879, DateTimeKind.Utc).AddTicks(1525), 2.5f, 2, "{{c1::Canonical form}} of an MVN is also called {{c2::information form}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1231, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 879, DateTimeKind.Utc).AddTicks(1034), 2.5f, 2, "Canonical form allows a simple expression for the conditional distribution of an MVN. Mathematically {{c1::$p\\left(\\mathbf{x}_{1} \\mid \\mathbf{x}_{2}\\right)=\\mathcal{N}_{c}\\left(\\mathbf{x}_{1} \\mid \\boldsymbol{\\xi}_{1}-\\mathbf{\\Lambda}_{12} \\mathbf{x}_{2}, \\mathbf{\\Lambda}_{11}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1230, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 879, DateTimeKind.Utc).AddTicks(193), 2.5f, 2, "In terms of the canonical parameter an MVN has distribution {{c1::$\\mathcal{N}_{c}(\\mathbf{x} \\mid \\boldsymbol{\\xi}, \\boldsymbol{\\Lambda})=(2 \\pi)^{-D / 2}|\\boldsymbol{\\Lambda}|^{\\frac{1}{2} } \\exp \\left[-\\frac{1}{2}\\left(\\mathbf{x}^{T} \\boldsymbol{\\Lambda} \\mathbf{x}+\\boldsymbol{\\xi}^{T} \\boldsymbol{\\Lambda}^{-1} \\boldsymbol{\\xi}-2 \\mathbf{x}^{T} \\boldsymbol{\\xi}\\right)\\right]$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1229, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 878, DateTimeKind.Utc).AddTicks(9073), 2.5f, 2, "We can write an MVN in either moment or canonical parameters. The canonica or natural parameters expressed in the moment parameters are {{c1::$\\boldsymbol{\\Lambda} \\triangleq \\boldsymbol{\\Sigma}^{-1}, \\quad \\boldsymbol{\\xi} \\triangleq \\boldsymbol{\\Sigma}^{-1} \\boldsymbol{\\mu}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1228, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 878, DateTimeKind.Utc).AddTicks(8301), 2.5f, 2, "If $\\textbf{x}=(\\textbf{x}_1,\\textbf{x}_2)$ is jointly Gaussian with $\\boldsymbol{\\mu}=\\left(\\begin{array}{l}\\boldsymbol{\\mu}_{1} \\\\\\boldsymbol{\\mu}_{2}\\end{array}\\right), \\quad \\boldsymbol{\\Sigma}=\\left(\\begin{array}{ll}\\boldsymbol{\\Sigma}_{11} & \\boldsymbol{\\Sigma}_{12} \\\\\\boldsymbol{\\Sigma}_{21} & \\boldsymbol{\\Sigma}_{22}\\end{array}\\right), \\boldsymbol{\\Lambda}=\\boldsymbol{\\Sigma}^{-1}=\\left(\\begin{array}{ll}\\boldsymbol{\\Lambda}_{11} & \\boldsymbol{\\Lambda}_{12} \\\\\\boldsymbol{\\Lambda}_{21} & \\boldsymbol{\\Lambda}_{22}\\end{array}\\right)$ then the marginal probabilities are {{c1::$\\begin{array}{l}p\\left(\\mathbf{x}_{1}\\right)=\\mathcal{N}\\left(\\mathbf{x}_{1} \\mid \\boldsymbol{\\mu}_{1}, \\mathbf{\\Sigma}_{11}\\right) \\\\p\\left(\\mathbf{x}_{2}\\right)=\\mathcal{N}\\left(\\mathbf{x}_{2} \\mid \\boldsymbol{\\mu}_{2}, \\mathbf{\\Sigma}_{22}\\right)\\end{array}$}} and the conditional probabilities are {{c2::$\\begin{aligned}p\\left(\\mathbf{x}_{1} \\mid \\mathbf{x}_{2}\\right) &=\\mathcal{N}\\left(\\mathbf{x}_{1} \\mid \\boldsymbol{\\mu}_{1 \\mid 2}, \\mathbf{\\Sigma}_{1 \\mid 2}\\right) \\\\\\boldsymbol{\\mu}_{1 \\mid 2} &=\\boldsymbol{\\mu}_{1}+\\boldsymbol{\\Sigma}_{12} \\boldsymbol{\\Sigma}_{22}^{-1}\\left(\\mathbf{x}_{2}-\\boldsymbol{\\mu}_{2}\\right) \\\\&=\\boldsymbol{\\mu}_{1}-\\boldsymbol{\\Lambda}_{11}^{-1} \\boldsymbol{\\Lambda}_{12}\\left(\\mathbf{x}_{2}-\\boldsymbol{\\mu}_{2}\\right) \\\\&=\\boldsymbol{\\Sigma}_{1 \\mid 2}\\left(\\boldsymbol{\\Lambda}_{11} \\boldsymbol{\\mu}_{1}-\\boldsymbol{\\Lambda}_{12}\\left(\\mathbf{x}_{2}-\\boldsymbol{\\mu}_{2}\\right)\\right) \\\\\\boldsymbol{\\Sigma}_{1 \\mid 2} &=\\boldsymbol{\\Sigma}_{11}-\\boldsymbol{\\Sigma}_{12} \\boldsymbol{\\Sigma}_{22}^{-1} \\boldsymbol{\\Sigma}_{21}=\\boldsymbol{\\Lambda}_{11}^{-1}\\end{aligned}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1227, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 878, DateTimeKind.Utc).AddTicks(7497), 2.5f, 2, "If $\\textbf{x}=(\\textbf{x}_1,\\textbf{x}_2)$ is jointly Gaussian with $\\boldsymbol{\\mu}=\\left(\\begin{array}{l}\\boldsymbol{\\mu}_{1} \\\\\\boldsymbol{\\mu}_{2}\\end{array}\\right), \\quad \\boldsymbol{\\Sigma}=\\left(\\begin{array}{ll}\\boldsymbol{\\Sigma}_{11} & \\boldsymbol{\\Sigma}_{12} \\\\\\boldsymbol{\\Sigma}_{21} & \\boldsymbol{\\Sigma}_{22}\\end{array}\\right), \\boldsymbol{\\Lambda}=\\boldsymbol{\\Sigma}^{-1}=\\left(\\begin{array}{ll}\\boldsymbol{\\Lambda}_{11} & \\boldsymbol{\\Lambda}_{12} \\\\\\boldsymbol{\\Lambda}_{21} & \\boldsymbol{\\Lambda}_{22}\\end{array}\\right)$ then the marginal probabilities are {{c1::$\\begin{array}{l}p\\left(\\mathbf{x}_{1}\\right)=\\mathcal{N}\\left(\\mathbf{x}_{1} \\mid \\boldsymbol{\\mu}_{1}, \\mathbf{\\Sigma}_{11}\\right) \\\\p\\left(\\mathbf{x}_{2}\\right)=\\mathcal{N}\\left(\\mathbf{x}_{2} \\mid \\boldsymbol{\\mu}_{2}, \\mathbf{\\Sigma}_{22}\\right)\\end{array}$}} and the conditional probabilities are {{c2::$\\begin{aligned}p\\left(\\mathbf{x}_{1} \\mid \\mathbf{x}_{2}\\right) &=\\mathcal{N}\\left(\\mathbf{x}_{1} \\mid \\boldsymbol{\\mu}_{1 \\mid 2}, \\mathbf{\\Sigma}_{1 \\mid 2}\\right) \\\\\\boldsymbol{\\mu}_{1 \\mid 2} &=\\boldsymbol{\\mu}_{1}+\\boldsymbol{\\Sigma}_{12} \\boldsymbol{\\Sigma}_{22}^{-1}\\left(\\mathbf{x}_{2}-\\boldsymbol{\\mu}_{2}\\right) \\\\&=\\boldsymbol{\\mu}_{1}-\\boldsymbol{\\Lambda}_{11}^{-1} \\boldsymbol{\\Lambda}_{12}\\left(\\mathbf{x}_{2}-\\boldsymbol{\\mu}_{2}\\right) \\\\&=\\boldsymbol{\\Sigma}_{1 \\mid 2}\\left(\\boldsymbol{\\Lambda}_{11} \\boldsymbol{\\mu}_{1}-\\boldsymbol{\\Lambda}_{12}\\left(\\mathbf{x}_{2}-\\boldsymbol{\\mu}_{2}\\right)\\right) \\\\\\boldsymbol{\\Sigma}_{1 \\mid 2} &=\\boldsymbol{\\Sigma}_{11}-\\boldsymbol{\\Sigma}_{12} \\boldsymbol{\\Sigma}_{22}^{-1} \\boldsymbol{\\Sigma}_{21}=\\boldsymbol{\\Lambda}_{11}^{-1}\\end{aligned}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1226, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 878, DateTimeKind.Utc).AddTicks(6217), 2.5f, 2, "The {{c1::nearest shrunken centroids classifier}} can be thought of as {{c2::putting a Laplace prior on diagonal LDA}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1225, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 878, DateTimeKind.Utc).AddTicks(6169), 2.5f, 2, "The {{c1::nearest shrunken centroids classifier}} can be thought of as {{c2::putting a Laplace prior on diagonal LDA}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1224, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 878, DateTimeKind.Utc).AddTicks(5646), 2.5f, 2, "By comparison to LDA, in very high dimensions {{c1::diagonal LDA performs much better than LDA or RDA}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1223, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 878, DateTimeKind.Utc).AddTicks(5092), 2.5f, 2, "{{c1::Regularized discriminant analysis or RDA}} refers to {{c1::estimating the covariance as a combination of a diagonal and non-diagonal term}} this is equivalent to putting an {{c1::inverse Wishart prior on the covariance}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1235, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 879, DateTimeKind.Utc).AddTicks(3036), 2.5f, 2, "{{c1::Linear Gaussian systems}} are a model describing {{c2::noisy linear measurements of an unobserved, normally distributed quantity}}. Mathematically this model can be written as {{c2::$p(\\mathbf{x})=\\mathcal{N}\\left(\\mathbf{x} \\mid \\boldsymbol{\\mu}_{x}, \\boldsymbol{\\Sigma}_{x}\\right)$}} {{c2::$p(\\mathbf{y} \\mid \\mathbf{x})=\\mathcal{N}\\left(\\mathbf{y} \\mid \\mathbf{A} \\mathbf{x}+\\mathbf{b}, \\mathbf{\\Sigma}_{y}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1250, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 879, DateTimeKind.Utc).AddTicks(7555), 2.5f, 2, "The mean and median are often better statistics of a distribution because they {{c1::take into account the volume occupied by the distribution}} wherease {{c2::the mode is only influenced by a single point}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1251, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 879, DateTimeKind.Utc).AddTicks(7610), 2.5f, 2, "The mean and median are often better statistics of a distribution because they {{c1::take into account the volume occupied by the distribution}} wherease {{c2::the mode is only influenced by a single point}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1252, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 879, DateTimeKind.Utc).AddTicks(8118), 2.5f, 2, "A more subtle reason to be wary of {{c1::MAP estimation}} is that the {{c2::posterior mode is not invariant under reparameterization because of the Jacobian correction}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1279, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 880, DateTimeKind.Utc).AddTicks(5876), 2.5f, 2, "Computing the {{c1::marginal likelihood}} in Bayesian model comparison can be expensive, one alternative is to use {{c2::the Bayesian information criterion}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1278, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 880, DateTimeKind.Utc).AddTicks(5831), 2.5f, 2, "Computing the {{c1::marginal likelihood}} in Bayesian model comparison can be expensive, one alternative is to use {{c2::the Bayesian information criterion}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1277, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 880, DateTimeKind.Utc).AddTicks(5305), 2.5f, 2, "The Bayesian Occam's razor works because {{c1::by integrating out the model parameters, more complex models will have lower marginal likelihood}} because {{c1::they must spread their mass over more possible distributions of the data}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1276, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 880, DateTimeKind.Utc).AddTicks(5224), 2.5f, 2, "The Bayesian Occam's razor works because {{c1::by integrating out the model parameters, more complex models will have lower marginal likelihood}} because {{c1::they must spread their mass over more possible distributions of the data}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1275, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 880, DateTimeKind.Utc).AddTicks(4118), 2.5f, 2, "In Bayesian model comparison, the {{c1::Bayesian Occam's razor}} solves the apparent problem that we would otherwise {{c2::select models that had high capacity}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1274, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 880, DateTimeKind.Utc).AddTicks(4072), 2.5f, 2, "In Bayesian model comparison, the {{c1::Bayesian Occam's razor}} solves the apparent problem that we would otherwise {{c2::select models that had high capacity}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1273, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 880, DateTimeKind.Utc).AddTicks(3587), 2.5f, 2, "In Bayesian model comparison, we can write the probability for a model using Bayes rule as {{c1::$p(m \\mid \\mathcal{D})=\\frac{p(\\mathcal{D} \\mid m) p(m)}{\\sum_{m \\in \\mathcal{M} } p(m, \\mathcal{D})}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1272, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 880, DateTimeKind.Utc).AddTicks(2901), 2.5f, 2, "{{c1::Bayesian model selection}} refers to using the {{c2::mode of the hypothesis space of models}} in Bayesian model comparison.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1271, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 880, DateTimeKind.Utc).AddTicks(2854), 2.5f, 2, "{{c1::Bayesian model selection}} refers to using the {{c2::mode of the hypothesis space of models}} in Bayesian model comparison.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1270, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 880, DateTimeKind.Utc).AddTicks(2347), 2.5f, 2, "In Bayesian model comparison, the {{c1::marginal likelihood}} is also called the {{c2::integrated likelihood}} or {{c3::the evidence for the model}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1269, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 880, DateTimeKind.Utc).AddTicks(2314), 2.5f, 2, "In Bayesian model comparison, the {{c1::marginal likelihood}} is also called the {{c2::integrated likelihood}} or {{c3::the evidence for the model}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1268, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 880, DateTimeKind.Utc).AddTicks(2282), 2.5f, 2, "In Bayesian model comparison, the {{c1::marginal likelihood}} is also called the {{c2::integrated likelihood}} or {{c3::the evidence for the model}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1267, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 880, DateTimeKind.Utc).AddTicks(1751), 2.5f, 2, "In the context of {{c1::Bayesian model comparison}}, the {{c2::marginal likelihood}} is given by {{c3::$p(\\mathcal{D} \\mid m)=\\int p(\\mathcal{D} \\mid \\boldsymbol{\\theta}) p(\\boldsymbol{\\theta} \\mid m) d \\boldsymbol{\\theta}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1266, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 880, DateTimeKind.Utc).AddTicks(1597), 2.5f, 2, "In the context of {{c1::Bayesian model comparison}}, the {{c2::marginal likelihood}} is given by {{c3::$p(\\mathcal{D} \\mid m)=\\int p(\\mathcal{D} \\mid \\boldsymbol{\\theta}) p(\\boldsymbol{\\theta} \\mid m) d \\boldsymbol{\\theta}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1265, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 880, DateTimeKind.Utc).AddTicks(1568), 2.5f, 2, "In the context of {{c1::Bayesian model comparison}}, the {{c2::marginal likelihood}} is given by {{c3::$p(\\mathcal{D} \\mid m)=\\int p(\\mathcal{D} \\mid \\boldsymbol{\\theta}) p(\\boldsymbol{\\theta} \\mid m) d \\boldsymbol{\\theta}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1264, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 880, DateTimeKind.Utc).AddTicks(1017), 2.5f, 2, "Unlike {{c1::CIs}}, {{c2::HPD regions}} are not necessarily {{c1::connected}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1263, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 880, DateTimeKind.Utc).AddTicks(1000), 2.5f, 2, "Unlike {{c1::CIs}}, {{c2::HPD regions}} are not necessarily {{c1::connected}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1262, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 880, DateTimeKind.Utc).AddTicks(979), 2.5f, 2, "Unlike {{c1::CIs}}, {{c2::HPD regions}} are not necessarily {{c1::connected}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1261, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 880, DateTimeKind.Utc).AddTicks(533), 2.5f, 2, "An alternative to the CI is a {{c1::highest posterior density region}} which consists of {{c2::the set of most probable points containing $1-\\alpha$ of the probability mass}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1260, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 880, DateTimeKind.Utc).AddTicks(448), 2.5f, 2, "An alternative to the CI is a {{c1::highest posterior density region}} which consists of {{c2::the set of most probable points containing $1-\\alpha$ of the probability mass}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1259, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 879, DateTimeKind.Utc).AddTicks(9883), 2.5f, 2, "{{c1::credible interval}} = {{c2::CI}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1258, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 879, DateTimeKind.Utc).AddTicks(9871), 2.5f, 2, "{{c1::credible interval}} = {{c2::CI}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1257, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 879, DateTimeKind.Utc).AddTicks(9406), 2.5f, 2, "A {{c1::central interval}} is a {{c2::credible interval with half of the mass in each tail of the distribution}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1256, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 879, DateTimeKind.Utc).AddTicks(9325), 2.5f, 2, "A {{c1::central interval}} is a {{c2::credible interval with half of the mass in each tail of the distribution}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1255, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 879, DateTimeKind.Utc).AddTicks(8833), 2.5f, 2, "A {{c1::$1-\\alpha$ credible interval}} is a {{c2::continuous region $C=(l,u)$ which contains $1-\\alpha$ of the posterior mass}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1254, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 879, DateTimeKind.Utc).AddTicks(8750), 2.5f, 2, "A {{c1::$1-\\alpha$ credible interval}} is a {{c2::continuous region $C=(l,u)$ which contains $1-\\alpha$ of the posterior mass}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1253, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 879, DateTimeKind.Utc).AddTicks(8217), 2.5f, 2, "A more subtle reason to be wary of {{c1::MAP estimation}} is that the {{c2::posterior mode is not invariant under reparameterization because of the Jacobian correction}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1281, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 880, DateTimeKind.Utc).AddTicks(6570), 2.5f, 2, "The {{c1::Bayesian information criterion}} or {{c1::BIC}} is defined by {{c2::$\\mathrm{BIC} \\triangleq \\log p(\\mathcal{D} \\mid \\hat{\\boldsymbol{\\theta} })-\\frac{\\operatorname{dof}(\\hat{\\boldsymbol{\\theta} })}{2} \\log N \\approx \\log p(\\mathcal{D})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1222, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 878, DateTimeKind.Utc).AddTicks(5046), 2.5f, 2, "{{c1::Regularized discriminant analysis or RDA}} refers to {{c1::estimating the covariance as a combination of a diagonal and non-diagonal term}} this is equivalent to putting an {{c1::inverse Wishart prior on the covariance}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1342, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(6075), 2.5f, 2, "The {{c1::Bayes estimator}} or {{c1::Bayes decision rule}} in Bayesian decision theory is given by {{c2::$\\rho(a \\mid \\mathbf{x}) \\triangleq \\mathbb{E}_{p(y \\mid \\mathbf{x})}[L(y, a)]=\\sum_{y} L(y, a) p(y \\mid \\mathbf{x})$}} {{c2::$\\delta(\\mathbf{x})=\\arg \\min _{a \\in \\mathcal{A} } \\rho(\\mathbf{a} \\mid \\mathbf{x})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1344, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(6288), 2.5f, 2, "The {{c1::Bayes estimator}} or {{c1::Bayes decision rule}} in Bayesian decision theory is given by {{c2::$\\rho(a \\mid \\mathbf{x}) \\triangleq \\mathbb{E}_{p(y \\mid \\mathbf{x})}[L(y, a)]=\\sum_{y} L(y, a) p(y \\mid \\mathbf{x})$}} {{c2::$\\delta(\\mathbf{x})=\\arg \\min _{a \\in \\mathcal{A} } \\rho(\\mathbf{a} \\mid \\mathbf{x})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1431, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(9764), 2.5f, 2, "A {{c1::Bayes estimator}} or {{c1::Bayes decision rule}} is one which {{c2::minimizes the Bayes risk}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1430, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(9700), 2.5f, 2, "A {{c1::Bayes estimator}} or {{c1::Bayes decision rule}} is one which {{c2::minimizes the Bayes risk}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1429, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(9671), 2.5f, 2, "A {{c1::Bayes estimator}} or {{c1::Bayes decision rule}} is one which {{c2::minimizes the Bayes risk}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1428, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(9116), 2.5f, 2, "In order to make the frequentist risk tractable, we can form the {{c1::Bayes risk}} (syn: {{c1::integrated risk}}) where we {{c2::put a prior on $\\theta^*$ and integrate it out}}. Mathematically this is {{c2::$R_{B}(\\delta) \\triangleq \\mathbb{E}_{p\\left(\\boldsymbol{\\theta}^{*}\\right)}\\left[R\\left(\\boldsymbol{\\theta}^{*}, \\delta\\right)\\right]=\\int R\\left(\\boldsymbol{\\theta}^{*}, \\delta\\right) p\\left(\\boldsymbol{\\theta}^{*}\\right) d \\boldsymbol{\\theta}^{*}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1427, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(8445), 2.5f, 2, "In order to make the frequentist risk tractable, we can form the {{c1::Bayes risk}} (syn: {{c1::integrated risk}}) where we {{c2::put a prior on $\\theta^*$ and integrate it out}}. Mathematically this is {{c2::$R_{B}(\\delta) \\triangleq \\mathbb{E}_{p\\left(\\boldsymbol{\\theta}^{*}\\right)}\\left[R\\left(\\boldsymbol{\\theta}^{*}, \\delta\\right)\\right]=\\int R\\left(\\boldsymbol{\\theta}^{*}, \\delta\\right) p\\left(\\boldsymbol{\\theta}^{*}\\right) d \\boldsymbol{\\theta}^{*}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1426, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(8321), 2.5f, 2, "In order to make the frequentist risk tractable, we can form the {{c1::Bayes risk}} (syn: {{c1::integrated risk}}) where we {{c2::put a prior on $\\theta^*$ and integrate it out}}. Mathematically this is {{c2::$R_{B}(\\delta) \\triangleq \\mathbb{E}_{p\\left(\\boldsymbol{\\theta}^{*}\\right)}\\left[R\\left(\\boldsymbol{\\theta}^{*}, \\delta\\right)\\right]=\\int R\\left(\\boldsymbol{\\theta}^{*}, \\delta\\right) p\\left(\\boldsymbol{\\theta}^{*}\\right) d \\boldsymbol{\\theta}^{*}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1425, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(7958), 2.5f, 2, "In order to make the frequentist risk tractable, we can form the {{c1::Bayes risk}} (syn: {{c1::integrated risk}}) where we {{c2::put a prior on $\\theta^*$ and integrate it out}}. Mathematically this is {{c2::$R_{B}(\\delta) \\triangleq \\mathbb{E}_{p\\left(\\boldsymbol{\\theta}^{*}\\right)}\\left[R\\left(\\boldsymbol{\\theta}^{*}, \\delta\\right)\\right]=\\int R\\left(\\boldsymbol{\\theta}^{*}, \\delta\\right) p\\left(\\boldsymbol{\\theta}^{*}\\right) d \\boldsymbol{\\theta}^{*}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1424, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(7252), 2.5f, 2, "The problem with the {{c1::frequentist risk}} is that the {{c2::expectation is taken over the true data generating distribution which is accessible}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1423, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(7160), 2.5f, 2, "The problem with the {{c1::frequentist risk}} is that the {{c2::expectation is taken over the true data generating distribution which is accessible}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1422, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(6664), 2.5f, 2, "The {{c1::frequentist risk}} for a decision procedure $\\delta:\\mathcal{X}\\rightarrow\\mathcal{A}$ is mathematically $R\\left(\\theta^{*}, \\delta\\right) \\triangleq \\mathbb{E}_{p\\left(\\tilde{\\mathcal{D} } \\mid \\theta^{*}\\right)}\\left[L\\left(\\theta^{*}, \\delta(\\tilde{\\mathcal{D} })\\right)\\right]=\\int L\\left(\\theta^{*}, \\delta(\\tilde{\\mathcal{D} })\\right) p\\left(\\tilde{\\mathcal{D} } \\mid \\theta^{*}\\right) d \\tilde{\\mathcal{D} }$", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1421, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(6113), 2.5f, 2, "Recall that the sampling distribution of the MLE frequently approaches a normal distribution, when it does, mathematically: {{c1::$\\hat{\\boldsymbol{\\theta} } \\rightarrow \\mathcal{N}\\left(\\boldsymbol{\\theta}^{*}, \\mathbf{I}_{N}\\left(\\boldsymbol{\\theta}^{*}\\right)^{-1}\\right)$}} so we can estimate uncertainties by {{c1::$\\hat{s e}_{k} \\triangleq \\mathbf{I}_{N}(\\hat{\\boldsymbol{\\theta} })_{k k}^{-\\frac{1}{2} }$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1420, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(6014), 2.5f, 2, "Recall that the sampling distribution of the MLE frequently approaches a normal distribution, when it does, mathematically: {{c1::$\\hat{\\boldsymbol{\\theta} } \\rightarrow \\mathcal{N}\\left(\\boldsymbol{\\theta}^{*}, \\mathbf{I}_{N}\\left(\\boldsymbol{\\theta}^{*}\\right)^{-1}\\right)$}} so we can estimate uncertainties by {{c1::$\\hat{s e}_{k} \\triangleq \\mathbf{I}_{N}(\\hat{\\boldsymbol{\\theta} })_{k k}^{-\\frac{1}{2} }$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1432, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 885, DateTimeKind.Utc).AddTicks(275), 2.5f, 2, "The {{c1::integrated or Bayes risk}} is sometimes called the {{c2::preposterior risk}} because it is {{c3::evaluated before we have seen the data}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1419, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(5175), 2.5f, 2, "The relationship between {{c1::the Fisher information matrix}} and {{c1::the observed information matrix}} is that {{c2::the Fisher information matrix is the expectation of the observed information}}. Mathematically {{c2::$\\mathbf{I}_{N}\\left(\\hat{\\boldsymbol{\\theta} } \\mid \\boldsymbol{\\theta}^{*}\\right) \\triangleq \\mathbb{E}_{\\boldsymbol{\\theta}^{*} }[\\mathbf{J}(\\hat{\\boldsymbol{\\theta} } \\mid \\mathcal{D})]$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1417, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(4900), 2.5f, 2, "The relationship between {{c1::the Fisher information matrix}} and {{c1::the observed information matrix}} is that {{c2::the Fisher information matrix is the expectation of the observed information}}. Mathematically {{c2::$\\mathbf{I}_{N}\\left(\\hat{\\boldsymbol{\\theta} } \\mid \\boldsymbol{\\theta}^{*}\\right) \\triangleq \\mathbb{E}_{\\boldsymbol{\\theta}^{*} }[\\mathbf{J}(\\hat{\\boldsymbol{\\theta} } \\mid \\mathcal{D})]$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1416, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(4858), 2.5f, 2, "The relationship between {{c1::the Fisher information matrix}} and {{c1::the observed information matrix}} is that {{c2::the Fisher information matrix is the expectation of the observed information}}. Mathematically {{c2::$\\mathbf{I}_{N}\\left(\\hat{\\boldsymbol{\\theta} } \\mid \\boldsymbol{\\theta}^{*}\\right) \\triangleq \\mathbb{E}_{\\boldsymbol{\\theta}^{*} }[\\mathbf{J}(\\hat{\\boldsymbol{\\theta} } \\mid \\mathcal{D})]$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1415, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(4232), 2.5f, 2, "The {{c1::observed information matrix}} is the {{c2::gradient of the negative score function}} or equivalently {{c2::the Hessian of the NLL}}. Mathematically {{c2::$\\mathbf{J}(\\hat{\\boldsymbol{\\theta} }(\\mathcal{D})) \\triangleq-\\nabla \\mathbf{s}(\\hat{\\boldsymbol{\\theta} })=-\\left.\\nabla_{\\boldsymbol{\\theta} }^{2} \\log p(\\mathcal{D} \\mid \\boldsymbol{\\theta})\\right|_{\\hat{\\boldsymbol{\\theta} } }$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1414, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(3999), 2.5f, 2, "The {{c1::observed information matrix}} is the {{c2::gradient of the negative score function}} or equivalently {{c2::the Hessian of the NLL}}. Mathematically {{c2::$\\mathbf{J}(\\hat{\\boldsymbol{\\theta} }(\\mathcal{D})) \\triangleq-\\nabla \\mathbf{s}(\\hat{\\boldsymbol{\\theta} })=-\\left.\\nabla_{\\boldsymbol{\\theta} }^{2} \\log p(\\mathcal{D} \\mid \\boldsymbol{\\theta})\\right|_{\\hat{\\boldsymbol{\\theta} } }$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1413, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(3968), 2.5f, 2, "The {{c1::observed information matrix}} is the {{c2::gradient of the negative score function}} or equivalently {{c2::the Hessian of the NLL}}. Mathematically {{c2::$\\mathbf{J}(\\hat{\\boldsymbol{\\theta} }(\\mathcal{D})) \\triangleq-\\nabla \\mathbf{s}(\\hat{\\boldsymbol{\\theta} })=-\\left.\\nabla_{\\boldsymbol{\\theta} }^{2} \\log p(\\mathcal{D} \\mid \\boldsymbol{\\theta})\\right|_{\\hat{\\boldsymbol{\\theta} } }$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1412, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(3919), 2.5f, 2, "The {{c1::observed information matrix}} is the {{c2::gradient of the negative score function}} or equivalently {{c2::the Hessian of the NLL}}. Mathematically {{c2::$\\mathbf{J}(\\hat{\\boldsymbol{\\theta} }(\\mathcal{D})) \\triangleq-\\nabla \\mathbf{s}(\\hat{\\boldsymbol{\\theta} })=-\\left.\\nabla_{\\boldsymbol{\\theta} }^{2} \\log p(\\mathcal{D} \\mid \\boldsymbol{\\theta})\\right|_{\\hat{\\boldsymbol{\\theta} } }$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1411, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(3329), 2.5f, 2, "The {{c1::score function}} is defined as the {{c2::gradient of the log likelihood}}, mathematically {{c2::$\\left.\\mathbf{s}(\\hat{\\boldsymbol{\\theta} }) \\triangleq \\nabla \\log p(\\mathcal{D} \\mid \\boldsymbol{\\theta})\\right|_{\\hat{\\boldsymbol{\\theta} } }$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1410, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(3178), 2.5f, 2, "The {{c1::score function}} is defined as the {{c2::gradient of the log likelihood}}, mathematically {{c2::$\\left.\\mathbf{s}(\\hat{\\boldsymbol{\\theta} }) \\triangleq \\nabla \\log p(\\mathcal{D} \\mid \\boldsymbol{\\theta})\\right|_{\\hat{\\boldsymbol{\\theta} } }$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1409, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(3136), 2.5f, 2, "The {{c1::score function}} is defined as the {{c2::gradient of the log likelihood}}, mathematically {{c2::$\\left.\\mathbf{s}(\\hat{\\boldsymbol{\\theta} }) \\triangleq \\nabla \\log p(\\mathcal{D} \\mid \\boldsymbol{\\theta})\\right|_{\\hat{\\boldsymbol{\\theta} } }$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1408, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(2615), 2.5f, 2, "Under the conditions that the model {{c1::is identifiable}} and {{c2::every parameter of the model sees infinite data}}, then the {{c3::sampling distribution formed by the MLE becomes a Gaussian}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1407, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(2518), 2.5f, 2, "Under the conditions that the model {{c1::is identifiable}} and {{c2::every parameter of the model sees infinite data}}, then the {{c3::sampling distribution formed by the MLE becomes a Gaussian}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1406, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(2463), 2.5f, 2, "Under the conditions that the model {{c1::is identifiable}} and {{c2::every parameter of the model sees infinite data}}, then the {{c3::sampling distribution formed by the MLE becomes a Gaussian}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1418, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(4983), 2.5f, 2, "The relationship between {{c1::the Fisher information matrix}} and {{c1::the observed information matrix}} is that {{c2::the Fisher information matrix is the expectation of the observed information}}. Mathematically {{c2::$\\mathbf{I}_{N}\\left(\\hat{\\boldsymbol{\\theta} } \\mid \\boldsymbol{\\theta}^{*}\\right) \\triangleq \\mathbb{E}_{\\boldsymbol{\\theta}^{*} }[\\mathbf{J}(\\hat{\\boldsymbol{\\theta} } \\mid \\mathcal{D})]$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1433, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 885, DateTimeKind.Utc).AddTicks(303), 2.5f, 2, "The {{c1::integrated or Bayes risk}} is sometimes called the {{c2::preposterior risk}} because it is {{c3::evaluated before we have seen the data}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1434, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 885, DateTimeKind.Utc).AddTicks(348), 2.5f, 2, "The {{c1::integrated or Bayes risk}} is sometimes called the {{c2::preposterior risk}} because it is {{c3::evaluated before we have seen the data}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1435, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 885, DateTimeKind.Utc).AddTicks(892), 2.5f, 2, "{{c1::Wald (1950)}} showed that {{c2::every admissible decision rule is a Bayes decision rule with respect to some prior distribution}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1462, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(4067), 2.5f, 2, "There are less than linear returns to the standard error on the mean (math: {{c1::$\\sigma/\\sqrt{n}$}}) which is why {{c1::SGD converges faster than batch gradient descent}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1461, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(4008), 2.5f, 2, "There are less than linear returns to the standard error on the mean (math: {{c1::$\\sigma/\\sqrt{n}$}}) which is why {{c1::SGD converges faster than batch gradient descent}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1460, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(3514), 2.5f, 2, "In some cases the substitution of {{c1::surrogate losses for the target loss}} results in better models because {{c2::the loss landscape is smoothed which aids in training dynamics and incentivizes our model to better separate classes}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1459, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(3390), 2.5f, 2, "In some cases the substitution of {{c1::surrogate losses for the target loss}} results in better models because {{c2::the loss landscape is smoothed which aids in training dynamics and incentivizes our model to better separate classes}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1458, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(2833), 2.5f, 2, "Empirical risk minimization is not always feasible because {{c1::the functional form for the loss might not be differentiable, as is the case of the 0-1 loss}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1457, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(2195), 2.5f, 2, "The {{c1::empirical risk}} is the {{c2::expectation of the loss function over the empirical data distribution}}. Mathematically this is {{c2::$\\mathbb{E}_{\\boldsymbol{x}, \\mathrm{y} \\sim \\hat{p}_{\\mathrm{data} }(\\boldsymbol{x}, y)}[L(f(\\boldsymbol{x} ; \\boldsymbol{\\theta}), y)]=\\frac{1}{m} \\sum_{i=1}^{m} L\\left(f\\left(\\boldsymbol{x}^{(i)} ; \\boldsymbol{\\theta}\\right), y^{(i)}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1456, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(1951), 2.5f, 2, "The {{c1::empirical risk}} is the {{c2::expectation of the loss function over the empirical data distribution}}. Mathematically this is {{c2::$\\mathbb{E}_{\\boldsymbol{x}, \\mathrm{y} \\sim \\hat{p}_{\\mathrm{data} }(\\boldsymbol{x}, y)}[L(f(\\boldsymbol{x} ; \\boldsymbol{\\theta}), y)]=\\frac{1}{m} \\sum_{i=1}^{m} L\\left(f\\left(\\boldsymbol{x}^{(i)} ; \\boldsymbol{\\theta}\\right), y^{(i)}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1455, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(1873), 2.5f, 2, "The {{c1::empirical risk}} is the {{c2::expectation of the loss function over the empirical data distribution}}. Mathematically this is {{c2::$\\mathbb{E}_{\\boldsymbol{x}, \\mathrm{y} \\sim \\hat{p}_{\\mathrm{data} }(\\boldsymbol{x}, y)}[L(f(\\boldsymbol{x} ; \\boldsymbol{\\theta}), y)]=\\frac{1}{m} \\sum_{i=1}^{m} L\\left(f\\left(\\boldsymbol{x}^{(i)} ; \\boldsymbol{\\theta}\\right), y^{(i)}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1454, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(1295), 2.5f, 2, "Model staleness occurs because {{c1::the parameters of the true data generating distribution or even the model family change through time, while the training dataset is fixed}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1453, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(549), 2.5f, 2, "In terms of optimizing the cost function, the difference between $\\hat{p}_{\\text {data } }$ and $p_{\\text {data } }$ is that {{c1::we do not have access to the true data generating distribution, and so we are not optimizing the true cost function but merely an approximation of it}}. This is related to a situation that can happen in deployment of models which is that {{c1::our model might perform poorly because our training dataset is not in accordance with the actual data distribution}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1452, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(427), 2.5f, 2, "In terms of optimizing the cost function, the difference between $\\hat{p}_{\\text {data } }$ and $p_{\\text {data } }$ is that {{c1::we do not have access to the true data generating distribution, and so we are not optimizing the true cost function but merely an approximation of it}}. This is related to a situation that can happen in deployment of models which is that {{c1::our model might perform poorly because our training dataset is not in accordance with the actual data distribution}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1451, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 885, DateTimeKind.Utc).AddTicks(9536), 2.5f, 2, "\"We can write a cost function as a loss over all the training data, mathematically, with parameters $\\boldsymbol{\\theta}$ this looks like {{c1::$J(\\boldsymbol{\\theta})=\\mathbb{E}_{(\\boldsymbol{x}, \\mathrm{y}) \\sim \\hat{p}_{\\text {data } } } L(f(\\boldsymbol{x} ; \\boldsymbol{\\theta}), y)$}} Because we are using the empirical distribution, this is an approximation to the \"\"true cost\"\" which is {{c1::$J^{*}(\\boldsymbol{\\theta})=\\mathbb{E}_{(\\boldsymbol{x}, y) \\sim p_{\\text {data } } } L(f(\\boldsymbol{x} ; \\boldsymbol{\\theta}), y)$}}\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1450, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 885, DateTimeKind.Utc).AddTicks(9395), 2.5f, 2, "\"We can write a cost function as a loss over all the training data, mathematically, with parameters $\\boldsymbol{\\theta}$ this looks like {{c1::$J(\\boldsymbol{\\theta})=\\mathbb{E}_{(\\boldsymbol{x}, \\mathrm{y}) \\sim \\hat{p}_{\\text {data } } } L(f(\\boldsymbol{x} ; \\boldsymbol{\\theta}), y)$}} Because we are using the empirical distribution, this is an approximation to the \"\"true cost\"\" which is {{c1::$J^{*}(\\boldsymbol{\\theta})=\\mathbb{E}_{(\\boldsymbol{x}, y) \\sim p_{\\text {data } } } L(f(\\boldsymbol{x} ; \\boldsymbol{\\theta}), y)$}}\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1449, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 885, DateTimeKind.Utc).AddTicks(8518), 2.5f, 2, "An estimator is called {{c1::admissible}} if {{c2::it is not dominated by any other estimator}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1448, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 885, DateTimeKind.Utc).AddTicks(8421), 2.5f, 2, "An estimator is called {{c1::admissible}} if {{c2::it is not dominated by any other estimator}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1447, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 885, DateTimeKind.Utc).AddTicks(7945), 2.5f, 2, "An estimator $\\delta_1$ is said to {{c1::dominate}} an estimator $\\delta_2$ if {{c2::for all parameters $\\theta\\in\\Theta$, $R(\\theta,\\delta_1)\\leq R(\\theta,\\delta_2)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1446, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 885, DateTimeKind.Utc).AddTicks(7856), 2.5f, 2, "An estimator $\\delta_1$ is said to {{c1::dominate}} an estimator $\\delta_2$ if {{c2::for all parameters $\\theta\\in\\Theta$, $R(\\theta,\\delta_1)\\leq R(\\theta,\\delta_2)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1445, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 885, DateTimeKind.Utc).AddTicks(7337), 2.5f, 2, "From a Bayesian standpoint, a minimax estimator can be seen as a {{c1::Bayes estimator under a least favorable prior distribution}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1444, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 885, DateTimeKind.Utc).AddTicks(6697), 2.5f, 2, "A minimax estimator is {{c1::very conservative}} because {{c2::they may be worse than other estimators over nearly all of parameter space}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1443, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 885, DateTimeKind.Utc).AddTicks(6615), 2.5f, 2, "A minimax estimator is {{c1::very conservative}} because {{c2::they may be worse than other estimators over nearly all of parameter space}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1442, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 885, DateTimeKind.Utc).AddTicks(6082), 2.5f, 2, "The {{c1::minimax rule for choosing an estimator}} says that we should choose an estimator which {{c2::minimizes the minimax risk}}. Mathematically {{c2::$\\delta_{M M} \\triangleq \\underset{\\delta}{\\operatorname{argmin} } R_{\\max }(\\delta)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1441, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 885, DateTimeKind.Utc).AddTicks(5991), 2.5f, 2, "The {{c1::minimax rule for choosing an estimator}} says that we should choose an estimator which {{c2::minimizes the minimax risk}}. Mathematically {{c2::$\\delta_{M M} \\triangleq \\underset{\\delta}{\\operatorname{argmin} } R_{\\max }(\\delta)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1440, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 885, DateTimeKind.Utc).AddTicks(5952), 2.5f, 2, "The {{c1::minimax rule for choosing an estimator}} says that we should choose an estimator which {{c2::minimizes the minimax risk}}. Mathematically {{c2::$\\delta_{M M} \\triangleq \\underset{\\delta}{\\operatorname{argmin} } R_{\\max }(\\delta)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1439, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 885, DateTimeKind.Utc).AddTicks(5337), 2.5f, 2, "The {{c1::minimax risk}} of an estimator is defined by {{c2::$R_{\\max }(\\delta) \\triangleq \\max _{\\boldsymbol{\\theta}^{*} } R\\left(\\boldsymbol{\\theta}^{*}, \\delta\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1438, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 885, DateTimeKind.Utc).AddTicks(5218), 2.5f, 2, "The {{c1::minimax risk}} of an estimator is defined by {{c2::$R_{\\max }(\\delta) \\triangleq \\max _{\\boldsymbol{\\theta}^{*} } R\\left(\\boldsymbol{\\theta}^{*}, \\delta\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1437, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 885, DateTimeKind.Utc).AddTicks(4029), 2.5f, 2, "$\\begin{aligned}R_{B}(\\delta) &=\\int\\left[\\sum_{\\mathbf{x} } \\sum_{y} L(y, \\delta(\\mathbf{x})) p\\left(\\mathbf{x}, y \\mid \\boldsymbol{\\theta}^{*}\\right)\\right] p\\left(\\boldsymbol{\\theta}^{*}\\right) d \\boldsymbol{\\theta}^{*} \\\\&=\\sum_{\\mathbf{x} } \\sum_{y} \\int_{\\Theta} L(y, \\delta(\\mathbf{x})) p\\left(\\mathbf{x}, y, \\boldsymbol{\\theta}^{*}\\right) d \\boldsymbol{\\theta}^{*} \\\\&=\\sum_{\\mathbf{x} }\\left[\\sum_{y} L(y, \\delta(\\mathbf{x})) p(y \\mid \\mathbf{x}) d y\\right] p(\\mathbf{x}) \\\\&=\\sum_{\\mathbf{x} } \\rho(\\delta(\\mathbf{x}) \\mid \\mathbf{x}) p(\\mathbf{x})\\end{aligned}$ In summary, {{c1::a Bayes estimator can be obtained by minimizing the posterior expected loss for each $\\textbf{x}$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1436, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 885, DateTimeKind.Utc).AddTicks(1268), 2.5f, 2, "{{c1::Wald (1950)}} showed that {{c2::every admissible decision rule is a Bayes decision rule with respect to some prior distribution}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1405, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(1947), 2.5f, 2, "In a Bayesian standpoint, the {{c1::bootstrap}} can be thought of as a crappy {{c2::posterior distribution}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1343, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(6197), 2.5f, 2, "The {{c1::Bayes estimator}} or {{c1::Bayes decision rule}} in Bayesian decision theory is given by {{c2::$\\rho(a \\mid \\mathbf{x}) \\triangleq \\mathbb{E}_{p(y \\mid \\mathbf{x})}[L(y, a)]=\\sum_{y} L(y, a) p(y \\mid \\mathbf{x})$}} {{c2::$\\delta(\\mathbf{x})=\\arg \\min _{a \\in \\mathcal{A} } \\rho(\\mathbf{a} \\mid \\mathbf{x})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1404, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(1915), 2.5f, 2, "In a Bayesian standpoint, the {{c1::bootstrap}} can be thought of as a crappy {{c2::posterior distribution}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1402, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(805), 2.5f, 2, "The core idea behind the bootstrap is that while the true parameter is unknown, we can 1. {{c1::estimate it from the observed data, yielding a parametric bootstrap}} or 2. {{c1::sample new datasets from the observed data with replacement, yielding a non-parametric boostrap}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1370, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(3041), 2.5f, 2, "The {{c1::precision}} is {{c2::$TP/\\hat{N}^+=p(y=1\\mid\\hat{y}=1)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1369, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(2566), 2.5f, 2, "If we are dealing with an unbalanced classification problem, it may be better to use {{c1::PR curves}} than an {{c2::ROC curve}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1368, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(2546), 2.5f, 2, "If we are dealing with an unbalanced classification problem, it may be better to use {{c1::PR curves}} than an {{c2::ROC curve}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1367, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(2026), 2.5f, 2, "The {{c1::equal error rate}} is the {{c2::error rate where the FPR equals the FNR}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1366, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(1978), 2.5f, 2, "The {{c1::equal error rate}} is the {{c2::error rate where the FPR equals the FNR}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1365, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(1501), 2.5f, 2, "To compare models with a ROC curve you can look at {{c1::the area under the curve}} or the {{c2::equal error rate or cross over rate}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1364, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(1456), 2.5f, 2, "To compare models with a ROC curve you can look at {{c1::the area under the curve}} or the {{c2::equal error rate or cross over rate}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1363, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(938), 2.5f, 2, "A {{c1::receiver operating characteristic curve}} plots {{c2::the TPR}} on the y axis and {{c2::the FPR}} on the x-axis.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1362, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(923), 2.5f, 2, "A {{c1::receiver operating characteristic curve}} plots {{c2::the TPR}} on the y axis and {{c2::the FPR}} on the x-axis.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1361, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(905), 2.5f, 2, "A {{c1::receiver operating characteristic curve}} plots {{c2::the TPR}} on the y axis and {{c2::the FPR}} on the x-axis.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1360, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(389), 2.5f, 2, "The {{c1::true negative rate}} is called the {{c2::specificity}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1359, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(367), 2.5f, 2, "The {{c1::true negative rate}} is called the {{c2::specificity}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1371, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(3084), 2.5f, 2, "The {{c1::precision}} is {{c2::$TP/\\hat{N}^+=p(y=1\\mid\\hat{y}=1)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1358, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(9856), 2.5f, 2, "The {{c1::false positive rate}} is also called the {{c2::type I error rate}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1356, 4, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(9315), 2.5f, 2, "The {{c1::true positive rate}} is sometimes called {{c2::the sensitivity}} or {{c3::the recall}} or {{c4::the hit rate}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1355, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(9293), 2.5f, 2, "The {{c1::true positive rate}} is sometimes called {{c2::the sensitivity}} or {{c3::the recall}} or {{c4::the hit rate}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1354, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(9245), 2.5f, 2, "The {{c1::true positive rate}} is sometimes called {{c2::the sensitivity}} or {{c3::the recall}} or {{c4::the hit rate}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1353, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(9218), 2.5f, 2, "The {{c1::true positive rate}} is sometimes called {{c2::the sensitivity}} or {{c3::the recall}} or {{c4::the hit rate}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1352, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(8702), 2.5f, 2, "In Bayesian decision theory, using an $L^2$ loss the optimal policy chooses {{c1::the posterior mean}} because mathematically {{c2::$\\rho(a \\mid \\mathbf{x})=\\mathbb{E}\\left[(y-a)^{2} \\mid \\mathbf{x}\\right]=\\mathbb{E}\\left[y^{2} \\mid \\mathbf{x}\\right]-2 a \\mathbb{E}[y \\mid \\mathbf{x}]+a^{2}$}} {{c2::$\\frac{\\partial}{\\partial a} \\rho(a \\mid \\mathbf{x})=-2 \\mathbb{E}[y \\mid \\mathbf{x}]+2 a=0 \\Rightarrow \\hat{y}=\\mathbb{E}[y \\mid \\mathbf{x}]=\\int y p(y \\mid \\mathbf{x}) d y$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1351, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(8526), 2.5f, 2, "In Bayesian decision theory, using an $L^2$ loss the optimal policy chooses {{c1::the posterior mean}} because mathematically {{c2::$\\rho(a \\mid \\mathbf{x})=\\mathbb{E}\\left[(y-a)^{2} \\mid \\mathbf{x}\\right]=\\mathbb{E}\\left[y^{2} \\mid \\mathbf{x}\\right]-2 a \\mathbb{E}[y \\mid \\mathbf{x}]+a^{2}$}} {{c2::$\\frac{\\partial}{\\partial a} \\rho(a \\mid \\mathbf{x})=-2 \\mathbb{E}[y \\mid \\mathbf{x}]+2 a=0 \\Rightarrow \\hat{y}=\\mathbb{E}[y \\mid \\mathbf{x}]=\\int y p(y \\mid \\mathbf{x}) d y$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1350, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(8359), 2.5f, 2, "In Bayesian decision theory, using an $L^2$ loss the optimal policy chooses {{c1::the posterior mean}} because mathematically {{c2::$\\rho(a \\mid \\mathbf{x})=\\mathbb{E}\\left[(y-a)^{2} \\mid \\mathbf{x}\\right]=\\mathbb{E}\\left[y^{2} \\mid \\mathbf{x}\\right]-2 a \\mathbb{E}[y \\mid \\mathbf{x}]+a^{2}$}} {{c2::$\\frac{\\partial}{\\partial a} \\rho(a \\mid \\mathbf{x})=-2 \\mathbb{E}[y \\mid \\mathbf{x}]+2 a=0 \\Rightarrow \\hat{y}=\\mathbb{E}[y \\mid \\mathbf{x}]=\\int y p(y \\mid \\mathbf{x}) d y$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1349, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(7648), 2.5f, 2, "Under the cost structure $L(y=j, a=i)=\\left\\{\\begin{array}{cc}0 & \\text { if } i=j \\text { and } i, j \\in\\{1, \\ldots, C\\} \\\\\\lambda_{r} & \\text { if } i=C+1 \\\\\\lambda_{s} & \\text { otherwise }\\end{array}\\right.$ the optimal decision is to {{c1::pick the reject action}} if the {{c2::most probable class has probability below $1-\\lambda_r/\\lambda_s$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1348, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(7575), 2.5f, 2, "Under the cost structure $L(y=j, a=i)=\\left\\{\\begin{array}{cc}0 & \\text { if } i=j \\text { and } i, j \\in\\{1, \\ldots, C\\} \\\\\\lambda_{r} & \\text { if } i=C+1 \\\\\\lambda_{s} & \\text { otherwise }\\end{array}\\right.$ the optimal decision is to {{c1::pick the reject action}} if the {{c2::most probable class has probability below $1-\\lambda_r/\\lambda_s$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1347, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(7001), 2.5f, 2, "It is sometimes valuable, especially if we are {{c1::risk averse}} to allow our model to {{c2::choose a reject option when it is uncertain}}. Mathematically we achieve this by allowing {{c2::our model to pick a label which always incurs a loss, albeit one smaller than making the wrong choice}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1346, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(6895), 2.5f, 2, "It is sometimes valuable, especially if we are {{c1::risk averse}} to allow our model to {{c2::choose a reject option when it is uncertain}}. Mathematically we achieve this by allowing {{c2::our model to pick a label which always incurs a loss, albeit one smaller than making the wrong choice}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1345, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(6842), 2.5f, 2, "It is sometimes valuable, especially if we are {{c1::risk averse}} to allow our model to {{c2::choose a reject option when it is uncertain}}. Mathematically we achieve this by allowing {{c2::our model to pick a label which always incurs a loss, albeit one smaller than making the wrong choice}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1357, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 882, DateTimeKind.Utc).AddTicks(9828), 2.5f, 2, "The {{c1::false positive rate}} is also called the {{c2::type I error rate}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1372, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(3560), 2.5f, 2, "The {{c1::recall}} is {{c2::$TP/N_+=p(\\hat{y}=1\\mid y=1)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1373, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(3600), 2.5f, 2, "The {{c1::recall}} is {{c2::$TP/N_+=p(\\hat{y}=1\\mid y=1)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1374, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(4149), 2.5f, 2, "If we want to summarize a point along an ROC or PR curve we can use an {{c1::F1 score or F score}}. This is just {{c2::the harmonic mean of the precision and the recall}}. Mathematically {{c1::$F_{1} \\triangleq \\frac{2}{1 / P+1 / R}=\\frac{2 P R}{R+P}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1401, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(701), 2.5f, 2, "The core idea behind the bootstrap is that while the true parameter is unknown, we can 1. {{c1::estimate it from the observed data, yielding a parametric bootstrap}} or 2. {{c1::sample new datasets from the observed data with replacement, yielding a non-parametric boostrap}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1400, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(9998), 2.5f, 2, "The {{c1::bootstrap}} is a Monte Carlo technique for {{c2::approximating the sampling distribution of an estimator}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1399, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(9932), 2.5f, 2, "The {{c1::bootstrap}} is a Monte Carlo technique for {{c2::approximating the sampling distribution of an estimator}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1398, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(9434), 2.5f, 2, "A parameter estimate is a {{c1::random variable}} in the frequentist standpoint. Therefore we may form the {{c2::sampling distribution}} of an estimator from which we can derive statistics. Mathematically, this is {{c2::$\\left\\{\\hat{\\theta}\\left(\\mathcal{D}^{(s)}\\right)\\right\\}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1397, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(9365), 2.5f, 2, "A parameter estimate is a {{c1::random variable}} in the frequentist standpoint. Therefore we may form the {{c2::sampling distribution}} of an estimator from which we can derive statistics. Mathematically, this is {{c2::$\\left\\{\\hat{\\theta}\\left(\\mathcal{D}^{(s)}\\right)\\right\\}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1396, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(9303), 2.5f, 2, "A parameter estimate is a {{c1::random variable}} in the frequentist standpoint. Therefore we may form the {{c2::sampling distribution}} of an estimator from which we can derive statistics. Mathematically, this is {{c2::$\\left\\{\\hat{\\theta}\\left(\\mathcal{D}^{(s)}\\right)\\right\\}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1395, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(8788), 2.5f, 2, "In frequentist statistics, we compute a {{c1::parameter estimate}} by applying an {{c2::estimator}} to {{c2::the data}}. Symbolically: {{c2::$\\hat{\\theta}=\\delta(\\mathcal{D})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1394, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(8747), 2.5f, 2, "In frequentist statistics, we compute a {{c1::parameter estimate}} by applying an {{c2::estimator}} to {{c2::the data}}. Symbolically: {{c2::$\\hat{\\theta}=\\delta(\\mathcal{D})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1393, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(8731), 2.5f, 2, "In frequentist statistics, we compute a {{c1::parameter estimate}} by applying an {{c2::estimator}} to {{c2::the data}}. Symbolically: {{c2::$\\hat{\\theta}=\\delta(\\mathcal{D})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1392, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(8711), 2.5f, 2, "In frequentist statistics, we compute a {{c1::parameter estimate}} by applying an {{c2::estimator}} to {{c2::the data}}. Symbolically: {{c2::$\\hat{\\theta}=\\delta(\\mathcal{D})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1391, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(8205), 2.5f, 2, "{{c1::DeGroot (1970)}} showed that any {{c2::consistent set of preferences can be converted to a scalar loss/utility function}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1390, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(8083), 2.5f, 2, "{{c1::DeGroot (1970)}} showed that any {{c2::consistent set of preferences can be converted to a scalar loss/utility function}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1389, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(7549), 2.5f, 2, "One heuristic to solve the multi-armed bandit is to take $k^{*}=\\underset{k=1}{\\operatorname{argmax} } \\mu_{k}+\\lambda \\sigma_{k}$ another option is to use {{c1::Thomson sampling}} where we pick actions {{c2::with equal probability to the action being optimal}}, i.e. {{c2::$p_{k}=\\int \\mathbb{I}\\left(\\mathbb{E}[r \\mid a, \\mathbf{x}, \\boldsymbol{\\theta}]=\\max _{a^{\\prime} } \\mathbb{E}\\left[r \\mid a^{\\prime}, \\mathbf{x}, \\boldsymbol{\\theta}\\right]\\right) p(\\boldsymbol{\\theta} \\mid \\mathcal{D}) d \\boldsymbol{\\theta}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1388, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(7303), 2.5f, 2, "One heuristic to solve the multi-armed bandit is to take $k^{*}=\\underset{k=1}{\\operatorname{argmax} } \\mu_{k}+\\lambda \\sigma_{k}$ another option is to use {{c1::Thomson sampling}} where we pick actions {{c2::with equal probability to the action being optimal}}, i.e. {{c2::$p_{k}=\\int \\mathbb{I}\\left(\\mathbb{E}[r \\mid a, \\mathbf{x}, \\boldsymbol{\\theta}]=\\max _{a^{\\prime} } \\mathbb{E}\\left[r \\mid a^{\\prime}, \\mathbf{x}, \\boldsymbol{\\theta}\\right]\\right) p(\\boldsymbol{\\theta} \\mid \\mathcal{D}) d \\boldsymbol{\\theta}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1387, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(7243), 2.5f, 2, "One heuristic to solve the multi-armed bandit is to take $k^{*}=\\underset{k=1}{\\operatorname{argmax} } \\mu_{k}+\\lambda \\sigma_{k}$ another option is to use {{c1::Thomson sampling}} where we pick actions {{c2::with equal probability to the action being optimal}}, i.e. {{c2::$p_{k}=\\int \\mathbb{I}\\left(\\mathbb{E}[r \\mid a, \\mathbf{x}, \\boldsymbol{\\theta}]=\\max _{a^{\\prime} } \\mathbb{E}\\left[r \\mid a^{\\prime}, \\mathbf{x}, \\boldsymbol{\\theta}\\right]\\right) p(\\boldsymbol{\\theta} \\mid \\mathcal{D}) d \\boldsymbol{\\theta}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1386, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(6635), 2.5f, 2, "In dealing with contextual bandits, one common approach is to {{c1::pick the option which has the greatest reward plus uncertainty}}. Mathematically {{c1::$k^{*}=\\underset{k=1}{\\operatorname{argmax} } \\mu_{k}+\\lambda \\sigma_{k}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1385, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(6552), 2.5f, 2, "In dealing with contextual bandits, one common approach is to {{c1::pick the option which has the greatest reward plus uncertainty}}. Mathematically {{c1::$k^{*}=\\underset{k=1}{\\operatorname{argmax} } \\mu_{k}+\\lambda \\sigma_{k}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1384, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(5923), 2.5f, 2, "A {{c1::contextual bandit}} is a generalization of the {{c2::multi-armed bandit problem}} where we also observe a {{c2::feature vector for the bandit and a feature vector for the player}}. As a concrete example, these two vectors might be {{c2::a description of an article we are considering showing to a user and a description of the user}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1383, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(5823), 2.5f, 2, "A {{c1::contextual bandit}} is a generalization of the {{c2::multi-armed bandit problem}} where we also observe a {{c2::feature vector for the bandit and a feature vector for the player}}. As a concrete example, these two vectors might be {{c2::a description of an article we are considering showing to a user and a description of the user}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1382, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(5752), 2.5f, 2, "A {{c1::contextual bandit}} is a generalization of the {{c2::multi-armed bandit problem}} where we also observe a {{c2::feature vector for the bandit and a feature vector for the player}}. As a concrete example, these two vectors might be {{c2::a description of an article we are considering showing to a user and a description of the user}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1381, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(5714), 2.5f, 2, "A {{c1::contextual bandit}} is a generalization of the {{c2::multi-armed bandit problem}} where we also observe a {{c2::feature vector for the bandit and a feature vector for the player}}. As a concrete example, these two vectors might be {{c2::a description of an article we are considering showing to a user and a description of the user}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1380, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(5087), 2.5f, 2, "Different strategies exist for {{c1::adapting F1 scores to multi-class classification}}. One option is to use {{c2::macro-averaged F1 scores}} which are defined by {{c2::$\\sum_{c=1}^{C} F_{1}(c) / C$}} here we treat {{c2::each of the classification problems as a binary problem against the other $C-1$ concepts}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1379, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(4994), 2.5f, 2, "Different strategies exist for {{c1::adapting F1 scores to multi-class classification}}. One option is to use {{c2::macro-averaged F1 scores}} which are defined by {{c2::$\\sum_{c=1}^{C} F_{1}(c) / C$}} here we treat {{c2::each of the classification problems as a binary problem against the other $C-1$ concepts}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1378, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(4958), 2.5f, 2, "Different strategies exist for {{c1::adapting F1 scores to multi-class classification}}. One option is to use {{c2::macro-averaged F1 scores}} which are defined by {{c2::$\\sum_{c=1}^{C} F_{1}(c) / C$}} here we treat {{c2::each of the classification problems as a binary problem against the other $C-1$ concepts}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1377, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(4924), 2.5f, 2, "Different strategies exist for {{c1::adapting F1 scores to multi-class classification}}. One option is to use {{c2::macro-averaged F1 scores}} which are defined by {{c2::$\\sum_{c=1}^{C} F_{1}(c) / C$}} here we treat {{c2::each of the classification problems as a binary problem against the other $C-1$ concepts}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1376, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(4306), 2.5f, 2, "If we want to summarize a point along an ROC or PR curve we can use an {{c1::F1 score or F score}}. This is just {{c2::the harmonic mean of the precision and the recall}}. Mathematically {{c1::$F_{1} \\triangleq \\frac{2}{1 / P+1 / R}=\\frac{2 P R}{R+P}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1375, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 883, DateTimeKind.Utc).AddTicks(4240), 2.5f, 2, "If we want to summarize a point along an ROC or PR curve we can use an {{c1::F1 score or F score}}. This is just {{c2::the harmonic mean of the precision and the recall}}. Mathematically {{c1::$F_{1} \\triangleq \\frac{2}{1 / P+1 / R}=\\frac{2 P R}{R+P}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1403, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 884, DateTimeKind.Utc).AddTicks(1431), 2.5f, 2, "The bootstrap generally functions effectively when {{c1::the Bayesian prior we would otherwise put on the parameter is not very strong}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1463, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(4770), 2.5f, 2, "In addition to questions about the error on the gradient estimate, because there might be {{c1::redundancy in our data}} which {{c1::improves the relative performance of SGD versus BGD}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1221, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 878, DateTimeKind.Utc).AddTicks(4958), 2.5f, 2, "{{c1::Regularized discriminant analysis or RDA}} refers to {{c1::estimating the covariance as a combination of a diagonal and non-diagonal term}} this is equivalent to putting an {{c1::inverse Wishart prior on the covariance}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1219, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 878, DateTimeKind.Utc).AddTicks(4194), 2.5f, 2, "In GDA it can help to project {{c1::data into a low dimensional subspace}} because {{c1::the projection makes the data more normally distributed}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1065, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(2086), 2.5f, 2, "The Pareto distribution is given by {{c1::$\\operatorname{Pareto}(x \\mid k, m)=k m^{k} x^{-(k+1)} \\mathbb{I}(x \\geq m)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1064, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(1435), 2.5f, 2, "{{c1::Zipf's law}} observes that {{c2::the distribution of word frequencies follows approximately a power law}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1063, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(1357), 2.5f, 2, "{{c1::Zipf's law}} observes that {{c2::the distribution of word frequencies follows approximately a power law}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1062, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(904), 2.5f, 2, "The {{c1::beta function}} is given by {{c2::$B(a, b) \\triangleq \\frac{\\Gamma(a) \\Gamma(b)}{\\Gamma(a+b)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1061, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(835), 2.5f, 2, "The {{c1::beta function}} is given by {{c2::$B(a, b) \\triangleq \\frac{\\Gamma(a) \\Gamma(b)}{\\Gamma(a+b)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1060, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(321), 2.5f, 2, "The {{c1::beta distribution}} models {{c2::random variables over the interval [0, 1]}} and is given by {{c2::$\\operatorname{Beta}(x \\mid a, b)=\\frac{1}{B(a, b)} x^{a-1}(1-x)^{b-1}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1059, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(243), 2.5f, 2, "The {{c1::beta distribution}} models {{c2::random variables over the interval [0, 1]}} and is given by {{c2::$\\operatorname{Beta}(x \\mid a, b)=\\frac{1}{B(a, b)} x^{a-1}(1-x)^{b-1}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1058, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(192), 2.5f, 2, "The {{c1::beta distribution}} models {{c2::random variables over the interval [0, 1]}} and is given by {{c2::$\\operatorname{Beta}(x \\mid a, b)=\\frac{1}{B(a, b)} x^{a-1}(1-x)^{b-1}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1057, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(9705), 2.5f, 2, "The {{c1::inverse gamma distribution}} gives the distribution of {{c2::the inverse of a Gamma distributed random variable}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1056, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(9611), 2.5f, 2, "The {{c1::inverse gamma distribution}} gives the distribution of {{c2::the inverse of a Gamma distributed random variable}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1055, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(9097), 2.5f, 2, "The {{c1::inverse gamma distribution}} is given by {{c2::$\\mathrm{IG}(x \\mid \\text {shape}=a, \\text {scale}=b) \\triangleq \\frac{b^{a} }{\\Gamma(a)} x^{-(a+1)} e^{-b / x}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1054, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(8977), 2.5f, 2, "The {{c1::inverse gamma distribution}} is given by {{c2::$\\mathrm{IG}(x \\mid \\text {shape}=a, \\text {scale}=b) \\triangleq \\frac{b^{a} }{\\Gamma(a)} x^{-(a+1)} e^{-b / x}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1066, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(2800), 2.5f, 2, "The correlation is related to the covariance through {{c1::$\\operatorname{corr}[X, Y] \\triangleq \\frac{\\operatorname{cov}[X, Y]}{\\sqrt{\\operatorname{var}[X] \\operatorname{var}[Y]}]}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1053, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(8437), 2.5f, 2, "The {{c1::$\\chi^2$ distribution}} models {{c2::the distribution of the sumof squared Gaussian random variables}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1051, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(7829), 2.5f, 2, "The {{c1::exponential distribution}} models the {{c2::time between events in a Poisson process}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1050, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(7780), 2.5f, 2, "The {{c1::exponential distribution}} models the {{c2::time between events in a Poisson process}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1049, 6, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(7215), 2.5f, 2, "Several other distributions are related to the Gamma distribution {{c1::$\\operatorname{Expon}(x \\mid \\lambda)$}} $\\triangleq$ {{c2::$\\operatorname{Ga}(x \\mid 1, \\lambda)$}} {{c3::$\\operatorname{Erlang}(x \\mid \\lambda)$}} $\\triangleq$ {{c4::$\\operatorname{Ga}(x \\mid 2, \\lambda)$}} {{c5::$\\chi^2(x \\mid \\nu)$}} $\\triangleq$ {{c6::$\\operatorname{Ga}(x \\mid \\frac{\\nu}{2}, \\frac{1}{2})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1048, 5, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(7155), 2.5f, 2, "Several other distributions are related to the Gamma distribution {{c1::$\\operatorname{Expon}(x \\mid \\lambda)$}} $\\triangleq$ {{c2::$\\operatorname{Ga}(x \\mid 1, \\lambda)$}} {{c3::$\\operatorname{Erlang}(x \\mid \\lambda)$}} $\\triangleq$ {{c4::$\\operatorname{Ga}(x \\mid 2, \\lambda)$}} {{c5::$\\chi^2(x \\mid \\nu)$}} $\\triangleq$ {{c6::$\\operatorname{Ga}(x \\mid \\frac{\\nu}{2}, \\frac{1}{2})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1047, 4, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(7127), 2.5f, 2, "Several other distributions are related to the Gamma distribution {{c1::$\\operatorname{Expon}(x \\mid \\lambda)$}} $\\triangleq$ {{c2::$\\operatorname{Ga}(x \\mid 1, \\lambda)$}} {{c3::$\\operatorname{Erlang}(x \\mid \\lambda)$}} $\\triangleq$ {{c4::$\\operatorname{Ga}(x \\mid 2, \\lambda)$}} {{c5::$\\chi^2(x \\mid \\nu)$}} $\\triangleq$ {{c6::$\\operatorname{Ga}(x \\mid \\frac{\\nu}{2}, \\frac{1}{2})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1046, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(7082), 2.5f, 2, "Several other distributions are related to the Gamma distribution {{c1::$\\operatorname{Expon}(x \\mid \\lambda)$}} $\\triangleq$ {{c2::$\\operatorname{Ga}(x \\mid 1, \\lambda)$}} {{c3::$\\operatorname{Erlang}(x \\mid \\lambda)$}} $\\triangleq$ {{c4::$\\operatorname{Ga}(x \\mid 2, \\lambda)$}} {{c5::$\\chi^2(x \\mid \\nu)$}} $\\triangleq$ {{c6::$\\operatorname{Ga}(x \\mid \\frac{\\nu}{2}, \\frac{1}{2})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1045, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(7036), 2.5f, 2, "Several other distributions are related to the Gamma distribution {{c1::$\\operatorname{Expon}(x \\mid \\lambda)$}} $\\triangleq$ {{c2::$\\operatorname{Ga}(x \\mid 1, \\lambda)$}} {{c3::$\\operatorname{Erlang}(x \\mid \\lambda)$}} $\\triangleq$ {{c4::$\\operatorname{Ga}(x \\mid 2, \\lambda)$}} {{c5::$\\chi^2(x \\mid \\nu)$}} $\\triangleq$ {{c6::$\\operatorname{Ga}(x \\mid \\frac{\\nu}{2}, \\frac{1}{2})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1044, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(6988), 2.5f, 2, "Several other distributions are related to the Gamma distribution {{c1::$\\operatorname{Expon}(x \\mid \\lambda)$}} $\\triangleq$ {{c2::$\\operatorname{Ga}(x \\mid 1, \\lambda)$}} {{c3::$\\operatorname{Erlang}(x \\mid \\lambda)$}} $\\triangleq$ {{c4::$\\operatorname{Ga}(x \\mid 2, \\lambda)$}} {{c5::$\\chi^2(x \\mid \\nu)$}} $\\triangleq$ {{c6::$\\operatorname{Ga}(x \\mid \\frac{\\nu}{2}, \\frac{1}{2})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1043, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(6333), 2.5f, 2, "The mean of the Gamma distribution is {{c1::$a/b$}}, the mode is {{c2::$(a-1)/b$}} and the variance is {{c3::$a/b^2$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1042, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(6318), 2.5f, 2, "The mean of the Gamma distribution is {{c1::$a/b$}}, the mode is {{c2::$(a-1)/b$}} and the variance is {{c3::$a/b^2$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1041, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(6297), 2.5f, 2, "The mean of the Gamma distribution is {{c1::$a/b$}}, the mode is {{c2::$(a-1)/b$}} and the variance is {{c3::$a/b^2$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1040, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(5779), 2.5f, 2, "The definition of the Gamma function is {{c1::$\\Gamma(x) \\triangleq \\int_{0}^{\\infty} u^{x-1} e^{-u} d u$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1052, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(8365), 2.5f, 2, "The {{c1::$\\chi^2$ distribution}} models {{c2::the distribution of the sumof squared Gaussian random variables}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1067, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(3851), 2.5f, 2, "The multivariate student $t$ distribution serves as a robust MVN. It is given by {{c1::$\\mathcal{T}(\\mathbf{x} \\mid \\boldsymbol{\\mu}, \\boldsymbol{\\Sigma}, \\nu)=\\frac{\\Gamma(\\nu / 2+D / 2)}{\\Gamma(\\nu / 2)}|\\pi \\mathbf{V}|^{-1 / 2} \\times\\left[1+(\\mathbf{x}-\\boldsymbol{\\mu})^{T} \\mathbf{V}^{-1}(\\mathbf{x}-\\boldsymbol{\\mu})\\right]^{-\\left(\\frac{\\nu+D}{2}\\right)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1068, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(4398), 2.5f, 2, "The {{c1::probability simplex}} is mathematically described by {{c2::$S_{K}=\\left\\{\\mathbf{x}: 0 \\leq x_{k} \\leq 1, \\sum_{k=1}^{K} x_{k}=1\\right\\}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1069, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(4485), 2.5f, 2, "The {{c1::probability simplex}} is mathematically described by {{c2::$S_{K}=\\left\\{\\mathbf{x}: 0 \\leq x_{k} \\leq 1, \\sum_{k=1}^{K} x_{k}=1\\right\\}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1096, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(2109), 2.5f, 2, "{{c1::Concept learning}} is {{c2::equivalent to binary classification}} because if we {{c3::can learn an indicator function for the concept it's reasonable to say we understand the concept}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1095, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(2064), 2.5f, 2, "{{c1::Concept learning}} is {{c2::equivalent to binary classification}} because if we {{c3::can learn an indicator function for the concept it's reasonable to say we understand the concept}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1094, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(1583), 2.5f, 2, "Research by {{c1::Xu and Tenenbaum (2007)}} shows that people can learn concepts {{c2::from positive examples alone}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1093, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(1544), 2.5f, 2, "Research by {{c1::Xu and Tenenbaum (2007)}} shows that people can learn concepts {{c2::from positive examples alone}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1092, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(1010), 2.5f, 2, "The {{c1::pointwise mutual information}} for two events is given by {{c2::$\\operatorname{PMI}(x, y) \\triangleq \\log \\frac{p(x, y)}{p(x) p(y)}=\\log \\frac{p(x \\mid y)}{p(x)}=\\log \\frac{p(y \\mid x)}{p(y)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1091, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(872), 2.5f, 2, "The {{c1::pointwise mutual information}} for two events is given by {{c2::$\\operatorname{PMI}(x, y) \\triangleq \\log \\frac{p(x, y)}{p(x) p(y)}=\\log \\frac{p(x \\mid y)}{p(x)}=\\log \\frac{p(y \\mid x)}{p(y)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1090, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(328), 2.5f, 2, "The mutual information between two variables is {{c1::zero}} if they are {{c2::independent}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1089, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(307), 2.5f, 2, "The mutual information between two variables is {{c1::zero}} if they are {{c2::independent}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1088, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(9840), 2.5f, 2, "The {{c1::mutual information}} between random variables is given by {{c2::$\\mathbb{I}(X ; Y) \\triangleq \\mathbb{K} \\mathbb{L}(p(X, Y) \\| p(X) p(Y))=\\sum_{x} \\sum_{y} p(x, y) \\log \\frac{p(x, y)}{p(x) p(y)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1087, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(9702), 2.5f, 2, "The {{c1::mutual information}} between random variables is given by {{c2::$\\mathbb{I}(X ; Y) \\triangleq \\mathbb{K} \\mathbb{L}(p(X, Y) \\| p(X) p(Y))=\\sum_{x} \\sum_{y} p(x, y) \\log \\frac{p(x, y)}{p(x) p(y)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1086, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(9195), 2.5f, 2, "{{c1::Laplace's principle of insufficient reason}} suggests {{c2::using uniform (or in a more modern context, uninformative distributions) when you do not know anything and want to be non-committal}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1085, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(9058), 2.5f, 2, "{{c1::Laplace's principle of insufficient reason}} suggests {{c2::using uniform (or in a more modern context, uninformative distributions) when you do not know anything and want to be non-committal}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1084, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(8480), 2.5f, 2, "{{c1::Jensen's inequality}} states that for a {{c2::convex function}} {{c2::$f\\left(\\sum_{i=1}^{n} \\lambda_{i} \\mathbf{x}_{i}\\right) \\leq \\sum_{i=1}^{n} \\lambda_{i} f\\left(\\mathbf{x}_{i}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1083, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(8357), 2.5f, 2, "{{c1::Jensen's inequality}} states that for a {{c2::convex function}} {{c2::$f\\left(\\sum_{i=1}^{n} \\lambda_{i} \\mathbf{x}_{i}\\right) \\leq \\sum_{i=1}^{n} \\lambda_{i} f\\left(\\mathbf{x}_{i}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1082, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(8300), 2.5f, 2, "{{c1::Jensen's inequality}} states that for a {{c2::convex function}} {{c2::$f\\left(\\sum_{i=1}^{n} \\lambda_{i} \\mathbf{x}_{i}\\right) \\leq \\sum_{i=1}^{n} \\lambda_{i} f\\left(\\mathbf{x}_{i}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1081, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(7647), 2.5f, 2, "Information theory concerns both {{c1::compression}} or {{c2::source coding}} and {{c1::error correction}} or {{c2::channel coding}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1080, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(7625), 2.5f, 2, "Information theory concerns both {{c1::compression}} or {{c2::source coding}} and {{c1::error correction}} or {{c2::channel coding}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1079, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(7602), 2.5f, 2, "Information theory concerns both {{c1::compression}} or {{c2::source coding}} and {{c1::error correction}} or {{c2::channel coding}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1078, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(7578), 2.5f, 2, "Information theory concerns both {{c1::compression}} or {{c2::source coding}} and {{c1::error correction}} or {{c2::channel coding}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1077, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(7103), 2.5f, 2, "If $\\mathbf{y}=f(\\mathbf{x})=\\mathbf{A} \\mathbf{x}+\\mathbf{b}$ then the expectation of $\\mathbf{y}$ is given by {{c1::$\\mathbb{E}[\\mathbf{y}]=\\mathbb{E}[\\mathbf{A} \\mathbf{x}+\\mathbf{b}]=\\mathbf{A} \\boldsymbol{\\mu}+\\mathbf{b}$}} the covariance by {{c2::$\\operatorname{cov}[\\mathbf{y}]=\\operatorname{cov}[\\mathbf{A} \\mathbf{x}+\\mathbf{b}]=\\mathbf{A} \\boldsymbol{\\Sigma} \\mathbf{A}^{T}$}} and the probability distribution by {{c3::$p_{y}(\\mathbf{y})=p_{x}(\\mathbf{x})\\left|\\operatorname{det}\\left(\\frac{\\partial \\mathbf{x} }{\\partial \\mathbf{y} }\\right)\\right|$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1076, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(6967), 2.5f, 2, "If $\\mathbf{y}=f(\\mathbf{x})=\\mathbf{A} \\mathbf{x}+\\mathbf{b}$ then the expectation of $\\mathbf{y}$ is given by {{c1::$\\mathbb{E}[\\mathbf{y}]=\\mathbb{E}[\\mathbf{A} \\mathbf{x}+\\mathbf{b}]=\\mathbf{A} \\boldsymbol{\\mu}+\\mathbf{b}$}} the covariance by {{c2::$\\operatorname{cov}[\\mathbf{y}]=\\operatorname{cov}[\\mathbf{A} \\mathbf{x}+\\mathbf{b}]=\\mathbf{A} \\boldsymbol{\\Sigma} \\mathbf{A}^{T}$}} and the probability distribution by {{c3::$p_{y}(\\mathbf{y})=p_{x}(\\mathbf{x})\\left|\\operatorname{det}\\left(\\frac{\\partial \\mathbf{x} }{\\partial \\mathbf{y} }\\right)\\right|$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1075, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(6797), 2.5f, 2, "If $\\mathbf{y}=f(\\mathbf{x})=\\mathbf{A} \\mathbf{x}+\\mathbf{b}$ then the expectation of $\\mathbf{y}$ is given by {{c1::$\\mathbb{E}[\\mathbf{y}]=\\mathbb{E}[\\mathbf{A} \\mathbf{x}+\\mathbf{b}]=\\mathbf{A} \\boldsymbol{\\mu}+\\mathbf{b}$}} the covariance by {{c2::$\\operatorname{cov}[\\mathbf{y}]=\\operatorname{cov}[\\mathbf{A} \\mathbf{x}+\\mathbf{b}]=\\mathbf{A} \\boldsymbol{\\Sigma} \\mathbf{A}^{T}$}} and the probability distribution by {{c3::$p_{y}(\\mathbf{y})=p_{x}(\\mathbf{x})\\left|\\operatorname{det}\\left(\\frac{\\partial \\mathbf{x} }{\\partial \\mathbf{y} }\\right)\\right|$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1074, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(5990), 2.5f, 2, "The {{c1::multivariate beta function}} is given by {{c2::$B(\\boldsymbol{\\alpha}) \\triangleq \\frac{\\prod_{k=1}^{K} \\Gamma\\left(\\alpha_{k}\\right)}{\\Gamma\\left(\\alpha_{0}\\right)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1073, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(5863), 2.5f, 2, "The {{c1::multivariate beta function}} is given by {{c2::$B(\\boldsymbol{\\alpha}) \\triangleq \\frac{\\prod_{k=1}^{K} \\Gamma\\left(\\alpha_{k}\\right)}{\\Gamma\\left(\\alpha_{0}\\right)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1072, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(5285), 2.5f, 2, "The {{c1::Dirichlet distribution}} generalizes {{c2::the beta distribution over the probability simplex}}. It has the form {{c3::$\\operatorname{Dir}(\\mathbf{x} \\mid \\boldsymbol{\\alpha}) \\triangleq \\frac{1}{B(\\boldsymbol{\\alpha})} \\prod_{k=1}^{K} x_{k}^{\\alpha_{k}-1} \\mathbb{I}\\left(\\mathbf{x} \\in S_{K}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1071, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(5100), 2.5f, 2, "The {{c1::Dirichlet distribution}} generalizes {{c2::the beta distribution over the probability simplex}}. It has the form {{c3::$\\operatorname{Dir}(\\mathbf{x} \\mid \\boldsymbol{\\alpha}) \\triangleq \\frac{1}{B(\\boldsymbol{\\alpha})} \\prod_{k=1}^{K} x_{k}^{\\alpha_{k}-1} \\mathbb{I}\\left(\\mathbf{x} \\in S_{K}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1070, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 874, DateTimeKind.Utc).AddTicks(5040), 2.5f, 2, "The {{c1::Dirichlet distribution}} generalizes {{c2::the beta distribution over the probability simplex}}. It has the form {{c3::$\\operatorname{Dir}(\\mathbf{x} \\mid \\boldsymbol{\\alpha}) \\triangleq \\frac{1}{B(\\boldsymbol{\\alpha})} \\prod_{k=1}^{K} x_{k}^{\\alpha_{k}-1} \\mathbb{I}\\left(\\mathbf{x} \\in S_{K}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1039, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(5057), 2.5f, 2, "The {{c1::gamma distribution}} is given by {{c2:: $\\mathrm{Ga}(T \\mid \\text {shape}=a, \\text {rate}=b) \\triangleq \\frac{b^{a} }{\\Gamma(a)} T^{a-1} e^{-T b}$ }}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1097, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(2212), 2.5f, 2, "{{c1::Concept learning}} is {{c2::equivalent to binary classification}} because if we {{c3::can learn an indicator function for the concept it's reasonable to say we understand the concept}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1038, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(4940), 2.5f, 2, "The {{c1::gamma distribution}} is given by {{c2:: $\\mathrm{Ga}(T \\mid \\text {shape}=a, \\text {rate}=b) \\triangleq \\frac{b^{a} }{\\Gamma(a)} T^{a-1} e^{-T b}$ }}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1036, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(3900), 2.5f, 2, "For the Student $t$ distribution, the special case of {{c1::$\\nu=1$}} is called the {{c2::Cauchy or Lorentz}} distribution.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1004, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(5653), 2.5f, 2, "Ignoring the {{c1::prior probability of something being true}} means you are committing the {{c2::base rate fallacy}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1003, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(5097), 2.5f, 2, "Tangent propagation has some shortcomings: 1. {{c1::It regularizes the model only to resist infinitesimal perturbation because we do not know the manifold curvature (and so cannot set hyperparameters appropriately). Explicit augmentation allows us just to sample the data manifold which gets around this curvature problem.}} 2. {{c2::There are particular problems with ReLU: ReLU based models can only shrink their derivatives by turning off units or shrinking weights. Dataset augmentation works well here because different sets of the rectifying units can activate for different data transformations.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1002, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(4829), 2.5f, 2, "Tangent propagation has some shortcomings: 1. {{c1::It regularizes the model only to resist infinitesimal perturbation because we do not know the manifold curvature (and so cannot set hyperparameters appropriately). Explicit augmentation allows us just to sample the data manifold which gets around this curvature problem.}} 2. {{c2::There are particular problems with ReLU: ReLU based models can only shrink their derivatives by turning off units or shrinking weights. Dataset augmentation works well here because different sets of the rectifying units can activate for different data transformations.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1001, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(3780), 2.5f, 2, "The difference between tangent propagation and data augmentation is that tangent propagation {{c1::enforces its inductive biases in the loss function instead of in the dataset}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1000, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(3136), 2.5f, 2, "{{c1::Tangent propagation}} is closely related to the ideas of {{c2::data augmentation}} beause both {{c2::encode prior knowledge about the structure of the data manifold}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 999, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(3066), 2.5f, 2, "{{c1::Tangent propagation}} is closely related to the ideas of {{c2::data augmentation}} beause both {{c2::encode prior knowledge about the structure of the data manifold}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 998, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(3038), 2.5f, 2, "{{c1::Tangent propagation}} is closely related to the ideas of {{c2::data augmentation}} beause both {{c2::encode prior knowledge about the structure of the data manifold}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 997, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(2490), 2.5f, 2, "The {{c1::tangent prop algorithm}} trains a neural network with {{c2::the extra penalty enforcing local invariance to deformations that move data points along the data manifold}}. Mathematically, if we correctly classify $x$, then we want to correctly classify {{c2::$x+v$ for $v$ in the tangent space at $x$}}. Mathematically this can be enforced with the term {{c2::$\\Omega(f)=\\sum_{i}\\left(\\left(\\nabla_{\\boldsymbol{x} } f(\\boldsymbol{x})\\right)^{\\top} \\boldsymbol{v}^{(i)}\\right)^{2}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 996, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(2365), 2.5f, 2, "The {{c1::tangent prop algorithm}} trains a neural network with {{c2::the extra penalty enforcing local invariance to deformations that move data points along the data manifold}}. Mathematically, if we correctly classify $x$, then we want to correctly classify {{c2::$x+v$ for $v$ in the tangent space at $x$}}. Mathematically this can be enforced with the term {{c2::$\\Omega(f)=\\sum_{i}\\left(\\left(\\nabla_{\\boldsymbol{x} } f(\\boldsymbol{x})\\right)^{\\top} \\boldsymbol{v}^{(i)}\\right)^{2}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 995, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(2315), 2.5f, 2, "The {{c1::tangent prop algorithm}} trains a neural network with {{c2::the extra penalty enforcing local invariance to deformations that move data points along the data manifold}}. Mathematically, if we correctly classify $x$, then we want to correctly classify {{c2::$x+v$ for $v$ in the tangent space at $x$}}. Mathematically this can be enforced with the term {{c2::$\\Omega(f)=\\sum_{i}\\left(\\left(\\nabla_{\\boldsymbol{x} } f(\\boldsymbol{x})\\right)^{\\top} \\boldsymbol{v}^{(i)}\\right)^{2}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 994, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(2201), 2.5f, 2, "The {{c1::tangent prop algorithm}} trains a neural network with {{c2::the extra penalty enforcing local invariance to deformations that move data points along the data manifold}}. Mathematically, if we correctly classify $x$, then we want to correctly classify {{c2::$x+v$ for $v$ in the tangent space at $x$}}. Mathematically this can be enforced with the term {{c2::$\\Omega(f)=\\sum_{i}\\left(\\left(\\nabla_{\\boldsymbol{x} } f(\\boldsymbol{x})\\right)^{\\top} \\boldsymbol{v}^{(i)}\\right)^{2}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 993, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(1425), 2.5f, 2, "{{c1::Tangent learning}} is a {{c2::non-parametric nearest neighbor algorithm where the metric is derived from knowledge of where samples are concentrated on the data manifold}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1005, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(5681), 2.5f, 2, "Ignoring the {{c1::prior probability of something being true}} means you are committing the {{c2::base rate fallacy}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 992, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(1280), 2.5f, 2, "{{c1::Tangent learning}} is a {{c2::non-parametric nearest neighbor algorithm where the metric is derived from knowledge of where samples are concentrated on the data manifold}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 990, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(134), 2.5f, 2, "{{c1::Virtual adversarial examples}} refer to when we make {{c2::adversarial examples in a semi-supervised context just by forcing the model to change its mind at all}}. This works because {{c2::if the model is a good one it correctly labels most of the examples}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 989, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(60), 2.5f, 2, "{{c1::Virtual adversarial examples}} refer to when we make {{c2::adversarial examples in a semi-supervised context just by forcing the model to change its mind at all}}. This works because {{c2::if the model is a good one it correctly labels most of the examples}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 988, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 871, DateTimeKind.Utc).AddTicks(9918), 2.5f, 2, "{{c1::Virtual adversarial examples}} refer to when we make {{c2::adversarial examples in a semi-supervised context just by forcing the model to change its mind at all}}. This works because {{c2::if the model is a good one it correctly labels most of the examples}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 987, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 871, DateTimeKind.Utc).AddTicks(9356), 2.5f, 2, "When it comes to resisting adversarial examples, purely linear models {{c1::cannot resist because there are directions where the gradient is large}}, and deep models {{c2::in principle can if well regularized because they have the capacity}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 986, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 871, DateTimeKind.Utc).AddTicks(9280), 2.5f, 2, "When it comes to resisting adversarial examples, purely linear models {{c1::cannot resist because there are directions where the gradient is large}}, and deep models {{c2::in principle can if well regularized because they have the capacity}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 985, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 871, DateTimeKind.Utc).AddTicks(8669), 2.5f, 2, "Adversarial training establishes a prior enforcing {{c1::local constancy of labels}} around the data.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 984, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 871, DateTimeKind.Utc).AddTicks(8148), 2.5f, 2, "To see that adversarial examples exist on high dimensional linear classifiers we just need to take a step along {{c1::$\\operatorname{sign}\\left(\\nabla_{\\boldsymbol{x} } J(\\boldsymbol{\\theta}, \\boldsymbol{x}, y)\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 983, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 871, DateTimeKind.Utc).AddTicks(7478), 2.5f, 2, "Intuitively, we can understand adversarial examples as arising {{c1::out of the linearity of deep neural networks. Because of the large number of inputs and local piecewise linearity, there is some direction where the loss grows steeply}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 982, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 871, DateTimeKind.Utc).AddTicks(6662), 2.5f, 2, "An {{c1::adversarial example}} is an {{c2::example very close under some distance measure to an example correctly classified but which the model misclassifies}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 981, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 871, DateTimeKind.Utc).AddTicks(6540), 2.5f, 2, "An {{c1::adversarial example}} is an {{c2::example very close under some distance measure to an example correctly classified but which the model misclassifies}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 980, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 871, DateTimeKind.Utc).AddTicks(6026), 2.5f, 2, "{{c1::Adversarial training}} refers to the process of {{c2::using adversarial examples in the training process in order to improve the generalization of the model}}. This is a kind of {{c2::regularization}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 979, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 871, DateTimeKind.Utc).AddTicks(5972), 2.5f, 2, "{{c1::Adversarial training}} refers to the process of {{c2::using adversarial examples in the training process in order to improve the generalization of the model}}. This is a kind of {{c2::regularization}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 991, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(797), 2.5f, 2, "From a manifold learning perspective, virtual adversarial training works because {{c1::it helps enforce local constancy on the data manifold and well-separation of the class manifolds}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1006, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(6192), 2.5f, 2, "For random variables {{c1::independent}} = {{c2::unconditionally independent}} = {{c3::marginally independent}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1007, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(6228), 2.5f, 2, "For random variables {{c1::independent}} = {{c2::unconditionally independent}} = {{c3::marginally independent}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1008, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(6258), 2.5f, 2, "For random variables {{c1::independent}} = {{c2::unconditionally independent}} = {{c3::marginally independent}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1035, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(3872), 2.5f, 2, "For the Student $t$ distribution, the special case of {{c1::$\\nu=1$}} is called the {{c2::Cauchy or Lorentz}} distribution.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1034, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(3364), 2.5f, 2, "The Student $t$ distribution has the form {{c1::$\\mathcal{T}\\left(x \\mid \\mu, \\sigma^{2}, \\nu\\right) \\propto\\left[1+\\frac{1}{\\nu}\\left(\\frac{x-\\mu}{\\sigma}\\right)^{2}\\right]^{-\\left(\\frac{\\nu+1}{2}\\right)}$}} Here, $\\nu$ is called the {{c2::degrees of freedom}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1033, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(3335), 2.5f, 2, "The Student $t$ distribution has the form {{c1::$\\mathcal{T}\\left(x \\mid \\mu, \\sigma^{2}, \\nu\\right) \\propto\\left[1+\\frac{1}{\\nu}\\left(\\frac{x-\\mu}{\\sigma}\\right)^{2}\\right]^{-\\left(\\frac{\\nu+1}{2}\\right)}$}} Here, $\\nu$ is called the {{c2::degrees of freedom}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1032, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(2512), 2.5f, 2, "A {{c1::Student $t$ distribution}} is like a normal distribution except it {{c2::has heavier tails}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1031, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(2484), 2.5f, 2, "A {{c1::Student $t$ distribution}} is like a normal distribution except it {{c2::has heavier tails}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1030, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(1896), 2.5f, 2, "{{c1::Dirac delta functions}} have the {{c2::sifting property}} which means that (mathematically) {{c3::$\\int_{-\\infty}^{\\infty} f(x) \\delta(x-\\mu) d x=f(\\mu)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1029, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(1834), 2.5f, 2, "{{c1::Dirac delta functions}} have the {{c2::sifting property}} which means that (mathematically) {{c3::$\\int_{-\\infty}^{\\infty} f(x) \\delta(x-\\mu) d x=f(\\mu)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1028, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(1806), 2.5f, 2, "{{c1::Dirac delta functions}} have the {{c2::sifting property}} which means that (mathematically) {{c3::$\\int_{-\\infty}^{\\infty} f(x) \\delta(x-\\mu) d x=f(\\mu)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1027, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(1217), 2.5f, 2, "The {{c1::error function}} is defined to be {{c2::$\\operatorname{erf}(x) \\triangleq \\frac{2}{\\sqrt{\\pi} } \\int_{0}^{x} e^{-t^{2} } d t$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1026, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(1123), 2.5f, 2, "The {{c1::error function}} is defined to be {{c2::$\\operatorname{erf}(x) \\triangleq \\frac{2}{\\sqrt{\\pi} } \\int_{0}^{x} e^{-t^{2} } d t$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1025, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(615), 2.5f, 2, "The CDF for a normal distribution in terms of the error function is {{c1::$\\Phi(x ; \\mu, \\sigma)=\\frac{1}{2}[1+\\operatorname{erf}((x-\\mu) / \\sqrt{2\\sigma^2})]$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1024, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(9971), 2.5f, 2, "The {{c1::Poisson distribution}} is given by {{c2::$\\operatorname{Poi}(x \\mid \\lambda)=e^{-\\lambda} \\frac{\\lambda^{x} }{x !}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1023, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(9887), 2.5f, 2, "The {{c1::Poisson distribution}} is given by {{c2::$\\operatorname{Poi}(x \\mid \\lambda)=e^{-\\lambda} \\frac{\\lambda^{x} }{x !}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1022, 4, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(9335), 2.5f, 2, "{{c1::Bernoulli}} is to {{c2::Binomial}} as {{c3::Multinoulli}} is to {{c4::Multinomial}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1021, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(9316), 2.5f, 2, "{{c1::Bernoulli}} is to {{c2::Binomial}} as {{c3::Multinoulli}} is to {{c4::Multinomial}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1020, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(9297), 2.5f, 2, "{{c1::Bernoulli}} is to {{c2::Binomial}} as {{c3::Multinoulli}} is to {{c4::Multinomial}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1019, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(9279), 2.5f, 2, "{{c1::Bernoulli}} is to {{c2::Binomial}} as {{c3::Multinoulli}} is to {{c4::Multinomial}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1018, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(8823), 2.5f, 2, "A {{c1::one hot encoding}} is also sometimes called a {{c2::dummy encoding}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1017, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(8799), 2.5f, 2, "A {{c1::one hot encoding}} is also sometimes called a {{c2::dummy encoding}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1016, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(8306), 2.5f, 2, "The {{c1::multinomial coefficient}} is given by {{c2::$\\left(\\begin{array}{c}n \\\\x_{1} \\ldots x_{K}\\end{array}\\right) \\triangleq \\frac{n !}{x_{1} ! x_{2} ! \\cdots x_{K} !}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1015, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(8181), 2.5f, 2, "The {{c1::multinomial coefficient}} is given by {{c2::$\\left(\\begin{array}{c}n \\\\x_{1} \\ldots x_{K}\\end{array}\\right) \\triangleq \\frac{n !}{x_{1} ! x_{2} ! \\cdots x_{K} !}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1014, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(7572), 2.5f, 2, "The {{c1::binomial distribution}} is given by {{c2::$\\operatorname{Bin}(k \\mid n, \\theta) \\triangleq\\left(\\begin{array}{c}n \\\\k\\end{array}\\right) \\theta^{k}(1-\\theta)^{n-k}$}} it has a mean of {{c2::$\\theta$}} and a variance of {{c3::$n\\theta(1-\\theta)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1013, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(7545), 2.5f, 2, "The {{c1::binomial distribution}} is given by {{c2::$\\operatorname{Bin}(k \\mid n, \\theta) \\triangleq\\left(\\begin{array}{c}n \\\\k\\end{array}\\right) \\theta^{k}(1-\\theta)^{n-k}$}} it has a mean of {{c2::$\\theta$}} and a variance of {{c3::$n\\theta(1-\\theta)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1012, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(7529), 2.5f, 2, "The {{c1::binomial distribution}} is given by {{c2::$\\operatorname{Bin}(k \\mid n, \\theta) \\triangleq\\left(\\begin{array}{c}n \\\\k\\end{array}\\right) \\theta^{k}(1-\\theta)^{n-k}$}} it has a mean of {{c2::$\\theta$}} and a variance of {{c3::$n\\theta(1-\\theta)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1011, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(7401), 2.5f, 2, "The {{c1::binomial distribution}} is given by {{c2::$\\operatorname{Bin}(k \\mid n, \\theta) \\triangleq\\left(\\begin{array}{c}n \\\\k\\end{array}\\right) \\theta^{k}(1-\\theta)^{n-k}$}} it has a mean of {{c2::$\\theta$}} and a variance of {{c3::$n\\theta(1-\\theta)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1010, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(6884), 2.5f, 2, "The {{c1::$\\alpha$ quantile of F}} is {{c2::the value of $x_\\alpha$ such that $P(X\\leq x_\\alpha)=\\alpha$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1009, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 872, DateTimeKind.Utc).AddTicks(6815), 2.5f, 2, "The {{c1::$\\alpha$ quantile of F}} is {{c2::the value of $x_\\alpha$ such that $P(X\\leq x_\\alpha)=\\alpha$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1037, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 873, DateTimeKind.Utc).AddTicks(4434), 2.5f, 2, "It is very common to use a value of $\\nu$ of {{c1::$4$}} in the Student $t$ distribution.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1220, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 878, DateTimeKind.Utc).AddTicks(4258), 2.5f, 2, "In GDA it can help to project {{c1::data into a low dimensional subspace}} because {{c1::the projection makes the data more normally distributed}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1098, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(2724), 2.5f, 2, "A {{c1::fuzzy set}} is a set together with a {{c2::membership function which maps onto the [0,1] interval}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1100, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(3449), 2.5f, 2, "The {{c1::number game by Josh Tenenbaum}} is a playground to think about how {{c2::humans perform inductive reasoning}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1187, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 877, DateTimeKind.Utc).AddTicks(2768), 2.5f, 2, "{{c1::Burstiness}} refers to how the {{c2::the presence of a feature in a structured piece of data like a document increases the likelihood that that same feature will be observed again}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1186, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 877, DateTimeKind.Utc).AddTicks(2142), 2.5f, 2, "The {{c1::Bernoulli product model}} fails to take into account {{c2::the total number of occurrences of features in documents}}. You can try to improve this by using a {{c2::Binomial distribution for the occurrences}} except this {{c2::fails to model that if a feature appears once it will appear again with higher probability}}. A better choice then is to use a {{c2::Dirichlet Compound Mutlinomial or DCM density}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1185, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 877, DateTimeKind.Utc).AddTicks(2089), 2.5f, 2, "The {{c1::Bernoulli product model}} fails to take into account {{c2::the total number of occurrences of features in documents}}. You can try to improve this by using a {{c2::Binomial distribution for the occurrences}} except this {{c2::fails to model that if a feature appears once it will appear again with higher probability}}. A better choice then is to use a {{c2::Dirichlet Compound Mutlinomial or DCM density}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1184, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 877, DateTimeKind.Utc).AddTicks(1994), 2.5f, 2, "The {{c1::Bernoulli product model}} fails to take into account {{c2::the total number of occurrences of features in documents}}. You can try to improve this by using a {{c2::Binomial distribution for the occurrences}} except this {{c2::fails to model that if a feature appears once it will appear again with higher probability}}. A better choice then is to use a {{c2::Dirichlet Compound Mutlinomial or DCM density}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1183, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 877, DateTimeKind.Utc).AddTicks(1945), 2.5f, 2, "The {{c1::Bernoulli product model}} fails to take into account {{c2::the total number of occurrences of features in documents}}. You can try to improve this by using a {{c2::Binomial distribution for the occurrences}} except this {{c2::fails to model that if a feature appears once it will appear again with higher probability}}. A better choice then is to use a {{c2::Dirichlet Compound Mutlinomial or DCM density}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1182, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 877, DateTimeKind.Utc).AddTicks(1879), 2.5f, 2, "The {{c1::Bernoulli product model}} fails to take into account {{c2::the total number of occurrences of features in documents}}. You can try to improve this by using a {{c2::Binomial distribution for the occurrences}} except this {{c2::fails to model that if a feature appears once it will appear again with higher probability}}. A better choice then is to use a {{c2::Dirichlet Compound Mutlinomial or DCM density}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1181, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 877, DateTimeKind.Utc).AddTicks(1303), 2.5f, 2, "A {{c1::Bernoulli product model}} or a {{c1::binary independence model}} models documents by {{c2::retaining the presence of features in bit-flags as in an NBC}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1180, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 877, DateTimeKind.Utc).AddTicks(1237), 2.5f, 2, "A {{c1::Bernoulli product model}} or a {{c1::binary independence model}} models documents by {{c2::retaining the presence of features in bit-flags as in an NBC}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1179, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 877, DateTimeKind.Utc).AddTicks(1202), 2.5f, 2, "A {{c1::Bernoulli product model}} or a {{c1::binary independence model}} models documents by {{c2::retaining the presence of features in bit-flags as in an NBC}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1178, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 877, DateTimeKind.Utc).AddTicks(694), 2.5f, 2, "One simple approach to {{c1::variable ranking}} is to use the {{c2::mutual information between features and class labels}}. Mathematically, this is {{c2::$I(X, Y)=\\sum_{x_{j} } \\sum_{y} p\\left(x_{j}, y\\right) \\log \\frac{p\\left(x_{j}, y\\right)}{p\\left(x_{j}\\right) p(y)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1177, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 877, DateTimeKind.Utc).AddTicks(569), 2.5f, 2, "One simple approach to {{c1::variable ranking}} is to use the {{c2::mutual information between features and class labels}}. Mathematically, this is {{c2::$I(X, Y)=\\sum_{x_{j} } \\sum_{y} p\\left(x_{j}, y\\right) \\log \\frac{p\\left(x_{j}, y\\right)}{p\\left(x_{j}\\right) p(y)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1176, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 877, DateTimeKind.Utc).AddTicks(506), 2.5f, 2, "One simple approach to {{c1::variable ranking}} is to use the {{c2::mutual information between features and class labels}}. Mathematically, this is {{c2::$I(X, Y)=\\sum_{x_{j} } \\sum_{y} p\\left(x_{j}, y\\right) \\log \\frac{p\\left(x_{j}, y\\right)}{p\\left(x_{j}\\right) p(y)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1188, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 877, DateTimeKind.Utc).AddTicks(2918), 2.5f, 2, "{{c1::Burstiness}} refers to how the {{c2::the presence of a feature in a structured piece of data like a document increases the likelihood that that same feature will be observed again}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1175, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(9902), 2.5f, 2, "{{c1::variable ranking}} = {{c2::variable filtering}} = {{c3::variable screening}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1173, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(9848), 2.5f, 2, "{{c1::variable ranking}} = {{c2::variable filtering}} = {{c3::variable screening}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1172, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(9344), 2.5f, 2, "We typically would like to discard features that are not discriminative in an NBC as they can {{c1::induce overfitting}} and lead to {{c1::lower performance}}. To do this we can perform {{c2::variable ranking}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1171, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(9320), 2.5f, 2, "We typically would like to discard features that are not discriminative in an NBC as they can {{c1::induce overfitting}} and lead to {{c1::lower performance}}. To do this we can perform {{c2::variable ranking}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1170, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(9293), 2.5f, 2, "We typically would like to discard features that are not discriminative in an NBC as they can {{c1::induce overfitting}} and lead to {{c1::lower performance}}. To do this we can perform {{c2::variable ranking}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1169, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(8805), 2.5f, 2, "The {{c1::log-sum-exp trick}} can be used to evaluate {{c2::$\\log \\sum_{c} e^{b_{c} }=\\log \\left[\\left(\\sum_{c} e^{b_{c}-B}\\right) e^{B}\\right]=\\left[\\log \\left(\\sum_{c} e^{b_{c}-B}\\right)\\right]+B$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1168, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(8659), 2.5f, 2, "The {{c1::log-sum-exp trick}} can be used to evaluate {{c2::$\\log \\sum_{c} e^{b_{c} }=\\log \\left[\\left(\\sum_{c} e^{b_{c}-B}\\right) e^{B}\\right]=\\left[\\log \\left(\\sum_{c} e^{b_{c}-B}\\right)\\right]+B$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1167, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(8140), 2.5f, 2, "To deal with numerical underflow in a high dimensional generative model, we {{c1::evaluate the log probability}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1166, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(7599), 2.5f, 2, "In very high dimensions, generative classifiers can suffer in practice from {{c1::numerical underflow}} because they multiply many small probabilities.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1165, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(7043), 2.5f, 2, "In practice with an NBC you should use the {{c1::posterior mean}} when performing the {{c2::plug-in approximation}} in order to minimize overfitting.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1164, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(7011), 2.5f, 2, "In practice with an NBC you should use the {{c1::posterior mean}} when performing the {{c2::plug-in approximation}} in order to minimize overfitting.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1163, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(6531), 2.5f, 2, "A Bayesian approach to avoid overfitting in an NBC is to {{c1::put a reasonable prior over the parameters}} which is equivalent to {{c1::Laplace smoothing}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1162, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(6503), 2.5f, 2, "A Bayesian approach to avoid overfitting in an NBC is to {{c1::put a reasonable prior over the parameters}} which is equivalent to {{c1::Laplace smoothing}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1174, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(9876), 2.5f, 2, "{{c1::variable ranking}} = {{c2::variable filtering}} = {{c3::variable screening}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1189, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 877, DateTimeKind.Utc).AddTicks(3562), 2.5f, 2, "The {{c1::Dirichlet compound multinomial or DCM}} distribution has the density {{c2::$p\\left(\\mathbf{x}_{i} \\mid y_{i}=c, \\boldsymbol{\\alpha}\\right)=\\int \\operatorname{Mu}\\left(\\mathbf{x}_{i} \\mid N_{i}, \\boldsymbol{\\theta}_{c}\\right) \\operatorname{Dir}\\left(\\boldsymbol{\\theta}_{c} \\mid \\boldsymbol{\\alpha}_{c}\\right) d \\boldsymbol{\\theta}_{c}=\\frac{N_{i} !}{\\prod_{j=1}^{D} x_{i j} !} \\frac{B\\left(\\mathbf{x}_{i}+\\boldsymbol{\\alpha}_{c}\\right)}{B\\left(\\boldsymbol{\\alpha}_{c}\\right)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1190, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 877, DateTimeKind.Utc).AddTicks(3966), 2.5f, 2, "The {{c1::Dirichlet compound multinomial or DCM}} distribution has the density {{c2::$p\\left(\\mathbf{x}_{i} \\mid y_{i}=c, \\boldsymbol{\\alpha}\\right)=\\int \\operatorname{Mu}\\left(\\mathbf{x}_{i} \\mid N_{i}, \\boldsymbol{\\theta}_{c}\\right) \\operatorname{Dir}\\left(\\boldsymbol{\\theta}_{c} \\mid \\boldsymbol{\\alpha}_{c}\\right) d \\boldsymbol{\\theta}_{c}=\\frac{N_{i} !}{\\prod_{j=1}^{D} x_{i j} !} \\frac{B\\left(\\mathbf{x}_{i}+\\boldsymbol{\\alpha}_{c}\\right)}{B\\left(\\boldsymbol{\\alpha}_{c}\\right)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1191, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 877, DateTimeKind.Utc).AddTicks(4445), 2.5f, 2, "The {{c1::DCM}} model can be thought of as modeling {{c2::the result of drawing balls from a Polya urn}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1218, 5, 1, new DateTime(2020, 10, 10, 23, 1, 42, 878, DateTimeKind.Utc).AddTicks(3653), 2.5f, 2, "Some strategies to prevent overfitting in GDA and relatives include 1. Use a {{c1::diagonal covariance for each class}} 2. Use the same {{c2::covariance matrix for all classes}} 3. Use both {{c3::diagonal and shared covariances}} 4. Put {{c4::a prior on the covariance and integrate it out at inference time}} 5. As a preprocessing step: {{c5::project the data into a low dimensional subspace}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1217, 4, 1, new DateTime(2020, 10, 10, 23, 1, 42, 878, DateTimeKind.Utc).AddTicks(3596), 2.5f, 2, "Some strategies to prevent overfitting in GDA and relatives include 1. Use a {{c1::diagonal covariance for each class}} 2. Use the same {{c2::covariance matrix for all classes}} 3. Use both {{c3::diagonal and shared covariances}} 4. Put {{c4::a prior on the covariance and integrate it out at inference time}} 5. As a preprocessing step: {{c5::project the data into a low dimensional subspace}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1216, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 878, DateTimeKind.Utc).AddTicks(3527), 2.5f, 2, "Some strategies to prevent overfitting in GDA and relatives include 1. Use a {{c1::diagonal covariance for each class}} 2. Use the same {{c2::covariance matrix for all classes}} 3. Use both {{c3::diagonal and shared covariances}} 4. Put {{c4::a prior on the covariance and integrate it out at inference time}} 5. As a preprocessing step: {{c5::project the data into a low dimensional subspace}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1215, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 878, DateTimeKind.Utc).AddTicks(3488), 2.5f, 2, "Some strategies to prevent overfitting in GDA and relatives include 1. Use a {{c1::diagonal covariance for each class}} 2. Use the same {{c2::covariance matrix for all classes}} 3. Use both {{c3::diagonal and shared covariances}} 4. Put {{c4::a prior on the covariance and integrate it out at inference time}} 5. As a preprocessing step: {{c5::project the data into a low dimensional subspace}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1214, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 878, DateTimeKind.Utc).AddTicks(3444), 2.5f, 2, "Some strategies to prevent overfitting in GDA and relatives include 1. Use a {{c1::diagonal covariance for each class}} 2. Use the same {{c2::covariance matrix for all classes}} 3. Use both {{c3::diagonal and shared covariances}} 4. Put {{c4::a prior on the covariance and integrate it out at inference time}} 5. As a preprocessing step: {{c5::project the data into a low dimensional subspace}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1213, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 878, DateTimeKind.Utc).AddTicks(2833), 2.5f, 2, "An alternative to LDA is to directly fit {{c1::$p(y \\mid \\mathbf{x}, \\mathbf{W})=\\operatorname{Cat}(y \\mid \\mathbf{W} \\mathbf{x})$}} which is called {{c1::multi-class logistic regression}} or {{c1::multinomial logistic regression}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1212, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 878, DateTimeKind.Utc).AddTicks(2795), 2.5f, 2, "An alternative to LDA is to directly fit {{c1::$p(y \\mid \\mathbf{x}, \\mathbf{W})=\\operatorname{Cat}(y \\mid \\mathbf{W} \\mathbf{x})$}} which is called {{c1::multi-class logistic regression}} or {{c1::multinomial logistic regression}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1211, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 878, DateTimeKind.Utc).AddTicks(2753), 2.5f, 2, "An alternative to LDA is to directly fit {{c1::$p(y \\mid \\mathbf{x}, \\mathbf{W})=\\operatorname{Cat}(y \\mid \\mathbf{W} \\mathbf{x})$}} which is called {{c1::multi-class logistic regression}} or {{c1::multinomial logistic regression}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1210, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 878, DateTimeKind.Utc).AddTicks(2115), 2.5f, 2, "If we share the covariance matrices between clusters in GDA then {{c1::the decision boundaries become linear}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1209, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 878, DateTimeKind.Utc).AddTicks(1531), 2.5f, 2, "{{c1::Gaussian discriminant analysis}} refers to using a statistical model {{c2::$p(\\mathbf{x} \\mid y=c, \\boldsymbol{\\theta})=\\mathcal{N}\\left(\\mathbf{x} \\mid \\boldsymbol{\\mu}_{c}, \\boldsymbol{\\Sigma}_{c}\\right)$}} and making predictions with {{c2::$\\hat{y}(\\mathbf{x})=\\underset{c}{\\operatorname{argmax} }\\left[\\log p(y=c \\mid \\boldsymbol{\\pi})+\\log p\\left(\\mathbf{x} \\mid \\boldsymbol{\\theta}_{c}\\right)\\right]$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1208, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 878, DateTimeKind.Utc).AddTicks(1364), 2.5f, 2, "{{c1::Gaussian discriminant analysis}} refers to using a statistical model {{c2::$p(\\mathbf{x} \\mid y=c, \\boldsymbol{\\theta})=\\mathcal{N}\\left(\\mathbf{x} \\mid \\boldsymbol{\\mu}_{c}, \\boldsymbol{\\Sigma}_{c}\\right)$}} and making predictions with {{c2::$\\hat{y}(\\mathbf{x})=\\underset{c}{\\operatorname{argmax} }\\left[\\log p(y=c \\mid \\boldsymbol{\\pi})+\\log p\\left(\\mathbf{x} \\mid \\boldsymbol{\\theta}_{c}\\right)\\right]$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1207, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 878, DateTimeKind.Utc).AddTicks(1225), 2.5f, 2, "{{c1::Gaussian discriminant analysis}} refers to using a statistical model {{c2::$p(\\mathbf{x} \\mid y=c, \\boldsymbol{\\theta})=\\mathcal{N}\\left(\\mathbf{x} \\mid \\boldsymbol{\\mu}_{c}, \\boldsymbol{\\Sigma}_{c}\\right)$}} and making predictions with {{c2::$\\hat{y}(\\mathbf{x})=\\underset{c}{\\operatorname{argmax} }\\left[\\log p(y=c \\mid \\boldsymbol{\\pi})+\\log p\\left(\\mathbf{x} \\mid \\boldsymbol{\\theta}_{c}\\right)\\right]$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1206, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 878, DateTimeKind.Utc).AddTicks(644), 2.5f, 2, "The {{c1::trace trick}} refers to the mathematical identity {{c2::$\\mathbf{x}^{T} \\mathbf{A} \\mathbf{x}=\\operatorname{tr}\\left(\\mathbf{x}^{T} \\mathbf{A} \\mathbf{x}\\right)=\\operatorname{tr}\\left(\\mathbf{x} \\mathbf{x}^{T} \\mathbf{A}\\right)=\\operatorname{tr}\\left(\\mathbf{A} \\mathbf{x} \\mathbf{x}^{T}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1205, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 878, DateTimeKind.Utc).AddTicks(400), 2.5f, 2, "The {{c1::trace trick}} refers to the mathematical identity {{c2::$\\mathbf{x}^{T} \\mathbf{A} \\mathbf{x}=\\operatorname{tr}\\left(\\mathbf{x}^{T} \\mathbf{A} \\mathbf{x}\\right)=\\operatorname{tr}\\left(\\mathbf{x} \\mathbf{x}^{T} \\mathbf{A}\\right)=\\operatorname{tr}\\left(\\mathbf{A} \\mathbf{x} \\mathbf{x}^{T}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1204, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 877, DateTimeKind.Utc).AddTicks(9885), 2.5f, 2, "$\\frac{\\partial}{\\partial \\mathbf{A} } \\log |\\mathbf{A}|$ = {{c1::$\\mathbf{A}^{-T} \\triangleq\\left(\\mathbf{A}^{-1}\\right)^{T}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1203, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 877, DateTimeKind.Utc).AddTicks(9321), 2.5f, 2, "$\\frac{\\partial}{\\partial \\mathbf{A} } \\operatorname{tr}(\\mathbf{B} \\mathbf{A})$ = {{c1::$\\mathbf{B}^{T}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1202, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 877, DateTimeKind.Utc).AddTicks(8763), 2.5f, 2, "$\\frac{\\partial\\left(\\mathbf{a}^{T} \\mathbf{A} \\mathbf{a}\\right)}{\\partial \\mathbf{a} }$ = {{c1::$\\left(\\mathbf{A}+\\mathbf{A}^{T}\\right) \\mathbf{a}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1201, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 877, DateTimeKind.Utc).AddTicks(8177), 2.5f, 2, "$\\frac{\\partial\\left(\\mathbf{b}^{T} \\mathbf{a}\\right)}{\\partial \\mathbf{a}}$ = {{c1::$\\mathbf{b}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1200, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 877, DateTimeKind.Utc).AddTicks(7680), 2.5f, 2, "Intuitively, the Mahalanobis distance measures distances {{c1::after a linear transform}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1199, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 877, DateTimeKind.Utc).AddTicks(7176), 2.5f, 2, "To understand the meaning of the Mahalanobis distance we can observe that matrix $\\boldsymbol{\\Sigma}^{-1}$ can be written {{c1::$\\boldsymbol{\\Sigma}^{-1}=\\mathbf{U}^{-T} \\boldsymbol{\\Lambda}^{-1} \\mathbf{U}^{-1}=\\mathbf{U} \\boldsymbol{\\Lambda}^{-1} \\mathbf{U}^{T}=\\sum_{i=1}^{D} \\frac{1}{\\lambda_{i}} \\mathbf{u}_{i} \\mathbf{u}_{i}^{T}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1198, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 877, DateTimeKind.Utc).AddTicks(6349), 2.5f, 2, "The {{c1::Mahalanobis distance}} is given by {{c2::$(\\mathbf{x}-\\boldsymbol{\\mu})^{T} \\boldsymbol{\\Sigma}^{-1}(\\mathbf{x}-\\boldsymbol{\\mu})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1197, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 877, DateTimeKind.Utc).AddTicks(6251), 2.5f, 2, "The {{c1::Mahalanobis distance}} is given by {{c2::$(\\mathbf{x}-\\boldsymbol{\\mu})^{T} \\boldsymbol{\\Sigma}^{-1}(\\mathbf{x}-\\boldsymbol{\\mu})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1196, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 877, DateTimeKind.Utc).AddTicks(5656), 2.5f, 2, "The quantity inside the {{c1::exponential in the MVN density}} is related to the {{c2::Mahalanobis distance}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1195, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 877, DateTimeKind.Utc).AddTicks(5625), 2.5f, 2, "The quantity inside the {{c1::exponential in the MVN density}} is related to the {{c2::Mahalanobis distance}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1194, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 877, DateTimeKind.Utc).AddTicks(5115), 2.5f, 2, "The {{c1::Polya urn}} process refers to {{c2::drawing balls with replacement from an urn with the caveat that upon return of each ball, a copy is added}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1193, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 877, DateTimeKind.Utc).AddTicks(5001), 2.5f, 2, "The {{c1::Polya urn}} process refers to {{c2::drawing balls with replacement from an urn with the caveat that upon return of each ball, a copy is added}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1192, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 877, DateTimeKind.Utc).AddTicks(4499), 2.5f, 2, "The {{c1::DCM}} model can be thought of as modeling {{c2::the result of drawing balls from a Polya urn}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1161, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(5960), 2.5f, 2, "The log-likelihood for an NBC has the form {{c1::$\\log p(\\mathcal{D} \\mid \\boldsymbol{\\theta})=\\sum_{c=1}^{C} N_{c} \\log \\pi_{c}+\\sum_{j=1}^{D} \\sum_{c=1}^{C} \\sum_{i: y_{i}=c} \\log p\\left(x_{i j} \\mid \\boldsymbol{\\theta}_{j c}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1099, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(2787), 2.5f, 2, "A {{c1::fuzzy set}} is a set together with a {{c2::membership function which maps onto the [0,1] interval}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1160, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(5131), 2.5f, 2, "In the (common case) where we use Bernoulli features in an NBC we might call the model a {{c1::multivariate Bernoulli naive Bayes model}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1158, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(4451), 2.5f, 2, "A {{c1::naive Bayes classifier}} is a generative model which assumes {{c2::conditional independence of all features given the class label}}. Mathematically, this says {{c2::$p(\\mathbf{x} \\mid y=c, \\boldsymbol{\\theta})=\\prod_{j=1}^{D} p\\left(x_{j} \\mid y=c, \\boldsymbol{\\theta}_{j c}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1126, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(53), 2.5f, 2, "In the beta-binomial model, {{c1::add-one smoothing}} is equivalent to {{c2::using a uniform prior $\\operatorname{Beta}(1,1)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1125, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(9995), 2.5f, 2, "In the beta-binomial model, {{c1::add-one smoothing}} is equivalent to {{c2::using a uniform prior $\\operatorname{Beta}(1,1)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1124, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(9469), 2.5f, 2, "An empirical approach to the zero count problem is to perform {{c1::Laplace smoothing or add-one smoothing}}. In a Bayesian context we would instead {{c1::put a prior on our parameters}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1123, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(9386), 2.5f, 2, "An empirical approach to the zero count problem is to perform {{c1::Laplace smoothing or add-one smoothing}}. In a Bayesian context we would instead {{c1::put a prior on our parameters}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1122, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(8851), 2.5f, 2, "The {{c1::zero count problem}} or the {{c1::sparse data problem}} refers to how the {{c2::MLE performs poorly when we have little or missing data}}. Intuitively this is because the {{c2::MLE views unobserved events as actually impossible}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1121, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(8794), 2.5f, 2, "The {{c1::zero count problem}} or the {{c1::sparse data problem}} refers to how the {{c2::MLE performs poorly when we have little or missing data}}. Intuitively this is because the {{c2::MLE views unobserved events as actually impossible}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1120, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(8732), 2.5f, 2, "The {{c1::zero count problem}} or the {{c1::sparse data problem}} refers to how the {{c2::MLE performs poorly when we have little or missing data}}. Intuitively this is because the {{c2::MLE views unobserved events as actually impossible}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1119, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(8702), 2.5f, 2, "The {{c1::zero count problem}} or the {{c1::sparse data problem}} refers to how the {{c2::MLE performs poorly when we have little or missing data}}. Intuitively this is because the {{c2::MLE views unobserved events as actually impossible}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1118, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(8196), 2.5f, 2, "Bayesian inference is well suited to {{c1::online learning}} because {{c2::$p\\left(\\theta \\mid \\mathcal{D}_{a}, \\mathcal{D}_{b}\\right) \\propto p\\left(\\mathcal{D}_{b} \\mid \\theta\\right) p\\left(\\theta \\mid \\mathcal{D}_{a}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1117, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(8038), 2.5f, 2, "Bayesian inference is well suited to {{c1::online learning}} because {{c2::$p\\left(\\theta \\mid \\mathcal{D}_{a}, \\mathcal{D}_{b}\\right) \\propto p\\left(\\mathcal{D}_{b} \\mid \\theta\\right) p\\left(\\theta \\mid \\mathcal{D}_{a}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1116, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(7481), 2.5f, 2, "In the beta-binomial model we can update the posterior parameters by {{c1::adding the prior hyperparameters (the pseudocounts) to the observed counts}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1115, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(6873), 2.5f, 2, "When {{c2::the prior and posterior have the same form}}, we say that the prior is {{c1::a conjugate prior to the likelihood}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1127, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(698), 2.5f, 2, "To make predictions of future data in the beta-binomial model we {{c1::integrate out the model parameters}} which looks mathematically like {{c2::$p(x \\mid \\mathcal{D}, M)=\\int_{0}^{1} \\operatorname{Bin}(x \\mid \\theta, M) \\operatorname{Beta}(\\theta \\mid a, b) d \\theta$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1114, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(6828), 2.5f, 2, "When {{c2::the prior and posterior have the same form}}, we say that the prior is {{c1::a conjugate prior to the likelihood}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1112, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(6247), 2.5f, 2, "If there is enough data, the {{c2::MLE converges to the MAP estimate}} and we say that {{c1::the data overwhelms the prior}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1111, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(5713), 2.5f, 2, "In Tenenbaum's number game, we attempt to avoid {{c1::suspicious coincidences}} by suggesting that {{c2::the probability of a hypotheis generating the data is inversely proportional (for each sample) to the size of the concept hypothesis}}. This is called {{c3::the size principle}} and implements {{c3::Occam's razor}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1110, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(5692), 2.5f, 2, "In Tenenbaum's number game, we attempt to avoid {{c1::suspicious coincidences}} by suggesting that {{c2::the probability of a hypotheis generating the data is inversely proportional (for each sample) to the size of the concept hypothesis}}. This is called {{c3::the size principle}} and implements {{c3::Occam's razor}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1109, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(5666), 2.5f, 2, "In Tenenbaum's number game, we attempt to avoid {{c1::suspicious coincidences}} by suggesting that {{c2::the probability of a hypotheis generating the data is inversely proportional (for each sample) to the size of the concept hypothesis}}. This is called {{c3::the size principle}} and implements {{c3::Occam's razor}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1108, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(5528), 2.5f, 2, "In Tenenbaum's number game, we attempt to avoid {{c1::suspicious coincidences}} by suggesting that {{c2::the probability of a hypotheis generating the data is inversely proportional (for each sample) to the size of the concept hypothesis}}. This is called {{c3::the size principle}} and implements {{c3::Occam's razor}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1107, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(4965), 2.5f, 2, "In learning theory, the {{c2::set of hypotheses consistent with the data}} is called {{c1::the version space}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1106, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(4937), 2.5f, 2, "In learning theory, the {{c2::set of hypotheses consistent with the data}} is called {{c1::the version space}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1105, 4, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(4337), 2.5f, 2, "In Tenenbaum's number game: 1. {{c1::There is a concept $C$ which generates integer data}} 2. The player receives a {{c2::randomly chosen set of positive examples $\\mathcal{D}=\\left\\{x_{1}, \\ldots, x_{N}\\right\\}$}} 3. The player is asked {{c3::whether number is part of of the concept}} By playing the game with many people and many trial numbers we can {{c4::map out the posterior distribution of membership}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1104, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(4282), 2.5f, 2, "In Tenenbaum's number game: 1. {{c1::There is a concept $C$ which generates integer data}} 2. The player receives a {{c2::randomly chosen set of positive examples $\\mathcal{D}=\\left\\{x_{1}, \\ldots, x_{N}\\right\\}$}} 3. The player is asked {{c3::whether number is part of of the concept}} By playing the game with many people and many trial numbers we can {{c4::map out the posterior distribution of membership}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1103, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(4235), 2.5f, 2, "In Tenenbaum's number game: 1. {{c1::There is a concept $C$ which generates integer data}} 2. The player receives a {{c2::randomly chosen set of positive examples $\\mathcal{D}=\\left\\{x_{1}, \\ldots, x_{N}\\right\\}$}} 3. The player is asked {{c3::whether number is part of of the concept}} By playing the game with many people and many trial numbers we can {{c4::map out the posterior distribution of membership}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1102, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(4136), 2.5f, 2, "In Tenenbaum's number game: 1. {{c1::There is a concept $C$ which generates integer data}} 2. The player receives a {{c2::randomly chosen set of positive examples $\\mathcal{D}=\\left\\{x_{1}, \\ldots, x_{N}\\right\\}$}} 3. The player is asked {{c3::whether number is part of of the concept}} By playing the game with many people and many trial numbers we can {{c4::map out the posterior distribution of membership}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1101, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(3495), 2.5f, 2, "The {{c1::number game by Josh Tenenbaum}} is a playground to think about how {{c2::humans perform inductive reasoning}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1113, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 875, DateTimeKind.Utc).AddTicks(6287), 2.5f, 2, "If there is enough data, the {{c2::MLE converges to the MAP estimate}} and we say that {{c1::the data overwhelms the prior}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1128, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(828), 2.5f, 2, "To make predictions of future data in the beta-binomial model we {{c1::integrate out the model parameters}} which looks mathematically like {{c2::$p(x \\mid \\mathcal{D}, M)=\\int_{0}^{1} \\operatorname{Bin}(x \\mid \\theta, M) \\operatorname{Beta}(\\theta \\mid a, b) d \\theta$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1129, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(1363), 2.5f, 2, "The {{c1::posterior predictive}} distribution gives {{c2::the probability of observing a certain piece of new data having observed some other dataset}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1130, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(1462), 2.5f, 2, "The {{c1::posterior predictive}} distribution gives {{c2::the probability of observing a certain piece of new data having observed some other dataset}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1157, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(4378), 2.5f, 2, "A {{c1::naive Bayes classifier}} is a generative model which assumes {{c2::conditional independence of all features given the class label}}. Mathematically, this says {{c2::$p(\\mathbf{x} \\mid y=c, \\boldsymbol{\\theta})=\\prod_{j=1}^{D} p\\left(x_{j} \\mid y=c, \\boldsymbol{\\theta}_{j c}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1156, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(3804), 2.5f, 2, "{{c1::Naive Bayes classifier}} = {{c2::NBC}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1155, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(3790), 2.5f, 2, "{{c1::Naive Bayes classifier}} = {{c2::NBC}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1154, 22, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(3096), 2.5f, 2, "Conjugacy: Prior - Likelihood {{c1::Beta}}-{{c2::Bernoulli}} {{c3::Beta}}-{{c4::Binomial}} {{c5::Beta}}-{{c6::Negative Binomial}} {{c7::Gamma}}-{{c8::Poisson}} {{c9::Dirichlet}}-{{c10::Multinomial}} {{c11::IG}}-{{c12::Normal}} {{c13::Normal}}-{{c14::Normal}} {{c15::Scaled inverse $\\chi^2$}}-{{c16::Normal}} {{c17::Gamma}}-{{c18::Normal}} {{c19::Gamma}}-{{c20::Gamma}} {{c21::Gamma}}-{{c22::Exponential}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1153, 21, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(3077), 2.5f, 2, "Conjugacy: Prior - Likelihood {{c1::Beta}}-{{c2::Bernoulli}} {{c3::Beta}}-{{c4::Binomial}} {{c5::Beta}}-{{c6::Negative Binomial}} {{c7::Gamma}}-{{c8::Poisson}} {{c9::Dirichlet}}-{{c10::Multinomial}} {{c11::IG}}-{{c12::Normal}} {{c13::Normal}}-{{c14::Normal}} {{c15::Scaled inverse $\\chi^2$}}-{{c16::Normal}} {{c17::Gamma}}-{{c18::Normal}} {{c19::Gamma}}-{{c20::Gamma}} {{c21::Gamma}}-{{c22::Exponential}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1152, 20, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(3065), 2.5f, 2, "Conjugacy: Prior - Likelihood {{c1::Beta}}-{{c2::Bernoulli}} {{c3::Beta}}-{{c4::Binomial}} {{c5::Beta}}-{{c6::Negative Binomial}} {{c7::Gamma}}-{{c8::Poisson}} {{c9::Dirichlet}}-{{c10::Multinomial}} {{c11::IG}}-{{c12::Normal}} {{c13::Normal}}-{{c14::Normal}} {{c15::Scaled inverse $\\chi^2$}}-{{c16::Normal}} {{c17::Gamma}}-{{c18::Normal}} {{c19::Gamma}}-{{c20::Gamma}} {{c21::Gamma}}-{{c22::Exponential}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1151, 19, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(3052), 2.5f, 2, "Conjugacy: Prior - Likelihood {{c1::Beta}}-{{c2::Bernoulli}} {{c3::Beta}}-{{c4::Binomial}} {{c5::Beta}}-{{c6::Negative Binomial}} {{c7::Gamma}}-{{c8::Poisson}} {{c9::Dirichlet}}-{{c10::Multinomial}} {{c11::IG}}-{{c12::Normal}} {{c13::Normal}}-{{c14::Normal}} {{c15::Scaled inverse $\\chi^2$}}-{{c16::Normal}} {{c17::Gamma}}-{{c18::Normal}} {{c19::Gamma}}-{{c20::Gamma}} {{c21::Gamma}}-{{c22::Exponential}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1150, 18, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(3040), 2.5f, 2, "Conjugacy: Prior - Likelihood {{c1::Beta}}-{{c2::Bernoulli}} {{c3::Beta}}-{{c4::Binomial}} {{c5::Beta}}-{{c6::Negative Binomial}} {{c7::Gamma}}-{{c8::Poisson}} {{c9::Dirichlet}}-{{c10::Multinomial}} {{c11::IG}}-{{c12::Normal}} {{c13::Normal}}-{{c14::Normal}} {{c15::Scaled inverse $\\chi^2$}}-{{c16::Normal}} {{c17::Gamma}}-{{c18::Normal}} {{c19::Gamma}}-{{c20::Gamma}} {{c21::Gamma}}-{{c22::Exponential}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1149, 17, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(3026), 2.5f, 2, "Conjugacy: Prior - Likelihood {{c1::Beta}}-{{c2::Bernoulli}} {{c3::Beta}}-{{c4::Binomial}} {{c5::Beta}}-{{c6::Negative Binomial}} {{c7::Gamma}}-{{c8::Poisson}} {{c9::Dirichlet}}-{{c10::Multinomial}} {{c11::IG}}-{{c12::Normal}} {{c13::Normal}}-{{c14::Normal}} {{c15::Scaled inverse $\\chi^2$}}-{{c16::Normal}} {{c17::Gamma}}-{{c18::Normal}} {{c19::Gamma}}-{{c20::Gamma}} {{c21::Gamma}}-{{c22::Exponential}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1148, 16, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(3011), 2.5f, 2, "Conjugacy: Prior - Likelihood {{c1::Beta}}-{{c2::Bernoulli}} {{c3::Beta}}-{{c4::Binomial}} {{c5::Beta}}-{{c6::Negative Binomial}} {{c7::Gamma}}-{{c8::Poisson}} {{c9::Dirichlet}}-{{c10::Multinomial}} {{c11::IG}}-{{c12::Normal}} {{c13::Normal}}-{{c14::Normal}} {{c15::Scaled inverse $\\chi^2$}}-{{c16::Normal}} {{c17::Gamma}}-{{c18::Normal}} {{c19::Gamma}}-{{c20::Gamma}} {{c21::Gamma}}-{{c22::Exponential}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1147, 15, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(2962), 2.5f, 2, "Conjugacy: Prior - Likelihood {{c1::Beta}}-{{c2::Bernoulli}} {{c3::Beta}}-{{c4::Binomial}} {{c5::Beta}}-{{c6::Negative Binomial}} {{c7::Gamma}}-{{c8::Poisson}} {{c9::Dirichlet}}-{{c10::Multinomial}} {{c11::IG}}-{{c12::Normal}} {{c13::Normal}}-{{c14::Normal}} {{c15::Scaled inverse $\\chi^2$}}-{{c16::Normal}} {{c17::Gamma}}-{{c18::Normal}} {{c19::Gamma}}-{{c20::Gamma}} {{c21::Gamma}}-{{c22::Exponential}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1146, 14, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(2931), 2.5f, 2, "Conjugacy: Prior - Likelihood {{c1::Beta}}-{{c2::Bernoulli}} {{c3::Beta}}-{{c4::Binomial}} {{c5::Beta}}-{{c6::Negative Binomial}} {{c7::Gamma}}-{{c8::Poisson}} {{c9::Dirichlet}}-{{c10::Multinomial}} {{c11::IG}}-{{c12::Normal}} {{c13::Normal}}-{{c14::Normal}} {{c15::Scaled inverse $\\chi^2$}}-{{c16::Normal}} {{c17::Gamma}}-{{c18::Normal}} {{c19::Gamma}}-{{c20::Gamma}} {{c21::Gamma}}-{{c22::Exponential}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1145, 13, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(2918), 2.5f, 2, "Conjugacy: Prior - Likelihood {{c1::Beta}}-{{c2::Bernoulli}} {{c3::Beta}}-{{c4::Binomial}} {{c5::Beta}}-{{c6::Negative Binomial}} {{c7::Gamma}}-{{c8::Poisson}} {{c9::Dirichlet}}-{{c10::Multinomial}} {{c11::IG}}-{{c12::Normal}} {{c13::Normal}}-{{c14::Normal}} {{c15::Scaled inverse $\\chi^2$}}-{{c16::Normal}} {{c17::Gamma}}-{{c18::Normal}} {{c19::Gamma}}-{{c20::Gamma}} {{c21::Gamma}}-{{c22::Exponential}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1144, 12, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(2904), 2.5f, 2, "Conjugacy: Prior - Likelihood {{c1::Beta}}-{{c2::Bernoulli}} {{c3::Beta}}-{{c4::Binomial}} {{c5::Beta}}-{{c6::Negative Binomial}} {{c7::Gamma}}-{{c8::Poisson}} {{c9::Dirichlet}}-{{c10::Multinomial}} {{c11::IG}}-{{c12::Normal}} {{c13::Normal}}-{{c14::Normal}} {{c15::Scaled inverse $\\chi^2$}}-{{c16::Normal}} {{c17::Gamma}}-{{c18::Normal}} {{c19::Gamma}}-{{c20::Gamma}} {{c21::Gamma}}-{{c22::Exponential}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1143, 11, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(2890), 2.5f, 2, "Conjugacy: Prior - Likelihood {{c1::Beta}}-{{c2::Bernoulli}} {{c3::Beta}}-{{c4::Binomial}} {{c5::Beta}}-{{c6::Negative Binomial}} {{c7::Gamma}}-{{c8::Poisson}} {{c9::Dirichlet}}-{{c10::Multinomial}} {{c11::IG}}-{{c12::Normal}} {{c13::Normal}}-{{c14::Normal}} {{c15::Scaled inverse $\\chi^2$}}-{{c16::Normal}} {{c17::Gamma}}-{{c18::Normal}} {{c19::Gamma}}-{{c20::Gamma}} {{c21::Gamma}}-{{c22::Exponential}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1142, 10, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(2880), 2.5f, 2, "Conjugacy: Prior - Likelihood {{c1::Beta}}-{{c2::Bernoulli}} {{c3::Beta}}-{{c4::Binomial}} {{c5::Beta}}-{{c6::Negative Binomial}} {{c7::Gamma}}-{{c8::Poisson}} {{c9::Dirichlet}}-{{c10::Multinomial}} {{c11::IG}}-{{c12::Normal}} {{c13::Normal}}-{{c14::Normal}} {{c15::Scaled inverse $\\chi^2$}}-{{c16::Normal}} {{c17::Gamma}}-{{c18::Normal}} {{c19::Gamma}}-{{c20::Gamma}} {{c21::Gamma}}-{{c22::Exponential}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1141, 9, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(2860), 2.5f, 2, "Conjugacy: Prior - Likelihood {{c1::Beta}}-{{c2::Bernoulli}} {{c3::Beta}}-{{c4::Binomial}} {{c5::Beta}}-{{c6::Negative Binomial}} {{c7::Gamma}}-{{c8::Poisson}} {{c9::Dirichlet}}-{{c10::Multinomial}} {{c11::IG}}-{{c12::Normal}} {{c13::Normal}}-{{c14::Normal}} {{c15::Scaled inverse $\\chi^2$}}-{{c16::Normal}} {{c17::Gamma}}-{{c18::Normal}} {{c19::Gamma}}-{{c20::Gamma}} {{c21::Gamma}}-{{c22::Exponential}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1140, 8, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(2843), 2.5f, 2, "Conjugacy: Prior - Likelihood {{c1::Beta}}-{{c2::Bernoulli}} {{c3::Beta}}-{{c4::Binomial}} {{c5::Beta}}-{{c6::Negative Binomial}} {{c7::Gamma}}-{{c8::Poisson}} {{c9::Dirichlet}}-{{c10::Multinomial}} {{c11::IG}}-{{c12::Normal}} {{c13::Normal}}-{{c14::Normal}} {{c15::Scaled inverse $\\chi^2$}}-{{c16::Normal}} {{c17::Gamma}}-{{c18::Normal}} {{c19::Gamma}}-{{c20::Gamma}} {{c21::Gamma}}-{{c22::Exponential}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1139, 7, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(2829), 2.5f, 2, "Conjugacy: Prior - Likelihood {{c1::Beta}}-{{c2::Bernoulli}} {{c3::Beta}}-{{c4::Binomial}} {{c5::Beta}}-{{c6::Negative Binomial}} {{c7::Gamma}}-{{c8::Poisson}} {{c9::Dirichlet}}-{{c10::Multinomial}} {{c11::IG}}-{{c12::Normal}} {{c13::Normal}}-{{c14::Normal}} {{c15::Scaled inverse $\\chi^2$}}-{{c16::Normal}} {{c17::Gamma}}-{{c18::Normal}} {{c19::Gamma}}-{{c20::Gamma}} {{c21::Gamma}}-{{c22::Exponential}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1138, 6, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(2816), 2.5f, 2, "Conjugacy: Prior - Likelihood {{c1::Beta}}-{{c2::Bernoulli}} {{c3::Beta}}-{{c4::Binomial}} {{c5::Beta}}-{{c6::Negative Binomial}} {{c7::Gamma}}-{{c8::Poisson}} {{c9::Dirichlet}}-{{c10::Multinomial}} {{c11::IG}}-{{c12::Normal}} {{c13::Normal}}-{{c14::Normal}} {{c15::Scaled inverse $\\chi^2$}}-{{c16::Normal}} {{c17::Gamma}}-{{c18::Normal}} {{c19::Gamma}}-{{c20::Gamma}} {{c21::Gamma}}-{{c22::Exponential}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1137, 5, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(2791), 2.5f, 2, "Conjugacy: Prior - Likelihood {{c1::Beta}}-{{c2::Bernoulli}} {{c3::Beta}}-{{c4::Binomial}} {{c5::Beta}}-{{c6::Negative Binomial}} {{c7::Gamma}}-{{c8::Poisson}} {{c9::Dirichlet}}-{{c10::Multinomial}} {{c11::IG}}-{{c12::Normal}} {{c13::Normal}}-{{c14::Normal}} {{c15::Scaled inverse $\\chi^2$}}-{{c16::Normal}} {{c17::Gamma}}-{{c18::Normal}} {{c19::Gamma}}-{{c20::Gamma}} {{c21::Gamma}}-{{c22::Exponential}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1136, 4, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(2748), 2.5f, 2, "Conjugacy: Prior - Likelihood {{c1::Beta}}-{{c2::Bernoulli}} {{c3::Beta}}-{{c4::Binomial}} {{c5::Beta}}-{{c6::Negative Binomial}} {{c7::Gamma}}-{{c8::Poisson}} {{c9::Dirichlet}}-{{c10::Multinomial}} {{c11::IG}}-{{c12::Normal}} {{c13::Normal}}-{{c14::Normal}} {{c15::Scaled inverse $\\chi^2$}}-{{c16::Normal}} {{c17::Gamma}}-{{c18::Normal}} {{c19::Gamma}}-{{c20::Gamma}} {{c21::Gamma}}-{{c22::Exponential}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1135, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(2732), 2.5f, 2, "Conjugacy: Prior - Likelihood {{c1::Beta}}-{{c2::Bernoulli}} {{c3::Beta}}-{{c4::Binomial}} {{c5::Beta}}-{{c6::Negative Binomial}} {{c7::Gamma}}-{{c8::Poisson}} {{c9::Dirichlet}}-{{c10::Multinomial}} {{c11::IG}}-{{c12::Normal}} {{c13::Normal}}-{{c14::Normal}} {{c15::Scaled inverse $\\chi^2$}}-{{c16::Normal}} {{c17::Gamma}}-{{c18::Normal}} {{c19::Gamma}}-{{c20::Gamma}} {{c21::Gamma}}-{{c22::Exponential}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1134, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(2720), 2.5f, 2, "Conjugacy: Prior - Likelihood {{c1::Beta}}-{{c2::Bernoulli}} {{c3::Beta}}-{{c4::Binomial}} {{c5::Beta}}-{{c6::Negative Binomial}} {{c7::Gamma}}-{{c8::Poisson}} {{c9::Dirichlet}}-{{c10::Multinomial}} {{c11::IG}}-{{c12::Normal}} {{c13::Normal}}-{{c14::Normal}} {{c15::Scaled inverse $\\chi^2$}}-{{c16::Normal}} {{c17::Gamma}}-{{c18::Normal}} {{c19::Gamma}}-{{c20::Gamma}} {{c21::Gamma}}-{{c22::Exponential}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1133, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(2699), 2.5f, 2, "Conjugacy: Prior - Likelihood {{c1::Beta}}-{{c2::Bernoulli}} {{c3::Beta}}-{{c4::Binomial}} {{c5::Beta}}-{{c6::Negative Binomial}} {{c7::Gamma}}-{{c8::Poisson}} {{c9::Dirichlet}}-{{c10::Multinomial}} {{c11::IG}}-{{c12::Normal}} {{c13::Normal}}-{{c14::Normal}} {{c15::Scaled inverse $\\chi^2$}}-{{c16::Normal}} {{c17::Gamma}}-{{c18::Normal}} {{c19::Gamma}}-{{c20::Gamma}} {{c21::Gamma}}-{{c22::Exponential}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1132, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(2183), 2.5f, 2, "The {{c1::posterior predictive distribution}} has the mathematical form {{c2::$p(\\tilde{x} \\mid \\mathbf{X})=\\int_{\\Theta} p(\\tilde{x} \\mid \\theta, \\mathbf{X}) p(\\theta \\mid \\mathbf{X}) \\mathrm{d} \\theta$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1131, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(2050), 2.5f, 2, "The {{c1::posterior predictive distribution}} has the mathematical form {{c2::$p(\\tilde{x} \\mid \\mathbf{X})=\\int_{\\Theta} p(\\tilde{x} \\mid \\theta, \\mathbf{X}) p(\\theta \\mid \\mathbf{X}) \\mathrm{d} \\theta$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1159, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 876, DateTimeKind.Utc).AddTicks(4572), 2.5f, 2, "A {{c1::naive Bayes classifier}} is a generative model which assumes {{c2::conditional independence of all features given the class label}}. Mathematically, this says {{c2::$p(\\mathbf{x} \\mid y=c, \\boldsymbol{\\theta})=\\prod_{j=1}^{D} p\\left(x_{j} \\mid y=c, \\boldsymbol{\\theta}_{j c}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 978, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 871, DateTimeKind.Utc).AddTicks(5860), 2.5f, 2, "{{c1::Adversarial training}} refers to the process of {{c2::using adversarial examples in the training process in order to improve the generalization of the model}}. This is a kind of {{c2::regularization}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1464, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(4832), 2.5f, 2, "In addition to questions about the error on the gradient estimate, because there might be {{c1::redundancy in our data}} which {{c1::improves the relative performance of SGD versus BGD}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1466, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(5399), 2.5f, 2, "{{c2::batch gradient methods}} are also called {{c1::deterministic gradient methods}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1797, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(3438), 2.5f, 2, "The critical attributes and methods on os.ScanDir are 1. {{c1::name}} 2. {{c2::path}} 3. {{c3::is_file(*, follow_symlinks=True)/is_directory(*, follow...)}} 4. {{c4::is_symlink()}} 5. {{c5::stat()}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1796, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(2865), 2.5f, 2, "os.scandir returns an {{c1::iterator of os.DirEntry objects}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1795, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(2270), 2.5f, 2, "The reason that {{c1::os.scandir}} is typically faster than other iteration methods is that {{c2::it makes available the file type and attribute information that the OS provided when it gathered the items in the directory, thereby often avoiding further system calls.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1794, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(2061), 2.5f, 2, "The reason that {{c1::os.scandir}} is typically faster than other iteration methods is that {{c2::it makes available the file type and attribute information that the OS provided when it gathered the items in the directory, thereby often avoiding further system calls.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1793, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(1541), 2.5f, 2, "\"For high performance iteration through directories in Python use {{c1:: os.scandir(path=\"\".\"\") }}\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1792, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(1042), 2.5f, 2, "\"{{c1::To load a binary file in numpy you can use}} {{c2:: 1np.fromfile(file, dtype=float, count=-1, sep=\"\"\"\", offset=0) }}\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1791, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(969), 2.5f, 2, "\"{{c1::To load a binary file in numpy you can use}} {{c2:: 1np.fromfile(file, dtype=float, count=-1, sep=\"\"\"\", offset=0) }}\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1790, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(418), 2.5f, 2, "tmux: {{c1::switch to pane in direction}} {{c2::Ctrl+b [arrow keys]}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1789, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(389), 2.5f, 2, "tmux: {{c1::switch to pane in direction}} {{c2::Ctrl+b [arrow keys]}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1788, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(9888), 2.5f, 2, "tmux: {{c1::move the current pane left/right}} {{c2::Ctrl+b {/} }}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1787, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(9867), 2.5f, 2, "tmux: {{c1::move the current pane left/right}} {{c2::Ctrl+b {/} }}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1786, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(9339), 2.5f, 2, "\"tmux: {{c1::split pane horizontally}} {{c2::Ctrl+b \"\"}}\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1798, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(3454), 2.5f, 2, "The critical attributes and methods on os.ScanDir are 1. {{c1::name}} 2. {{c2::path}} 3. {{c3::is_file(*, follow_symlinks=True)/is_directory(*, follow...)}} 4. {{c4::is_symlink()}} 5. {{c5::stat()}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1785, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(9320), 2.5f, 2, "\"tmux: {{c1::split pane horizontally}} {{c2::Ctrl+b \"\"}}\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1783, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(8804), 2.5f, 2, "tmux: {{c1::split pane vertically}} {{c2::Ctrl+b %}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1782, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(8315), 2.5f, 2, "To {{c1::move to a window by number in tmux}}: {{c2::Ctrl+b [0-9]}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1781, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(8292), 2.5f, 2, "To {{c1::move to a window by number in tmux}}: {{c2::Ctrl+b [0-9]}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1780, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(7696), 2.5f, 2, "To {{c1::move to the previous/next window in tmux:}} {{c2::Ctrl+b p/n}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1779, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(7676), 2.5f, 2, "To {{c1::move to the previous/next window in tmux:}} {{c2::Ctrl+b p/n}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1778, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(7143), 2.5f, 2, "To {{c1::close the current window in tmux:}} {{c2::Ctrl+b &}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1777, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(7124), 2.5f, 2, "To {{c1::close the current window in tmux:}} {{c2::Ctrl+b &}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1776, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(6608), 2.5f, 2, "To {{c1::rename the current window in tmux:}} {{c2::Ctrl+b ,}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1775, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(6590), 2.5f, 2, "To {{c1::rename the current window in tmux:}} {{c2::Ctrl+b ,}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1774, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(6085), 2.5f, 2, "To {{c1::create a window inside tmux:}} {{c2::Ctrl+b c}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1773, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(6067), 2.5f, 2, "To {{c1::create a window inside tmux:}} {{c2::Ctrl+b c}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1772, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(5540), 2.5f, 2, "To {{c1::move to a previous session or next session in tmux:}} {{c2::Ctrl + b (, or Ctrl+b )}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1784, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(8822), 2.5f, 2, "tmux: {{c1::split pane vertically}} {{c2::Ctrl+b %}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1799, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(3519), 2.5f, 2, "The critical attributes and methods on os.ScanDir are 1. {{c1::name}} 2. {{c2::path}} 3. {{c3::is_file(*, follow_symlinks=True)/is_directory(*, follow...)}} 4. {{c4::is_symlink()}} 5. {{c5::stat()}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1800, 4, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(3538), 2.5f, 2, "The critical attributes and methods on os.ScanDir are 1. {{c1::name}} 2. {{c2::path}} 3. {{c3::is_file(*, follow_symlinks=True)/is_directory(*, follow...)}} 4. {{c4::is_symlink()}} 5. {{c5::stat()}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1801, 5, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(3553), 2.5f, 2, "The critical attributes and methods on os.ScanDir are 1. {{c1::name}} 2. {{c2::path}} 3. {{c3::is_file(*, follow_symlinks=True)/is_directory(*, follow...)}} 4. {{c4::is_symlink()}} 5. {{c5::stat()}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1828, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(434), 2.5f, 2, "In data ethics, {{c1::aggregation bias}} occurs when {{c2::models do not aggregate data in a way that incorporates all of the appropriate factors, or when a model does not include necessary interaction terms or nonlinearities}}. An example from the medical world is when {{c2::we fail to account for the possibility of differently manifesting diseases when stratified against ethnicity or gender}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1827, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(310), 2.5f, 2, "In data ethics, {{c1::aggregation bias}} occurs when {{c2::models do not aggregate data in a way that incorporates all of the appropriate factors, or when a model does not include necessary interaction terms or nonlinearities}}. An example from the medical world is when {{c2::we fail to account for the possibility of differently manifesting diseases when stratified against ethnicity or gender}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1826, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(139), 2.5f, 2, "In data ethics, {{c1::aggregation bias}} occurs when {{c2::models do not aggregate data in a way that incorporates all of the appropriate factors, or when a model does not include necessary interaction terms or nonlinearities}}. An example from the medical world is when {{c2::we fail to account for the possibility of differently manifesting diseases when stratified against ethnicity or gender}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1825, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(9648), 2.5f, 2, "An example of {{c1::measurement bias}} in the medical data-ethics world is that if we are trying to {{c2::predict strokes, we might accidentally introduce bias by using data that consists only of confirmed stroke cases where a patient sought out and received medical help for their symptoms}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1824, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(9458), 2.5f, 2, "An example of {{c1::measurement bias}} in the medical data-ethics world is that if we are trying to {{c2::predict strokes, we might accidentally introduce bias by using data that consists only of confirmed stroke cases where a patient sought out and received medical help for their symptoms}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1823, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(8899), 2.5f, 2, "In data ethics, {{c1::measurement bias}} refers to how {{c2::if we are measuring the wrong thing, or do not understand what it is we are measuring then we can introduce bias}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1822, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(8780), 2.5f, 2, "In data ethics, {{c1::measurement bias}} refers to how {{c2::if we are measuring the wrong thing, or do not understand what it is we are measuring then we can introduce bias}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1821, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(8285), 2.5f, 2, "By {{c1::historical bias}} in machine learning we mean {{c2::bias in the data generating process that arises from the reality that human and human-social processes are biased}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1820, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(8163), 2.5f, 2, "By {{c1::historical bias}} in machine learning we mean {{c2::bias in the data generating process that arises from the reality that human and human-social processes are biased}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1819, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(7675), 2.5f, 2, "Even after datasets are created, bias can still be introduced during training and deployment. Principally this happens in three ways: 1. {{c1::Evaluation bias}} 2. {{c2::Aggregation bias}} 3. {{c3::Deployment bias}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1818, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(7652), 2.5f, 2, "Even after datasets are created, bias can still be introduced during training and deployment. Principally this happens in three ways: 1. {{c1::Evaluation bias}} 2. {{c2::Aggregation bias}} 3. {{c3::Deployment bias}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1817, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(7626), 2.5f, 2, "Even after datasets are created, bias can still be introduced during training and deployment. Principally this happens in three ways: 1. {{c1::Evaluation bias}} 2. {{c2::Aggregation bias}} 3. {{c3::Deployment bias}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1816, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(7131), 2.5f, 2, "Mentally draw a diagram that explains how three sources of bias arise in model training and deployment", new TimeSpan(0, 0, 10, 0, 0), 2, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1815, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(6775), 2.5f, 2, "A diagram we can keep in mind that explains how bias arises in the creation of datasets is", new TimeSpan(0, 0, 10, 0, 0), 2, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1814, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(6431), 2.5f, 2, "Three sources of bias that arise in the creation of a dataset are: 1. {{c1::historical bias}} 2. {{c2::representation bias}} 3. {{c3::measurement bias}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1813, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(6407), 2.5f, 2, "Three sources of bias that arise in the creation of a dataset are: 1. {{c1::historical bias}} 2. {{c2::representation bias}} 3. {{c3::measurement bias}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1812, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(6377), 2.5f, 2, "Three sources of bias that arise in the creation of a dataset are: 1. {{c1::historical bias}} 2. {{c2::representation bias}} 3. {{c3::measurement bias}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1811, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(5892), 2.5f, 2, "As a way of classifying how bias enters in machine learning, we can categorize different sources of bias that arise in {{c1::the construction of datasets}} and later in {{c2::the training and deployment of models}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1810, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(5845), 2.5f, 2, "As a way of classifying how bias enters in machine learning, we can categorize different sources of bias that arise in {{c1::the construction of datasets}} and later in {{c2::the training and deployment of models}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1809, 4, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(5354), 2.5f, 2, "Four principal topics in data ethics are: 1. {{c1::the need for recourse and accountability}} 2. {{c2::feedback loops}} 3. {{c3::bias}} 4. {{c4::disinformation}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1808, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(5333), 2.5f, 2, "Four principal topics in data ethics are: 1. {{c1::the need for recourse and accountability}} 2. {{c2::feedback loops}} 3. {{c3::bias}} 4. {{c4::disinformation}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1807, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(5321), 2.5f, 2, "Four principal topics in data ethics are: 1. {{c1::the need for recourse and accountability}} 2. {{c2::feedback loops}} 3. {{c3::bias}} 4. {{c4::disinformation}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1806, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(5296), 2.5f, 2, "Four principal topics in data ethics are: 1. {{c1::the need for recourse and accountability}} 2. {{c2::feedback loops}} 3. {{c3::bias}} 4. {{c4::disinformation}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1805, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(4721), 2.5f, 2, "As a mental framework for how data ethics describes real problems you can imagine: 1. {{c1::Recourse processes}} 2. {{c2::Algorithms creating feedback loops}} 3. {{c3::Bias in models due to biased data}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1804, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(4681), 2.5f, 2, "As a mental framework for how data ethics describes real problems you can imagine: 1. {{c1::Recourse processes}} 2. {{c2::Algorithms creating feedback loops}} 3. {{c3::Bias in models due to biased data}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1803, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(4637), 2.5f, 2, "As a mental framework for how data ethics describes real problems you can imagine: 1. {{c1::Recourse processes}} 2. {{c2::Algorithms creating feedback loops}} 3. {{c3::Bias in models due to biased data}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1802, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 897, DateTimeKind.Utc).AddTicks(4103), 2.5f, 2, "To get info on files or directories you can use {{c1::os.stat/os.lstat/os.fstat}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1771, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(5507), 2.5f, 2, "To {{c1::move to a previous session or next session in tmux:}} {{c2::Ctrl + b (, or Ctrl+b )}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1829, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(970), 2.5f, 2, "In data ethics, {{c1::representational bias}} refers to how {{c2::differences in the rates of the true labels for different segments of the population, like gender representation in different jobs, can lead to systems that reinforce these imbalances}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1770, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(4950), 2.5f, 2, "To {{c1::attach to a [named] session in tmux:}} {{c2::tmux attach [-t mysession]}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1768, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(4380), 2.5f, 2, "To {{c1::show all sessions inside tmux:}} {{c2::Ctrl+b s}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1736, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 895, DateTimeKind.Utc).AddTicks(4158), 2.5f, 2, "To create an AMI from an instance in fastec2 you use {{c1::fe2 freeze [instance-name]}}. Remember that {{c2::this shuts down the instance in order to make the AMI}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1735, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 895, DateTimeKind.Utc).AddTicks(4095), 2.5f, 2, "To create an AMI from an instance in fastec2 you use {{c1::fe2 freeze [instance-name]}}. Remember that {{c2::this shuts down the instance in order to make the AMI}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1734, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 895, DateTimeKind.Utc).AddTicks(3579), 2.5f, 2, "To specify ssh tunneling with fastec2, {{c1::on connect you use an invokation like: fe2 connect [instance-name] [3000, 8000, ...]}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1733, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 895, DateTimeKind.Utc).AddTicks(2894), 2.5f, 2, "To connect to an instance with fastec2 you can use {{c1::fe2 connect [instance-name]}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1732, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 895, DateTimeKind.Utc).AddTicks(2390), 2.5f, 2, "To get spot prices with fastec2, instead of using {{c1::price-demand}} you use {{c2::price-hist}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1731, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 895, DateTimeKind.Utc).AddTicks(2369), 2.5f, 2, "To get spot prices with fastec2, instead of using {{c1::price-demand}} you use {{c2::price-hist}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1730, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 895, DateTimeKind.Utc).AddTicks(1787), 2.5f, 2, "To get prices for on-demand instances with fastec2 you use {{c1::fe2 price-demand [instance-type-family]}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1729, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 895, DateTimeKind.Utc).AddTicks(1261), 2.5f, 2, "To launch an instance with fastec2 you use {{c1::fe2 launch [instance-name] [ami-id/name] [disk-size-in-GiB] [instance-type]}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1728, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 895, DateTimeKind.Utc).AddTicks(634), 2.5f, 2, "fastec2 provides an OO access paradigm to EC2 objects, these typically have the form {{c1::fe2 get-XXX}} and methods and properties are extracted by appending {{c1:: - YYY}}. For instance, to get the id of the latest Ubuntu ami you can use {{c1::fe2 get-ami - id}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1727, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 895, DateTimeKind.Utc).AddTicks(610), 2.5f, 2, "fastec2 provides an OO access paradigm to EC2 objects, these typically have the form {{c1::fe2 get-XXX}} and methods and properties are extracted by appending {{c1:: - YYY}}. For instance, to get the id of the latest Ubuntu ami you can use {{c1::fe2 get-ami - id}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1726, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 895, DateTimeKind.Utc).AddTicks(592), 2.5f, 2, "fastec2 provides an OO access paradigm to EC2 objects, these typically have the form {{c1::fe2 get-XXX}} and methods and properties are extracted by appending {{c1:: - YYY}}. For instance, to get the id of the latest Ubuntu ami you can use {{c1::fe2 get-ami - id}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1725, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 895, DateTimeKind.Utc).AddTicks(108), 2.5f, 2, "To {{c2::get the id for the latest Ubuntu stable AMI}} you can use {{c1::fe2 get-ami - id}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1737, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 895, DateTimeKind.Utc).AddTicks(4661), 2.5f, 2, "To shutdown an instance from inside an ssh session you can use {{c1::sudo shutdown -h now}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1724, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 895, DateTimeKind.Utc).AddTicks(23), 2.5f, 2, "To {{c2::get the id for the latest Ubuntu stable AMI}} you can use {{c1::fe2 get-ami - id}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1722, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(9478), 2.5f, 2, "You can {{c1::get a region code}} in fastec2 with {{c2::fe2 region Ohio}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1721, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(8976), 2.5f, 2, "AMIs consist of 1. {{c1::An EBS snapshot}} 2. {{c2::Launch permissions}} 3. {{c3::A block device mapping which specifies volumes to attach}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1720, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(8913), 2.5f, 2, "AMIs consist of 1. {{c1::An EBS snapshot}} 2. {{c2::Launch permissions}} 3. {{c3::A block device mapping which specifies volumes to attach}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1719, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(8885), 2.5f, 2, "AMIs consist of 1. {{c1::An EBS snapshot}} 2. {{c2::Launch permissions}} 3. {{c3::A block device mapping which specifies volumes to attach}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1718, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(8402), 2.5f, 2, "{{c1::EBS}} = {{c2::Elastic Block Store}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1717, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(8372), 2.5f, 2, "{{c1::EBS}} = {{c2::Elastic Block Store}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1716, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(7912), 2.5f, 2, "{{c1::AMI}} = {{c2::Amazon Machine Image}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1715, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(7882), 2.5f, 2, "{{c1::AMI}} = {{c2::Amazon Machine Image}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1714, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(7430), 2.5f, 2, "Terraform and CloudFormation are {{c1::tools used to set up fleets of cloud instances on EC2 or other providers with a particular network architecture for application deployment.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1713, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(6673), 2.5f, 2, "The four categories of EC2 instances are oriented towards {{c1::General purpose work, CPU compute oriented work, accelerated/GPU/FPGA work, and storage}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1712, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(6078), 2.5f, 2, "To get GPU information on a computer with nvidia cards you can use {{c1::nvidia-smi -L}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1711, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(5549), 2.5f, 2, "In the context of FRP and lenses, the lens laws are 1. {{c1::Get-Put}}: {{c2::If you modify something by changing a subpart to its original value, nothing happens}} 2. {{c1::Put-Get}}: {{c2::If you modify a subpart and then view it, you get back exactly that changed subpart}} 3. {{c1::Put-Put}}: {{c2::Writing twice is equivalent to just the second write operation}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1723, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(9503), 2.5f, 2, "You can {{c1::get a region code}} in fastec2 with {{c2::fe2 region Ohio}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1738, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 895, DateTimeKind.Utc).AddTicks(5169), 2.5f, 2, "To shutdown an instance from outside an instance you can use {{c1::fe2 stop inst1}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1739, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 895, DateTimeKind.Utc).AddTicks(5701), 2.5f, 2, "The difference between {{c1::fe2 stop}} and {{c1::fe2 terminate}} is that {{c2::stopping shuts down an instance while terminating destroys it}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1740, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 895, DateTimeKind.Utc).AddTicks(5726), 2.5f, 2, "The difference between {{c1::fe2 stop}} and {{c1::fe2 terminate}} is that {{c2::stopping shuts down an instance while terminating destroys it}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1767, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(4360), 2.5f, 2, "To {{c1::show all sessions inside tmux:}} {{c2::Ctrl+b s}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1766, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(3845), 2.5f, 2, "To {{c1::show all tmux sessions:}} {{c2::tmux ls}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1765, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(3783), 2.5f, 2, "To {{c1::show all tmux sessions:}} {{c2::tmux ls}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1764, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(3269), 2.5f, 2, "To {{c1::detach from a session in tmux:}} {{c2::Ctrl+b d}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1763, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(3251), 2.5f, 2, "To {{c1::detach from a session in tmux:}} {{c2::Ctrl+b d}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1762, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(2740), 2.5f, 2, "To {{c1::rename a session in tmux:}} {{c2::Ctrl+b $}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1761, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(2721), 2.5f, 2, "To {{c1::rename a session in tmux:}} {{c2::Ctrl+b $}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1760, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(2224), 2.5f, 2, "To {{c1::kill a named session in tmux}}: {{c2::tmux kill-session -t mysession}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1759, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(2185), 2.5f, 2, "To {{c1::kill a named session in tmux}}: {{c2::tmux kill-session -t mysession}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1758, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(1674), 2.5f, 2, "To {{c1::create a new named session in tmux use }} {{c2:: tmux new -s mysession}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1757, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(1643), 2.5f, 2, "To {{c1::create a new named session in tmux use }} {{c2:: tmux new -s mysession}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1756, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(1111), 2.5f, 2, "tmux: {{c1::create a new session}} you use {{c2::tmux new}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1755, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(1092), 2.5f, 2, "tmux: {{c1::create a new session}} you use {{c2::tmux new}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1754, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(609), 2.5f, 2, "A state of war{{c1:: only serves as an excuse for domestic tyranny.}} {{c2::Aleksandr Solzhenitsyn}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1753, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(578), 2.5f, 2, "A state of war{{c1:: only serves as an excuse for domestic tyranny.}} {{c2::Aleksandr Solzhenitsyn}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1752, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(43), 2.5f, 2, "If only there were {{c1::evil people somewhere insidiously committing evil deeds, and it were necessary only to separate them from the rest of us and destroy them.}}{{c2:: But the line dividing good and evil cuts through the heart of every human being. And who is willing to destroy a piece of his own heart?}} {{c3::Alexsandr Solzhenitsyn, The Gulag Archipelago}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1751, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 895, DateTimeKind.Utc).AddTicks(9991), 2.5f, 2, "If only there were {{c1::evil people somewhere insidiously committing evil deeds, and it were necessary only to separate them from the rest of us and destroy them.}}{{c2:: But the line dividing good and evil cuts through the heart of every human being. And who is willing to destroy a piece of his own heart?}} {{c3::Alexsandr Solzhenitsyn, The Gulag Archipelago}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1750, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 895, DateTimeKind.Utc).AddTicks(9849), 2.5f, 2, "If only there were {{c1::evil people somewhere insidiously committing evil deeds, and it were necessary only to separate them from the rest of us and destroy them.}}{{c2:: But the line dividing good and evil cuts through the heart of every human being. And who is willing to destroy a piece of his own heart?}} {{c3::Alexsandr Solzhenitsyn, The Gulag Archipelago}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1749, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 895, DateTimeKind.Utc).AddTicks(9129), 2.5f, 2, "To boot an interactive fastec2 session in a particular region (say Oregon) use {{c1::fe2 i Oregon}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1748, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 895, DateTimeKind.Utc).AddTicks(8633), 2.5f, 2, "To request a spot instance with fastec2 you just {{c1::add the --spot argument to the launch command}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1747, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 895, DateTimeKind.Utc).AddTicks(8109), 2.5f, 2, "To get a list of instances with fastec2 you can use {{c1::fe2 instances}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1746, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 895, DateTimeKind.Utc).AddTicks(7626), 2.5f, 2, "The difference between {{c1::fe2 launch}} and {{c1::fe2 start}} is that {{c2::starting is for rebooting an existing instance and therefore takes only the name of the instance, whereas launch creates an instance}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1745, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 895, DateTimeKind.Utc).AddTicks(7458), 2.5f, 2, "The difference between {{c1::fe2 launch}} and {{c1::fe2 start}} is that {{c2::starting is for rebooting an existing instance and therefore takes only the name of the instance, whereas launch creates an instance}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1744, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 895, DateTimeKind.Utc).AddTicks(7437), 2.5f, 2, "The difference between {{c1::fe2 launch}} and {{c1::fe2 start}} is that {{c2::starting is for rebooting an existing instance and therefore takes only the name of the instance, whereas launch creates an instance}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1743, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 895, DateTimeKind.Utc).AddTicks(6932), 2.5f, 2, "To change an instance type with fastec2 you can use {{c1::fe2 change-type [instance-name] [new-instance-type]}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1742, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 895, DateTimeKind.Utc).AddTicks(6350), 2.5f, 2, "To wait until an instance is stopped with fastec2 you can {{c1::fe2 get-instance [instance-name] - wait-until-stopped}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1741, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 895, DateTimeKind.Utc).AddTicks(5793), 2.5f, 2, "The difference between {{c1::fe2 stop}} and {{c1::fe2 terminate}} is that {{c2::stopping shuts down an instance while terminating destroys it}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1769, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 896, DateTimeKind.Utc).AddTicks(4914), 2.5f, 2, "To {{c1::attach to a [named] session in tmux:}} {{c2::tmux attach [-t mysession]}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1710, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(5482), 2.5f, 2, "In the context of FRP and lenses, the lens laws are 1. {{c1::Get-Put}}: {{c2::If you modify something by changing a subpart to its original value, nothing happens}} 2. {{c1::Put-Get}}: {{c2::If you modify a subpart and then view it, you get back exactly that changed subpart}} 3. {{c1::Put-Put}}: {{c2::Writing twice is equivalent to just the second write operation}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1830, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(1157), 2.5f, 2, "In data ethics, {{c1::representational bias}} refers to how {{c2::differences in the rates of the true labels for different segments of the population, like gender representation in different jobs, can lead to systems that reinforce these imbalances}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1832, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(1791), 2.5f, 2, "What questions can you ask in order to check for bias in a ML project you are working on? 1. Should we {{c1::even be doing this?}} 2. What bias exists in the {{c2::data/dataset?}} 3. Can we perform {{c3::audits of the code/data?}} 4. What are the {{c4::performance measures}} stratified by {{c4::different populations/sub-groups?}} 5. What is the accuracy of {{c5::a simple rule-based alternative?}} 6. What processes exist {{c6::to handle mistakes or appeals?}} 7. How diverse is {{c7::the team that created the system/model?}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1919, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(1131), 2.5f, 2, "In order to synchronize the database against the model of its schema that EFC knows about, we use {{c1::the `Add-Migration` command in order to generate a migration (schema-diff) to apply to the database}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1918, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(438), 2.5f, 2, "In the following class, describe the relationships", new TimeSpan(0, 0, 10, 0, 0), 2, "1. There is a one-to-zero or one-to-one relationship with PriceOffer 2. There is a one-to-many relationship to Reviews 3. There is a many-to-many relationship via the BookAuthor join table to Author" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1917, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(94), 2.5f, 2, "In order to prevent duplicate joining rows in a many-to-many relationship, we make the foreign keys in the join table also {{c1::primary keys}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1916, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(9603), 2.5f, 2, "By convention, if we are trying to model a many-to-many between two tables: Books and Authors, we might make a join table called {{c1::BookAuthor}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1915, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(9130), 2.5f, 2, "In a relational database, we can model many-to-many relationships by {{c1::using a join table where rows in the table correspond to connections between rows of the related tables}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1914, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(8455), 2.5f, 2, "\"In a database we can model a one-to-many relationship, for instance \"\"A has many B\"\" by {{c1::putting a foreign key from B to A}}\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1913, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(7958), 2.5f, 2, "\"In a relational database we model the relationship \"\"A is one-to-one with B\"\" by putting a {{c1::foreign key with a unique constraint from A to B}}\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1912, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(7369), 2.5f, 2, "Three different types of relationships that can be modeled by relational databases are: 1. {{c1::one-to-one relationships}} 2. {{c2::onte-to-many relationships}} 3. {{c3::many-to-many relationships}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1911, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(7335), 2.5f, 2, "Three different types of relationships that can be modeled by relational databases are: 1. {{c1::one-to-one relationships}} 2. {{c2::onte-to-many relationships}} 3. {{c3::many-to-many relationships}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1910, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(7299), 2.5f, 2, "Three different types of relationships that can be modeled by relational databases are: 1. {{c1::one-to-one relationships}} 2. {{c2::onte-to-many relationships}} 3. {{c3::many-to-many relationships}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1909, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(6787), 2.5f, 2, "In order to commit changes in a database using EFC we use {{c1::db.SaveChanges()}} after {{c2::making any changes to the objects as though they are standard C# instances}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1908, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(6704), 2.5f, 2, "In order to commit changes in a database using EFC we use {{c1::db.SaveChanges()}} after {{c2::making any changes to the objects as though they are standard C# instances}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1920, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(1682), 2.5f, 2, "To create a migration in EFC from the CLI you can use {{c1::dotnet ef migrations add [migration-name]}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1907, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(6177), 2.5f, 2, "If you are not modifying data from the database in EFC, using {{c1::[query].AsNoTracking()}} will prevent the creation of {{c1::a tracking (diff) snapshot of the query results which results in a faster query}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1905, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(5460), 2.5f, 2, "LINQ provides two different syntaxes {{c1::query syntax}} and {{c1::method syntax}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1904, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(5437), 2.5f, 2, "LINQ provides two different syntaxes {{c1::query syntax}} and {{c1::method syntax}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1903, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(4957), 2.5f, 2, "In order to perform a {{c1::Cartesian product}} in LINQ you can use {{c2::multiple `from` clauses}} the end result is actually called {{c2::a SelectMany}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1902, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(4936), 2.5f, 2, "In order to perform a {{c1::Cartesian product}} in LINQ you can use {{c2::multiple `from` clauses}} the end result is actually called {{c2::a SelectMany}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1901, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(4904), 2.5f, 2, "In order to perform a {{c1::Cartesian product}} in LINQ you can use {{c2::multiple `from` clauses}} the end result is actually called {{c2::a SelectMany}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1900, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(4433), 2.5f, 2, "The query language that EFC uses in C# land is actually just {{c1::LINQ}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1899, 5, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(3933), 2.5f, 2, "When EFC starts modeling the database from the AppDbContext, we can think of the process as having four steps 1. {{c1::Look at DbSet<T> properties}} 2. {{c2::Look at the class for columns}} 3. {{c3::Inspect linked classes}} 4. {{c4::Run OnModelCreating}} after which {{c5::a schema for the database is available}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1898, 4, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(3885), 2.5f, 2, "When EFC starts modeling the database from the AppDbContext, we can think of the process as having four steps 1. {{c1::Look at DbSet<T> properties}} 2. {{c2::Look at the class for columns}} 3. {{c3::Inspect linked classes}} 4. {{c4::Run OnModelCreating}} after which {{c5::a schema for the database is available}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1897, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(3828), 2.5f, 2, "When EFC starts modeling the database from the AppDbContext, we can think of the process as having four steps 1. {{c1::Look at DbSet<T> properties}} 2. {{c2::Look at the class for columns}} 3. {{c3::Inspect linked classes}} 4. {{c4::Run OnModelCreating}} after which {{c5::a schema for the database is available}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1896, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(3799), 2.5f, 2, "When EFC starts modeling the database from the AppDbContext, we can think of the process as having four steps 1. {{c1::Look at DbSet<T> properties}} 2. {{c2::Look at the class for columns}} 3. {{c3::Inspect linked classes}} 4. {{c4::Run OnModelCreating}} after which {{c5::a schema for the database is available}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1895, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(3760), 2.5f, 2, "When EFC starts modeling the database from the AppDbContext, we can think of the process as having four steps 1. {{c1::Look at DbSet<T> properties}} 2. {{c2::Look at the class for columns}} 3. {{c3::Inspect linked classes}} 4. {{c4::Run OnModelCreating}} after which {{c5::a schema for the database is available}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1894, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(3226), 2.5f, 2, "For a DbContext, overriding the {{c1::OnConfiguring}} method allows you to specify {{c2::the information EFC needs to define the type and location of the database}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1906, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(6086), 2.5f, 2, "If you are not modifying data from the database in EFC, using {{c1::[query].AsNoTracking()}} will prevent the creation of {{c1::a tracking (diff) snapshot of the query results which results in a faster query}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1921, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(2208), 2.5f, 2, "To apply migrations to your database from the CLI with EFC you use {{c1::dotnet ef database update}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1922, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(2816), 2.5f, 2, "In an O/RM, we construct queries {{c1::lazily so that we can pass them between functions before execution}} before ultimately {{c2::executing the query by demanding a collection by filled or some mutation performed on the query}}. The set of objects described by the unfulfilled query is sometimes called {{c3::a queryset}} but mostly outside of .NET land.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1923, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(2953), 2.5f, 2, "In an O/RM, we construct queries {{c1::lazily so that we can pass them between functions before execution}} before ultimately {{c2::executing the query by demanding a collection by filled or some mutation performed on the query}}. The set of objects described by the unfulfilled query is sometimes called {{c3::a queryset}} but mostly outside of .NET land.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1950, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 901, DateTimeKind.Utc).AddTicks(83), 2.5f, 2, "\"A method can become an {{c1::extension method}} if 1. {{c2::it's declared in a static class}} 2. {{c3::the method is static}} 3. {{c3::the first parameter has the keyword \"\"this\"\" in front of it}}\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1949, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 901, DateTimeKind.Utc).AddTicks(37), 2.5f, 2, "\"A method can become an {{c1::extension method}} if 1. {{c2::it's declared in a static class}} 2. {{c3::the method is static}} 3. {{c3::the first parameter has the keyword \"\"this\"\" in front of it}}\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1948, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(8848), 2.5f, 2, "EFCore supports running queries at least partially {{c1::on the client}} as opposed to {{c1::on the database}}. This allows you to have {{c2::a richer query language than is supported natively by the database, at the cost of emulating operations on the client which can be expensive}}. One example is that you can do {{c2::string interpolation to construct an additonal field inside a query which is evaluated on the client after the database query returns}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1947, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(8691), 2.5f, 2, "EFCore supports running queries at least partially {{c1::on the client}} as opposed to {{c1::on the database}}. This allows you to have {{c2::a richer query language than is supported natively by the database, at the cost of emulating operations on the client which can be expensive}}. One example is that you can do {{c2::string interpolation to construct an additonal field inside a query which is evaluated on the client after the database query returns}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1946, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(8400), 2.5f, 2, "EFCore supports running queries at least partially {{c1::on the client}} as opposed to {{c1::on the database}}. This allows you to have {{c2::a richer query language than is supported natively by the database, at the cost of emulating operations on the client which can be expensive}}. One example is that you can do {{c2::string interpolation to construct an additonal field inside a query which is evaluated on the client after the database query returns}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1945, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(8253), 2.5f, 2, "EFCore supports running queries at least partially {{c1::on the client}} as opposed to {{c1::on the database}}. This allows you to have {{c2::a richer query language than is supported natively by the database, at the cost of emulating operations on the client which can be expensive}}. One example is that you can do {{c2::string interpolation to construct an additonal field inside a query which is evaluated on the client after the database query returns}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1944, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(6931), 2.5f, 2, "\"{{c1::Select loading}} refers in EFC to using the method {{c2::Select}} in order to {{c2::pick specific operations and data to pull out from instances in a database, including using database operators like \"\"count\"\"}}\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1943, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(6801), 2.5f, 2, "\"{{c1::Select loading}} refers in EFC to using the method {{c2::Select}} in order to {{c2::pick specific operations and data to pull out from instances in a database, including using database operators like \"\"count\"\"}}\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1942, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(6784), 2.5f, 2, "\"{{c1::Select loading}} refers in EFC to using the method {{c2::Select}} in order to {{c2::pick specific operations and data to pull out from instances in a database, including using database operators like \"\"count\"\"}}\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1941, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(6293), 2.5f, 2, "{{c1::Explicit-loading}} of related data in EFC refers to when you {{c2::request additional information about related objects after a query has been executed in order to fetch more information.}} This is typically accomplished by {{c2::using Entry or Query}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1940, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(6265), 2.5f, 2, "{{c1::Explicit-loading}} of related data in EFC refers to when you {{c2::request additional information about related objects after a query has been executed in order to fetch more information.}} This is typically accomplished by {{c2::using Entry or Query}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1939, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(6138), 2.5f, 2, "{{c1::Explicit-loading}} of related data in EFC refers to when you {{c2::request additional information about related objects after a query has been executed in order to fetch more information.}} This is typically accomplished by {{c2::using Entry or Query}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1938, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(5577), 2.5f, 2, "The difference between {{c1::Include}} and {{c1::ThenInclude}} in EFC is that {{c2::ThenInclude is used for drilling-down through related objects.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1937, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(5508), 2.5f, 2, "The difference between {{c1::Include}} and {{c1::ThenInclude}} in EFC is that {{c2::ThenInclude is used for drilling-down through related objects.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1936, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(5486), 2.5f, 2, "The difference between {{c1::Include}} and {{c1::ThenInclude}} in EFC is that {{c2::ThenInclude is used for drilling-down through related objects.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1935, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(5015), 2.5f, 2, "{{c1::Eager-loading}} of related data in EFC {{c2::refers to explicitly requesting the inclusion of related data}}. This is accomplished with {{c2::.Include or .ThenInclude}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1934, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(4982), 2.5f, 2, "{{c1::Eager-loading}} of related data in EFC {{c2::refers to explicitly requesting the inclusion of related data}}. This is accomplished with {{c2::.Include or .ThenInclude}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1933, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(4913), 2.5f, 2, "{{c1::Eager-loading}} of related data in EFC {{c2::refers to explicitly requesting the inclusion of related data}}. This is accomplished with {{c2::.Include or .ThenInclude}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1932, 4, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(4406), 2.5f, 2, "Data accessed through relationships in EFC can be accessed in four different paradigms: 1. {{c1::eager loading}} 2. {{c2::explicit loading}} 3. {{c3::select loading}} 4. {{c4::lazy loading}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1931, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(4386), 2.5f, 2, "Data accessed through relationships in EFC can be accessed in four different paradigms: 1. {{c1::eager loading}} 2. {{c2::explicit loading}} 3. {{c3::select loading}} 4. {{c4::lazy loading}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1930, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(4363), 2.5f, 2, "Data accessed through relationships in EFC can be accessed in four different paradigms: 1. {{c1::eager loading}} 2. {{c2::explicit loading}} 3. {{c3::select loading}} 4. {{c4::lazy loading}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1929, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(4296), 2.5f, 2, "Data accessed through relationships in EFC can be accessed in four different paradigms: 1. {{c1::eager loading}} 2. {{c2::explicit loading}} 3. {{c3::select loading}} 4. {{c4::lazy loading}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1928, 4, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(3789), 2.5f, 2, "In EFC, a query is executed against the database when 1. {{c1::It is enumerated by a foreach statement}} 2. {{c2::It is enumerated by a collection: .ToArray, .ToDictionary .ToList, .ToListAsync, ...}} 3. {{c3::LINQ operators like .First or .Any are used in the outermost part of the query}} 4. {{c4::It is explicitly requested with .Load or similar}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1927, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(3735), 2.5f, 2, "In EFC, a query is executed against the database when 1. {{c1::It is enumerated by a foreach statement}} 2. {{c2::It is enumerated by a collection: .ToArray, .ToDictionary .ToList, .ToListAsync, ...}} 3. {{c3::LINQ operators like .First or .Any are used in the outermost part of the query}} 4. {{c4::It is explicitly requested with .Load or similar}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1926, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(3652), 2.5f, 2, "In EFC, a query is executed against the database when 1. {{c1::It is enumerated by a foreach statement}} 2. {{c2::It is enumerated by a collection: .ToArray, .ToDictionary .ToList, .ToListAsync, ...}} 3. {{c3::LINQ operators like .First or .Any are used in the outermost part of the query}} 4. {{c4::It is explicitly requested with .Load or similar}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1925, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(3558), 2.5f, 2, "In EFC, a query is executed against the database when 1. {{c1::It is enumerated by a foreach statement}} 2. {{c2::It is enumerated by a collection: .ToArray, .ToDictionary .ToList, .ToListAsync, ...}} 3. {{c3::LINQ operators like .First or .Any are used in the outermost part of the query}} 4. {{c4::It is explicitly requested with .Load or similar}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1924, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 900, DateTimeKind.Utc).AddTicks(2974), 2.5f, 2, "In an O/RM, we construct queries {{c1::lazily so that we can pass them between functions before execution}} before ultimately {{c2::executing the query by demanding a collection by filled or some mutation performed on the query}}. The set of objects described by the unfulfilled query is sometimes called {{c3::a queryset}} but mostly outside of .NET land.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1893, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(3144), 2.5f, 2, "For a DbContext, overriding the {{c1::OnConfiguring}} method allows you to specify {{c2::the information EFC needs to define the type and location of the database}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1831, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(1767), 2.5f, 2, "What questions can you ask in order to check for bias in a ML project you are working on? 1. Should we {{c1::even be doing this?}} 2. What bias exists in the {{c2::data/dataset?}} 3. Can we perform {{c3::audits of the code/data?}} 4. What are the {{c4::performance measures}} stratified by {{c4::different populations/sub-groups?}} 5. What is the accuracy of {{c5::a simple rule-based alternative?}} 6. What processes exist {{c6::to handle mistakes or appeals?}} 7. How diverse is {{c7::the team that created the system/model?}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1892, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(2628), 2.5f, 2, "A {{c1::DbSet<T>}} property configures {{c2::EFC that there is a mapping between a particular C# class (T) and a database table with the name of the property}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1890, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(1943), 2.5f, 2, "In EntityFramework Core, the DbContext holds {{c1::information required for EFC to configure the mapping from database tables to classes in C#}} and is {{c2::the object that is used to start queries against the database}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1858, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(4034), 2.5f, 2, "In Python regular expressions, the special characters are: 1. {{c1::.}} {{c2::Match anything except newline}} 2. {{c1::^}} {{c2::Match start of string}} 3. {{c1::$}} {{c2::Match end of string or just before newline}} 4. {{c1::*}} {{c2::Match 0 or more of the previous symbol}} 5. {{c1::+}} {{c2::Match 1 or more of the previous symbol}} 6. {{c1::?}} {{c2::Match 0 or 1 of the previous symbol}} 7. {{c1::*?, +?, ??}} {{c2::Non-greedy variants of the quantifiers}} 8. {{c1::{m,n} }} {{c2::Match between m and n copies of the previous symbol}} 9. {{c1::{m} }} {{c2::Match m copies of the previous symbol}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1857, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(3957), 2.5f, 2, "In Python regular expressions, the special characters are: 1. {{c1::.}} {{c2::Match anything except newline}} 2. {{c1::^}} {{c2::Match start of string}} 3. {{c1::$}} {{c2::Match end of string or just before newline}} 4. {{c1::*}} {{c2::Match 0 or more of the previous symbol}} 5. {{c1::+}} {{c2::Match 1 or more of the previous symbol}} 6. {{c1::?}} {{c2::Match 0 or 1 of the previous symbol}} 7. {{c1::*?, +?, ??}} {{c2::Non-greedy variants of the quantifiers}} 8. {{c1::{m,n} }} {{c2::Match between m and n copies of the previous symbol}} 9. {{c1::{m} }} {{c2::Match m copies of the previous symbol}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1856, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(3948), 2.5f, 2, "In Python regular expressions, the special characters are: 1. {{c1::.}} {{c2::Match anything except newline}} 2. {{c1::^}} {{c2::Match start of string}} 3. {{c1::$}} {{c2::Match end of string or just before newline}} 4. {{c1::*}} {{c2::Match 0 or more of the previous symbol}} 5. {{c1::+}} {{c2::Match 1 or more of the previous symbol}} 6. {{c1::?}} {{c2::Match 0 or 1 of the previous symbol}} 7. {{c1::*?, +?, ??}} {{c2::Non-greedy variants of the quantifiers}} 8. {{c1::{m,n} }} {{c2::Match between m and n copies of the previous symbol}} 9. {{c1::{m} }} {{c2::Match m copies of the previous symbol}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1855, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(3904), 2.5f, 2, "In Python regular expressions, the special characters are: 1. {{c1::.}} {{c2::Match anything except newline}} 2. {{c1::^}} {{c2::Match start of string}} 3. {{c1::$}} {{c2::Match end of string or just before newline}} 4. {{c1::*}} {{c2::Match 0 or more of the previous symbol}} 5. {{c1::+}} {{c2::Match 1 or more of the previous symbol}} 6. {{c1::?}} {{c2::Match 0 or 1 of the previous symbol}} 7. {{c1::*?, +?, ??}} {{c2::Non-greedy variants of the quantifiers}} 8. {{c1::{m,n} }} {{c2::Match between m and n copies of the previous symbol}} 9. {{c1::{m} }} {{c2::Match m copies of the previous symbol}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1854, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(3895), 2.5f, 2, "In Python regular expressions, the special characters are: 1. {{c1::.}} {{c2::Match anything except newline}} 2. {{c1::^}} {{c2::Match start of string}} 3. {{c1::$}} {{c2::Match end of string or just before newline}} 4. {{c1::*}} {{c2::Match 0 or more of the previous symbol}} 5. {{c1::+}} {{c2::Match 1 or more of the previous symbol}} 6. {{c1::?}} {{c2::Match 0 or 1 of the previous symbol}} 7. {{c1::*?, +?, ??}} {{c2::Non-greedy variants of the quantifiers}} 8. {{c1::{m,n} }} {{c2::Match between m and n copies of the previous symbol}} 9. {{c1::{m} }} {{c2::Match m copies of the previous symbol}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1853, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(3847), 2.5f, 2, "In Python regular expressions, the special characters are: 1. {{c1::.}} {{c2::Match anything except newline}} 2. {{c1::^}} {{c2::Match start of string}} 3. {{c1::$}} {{c2::Match end of string or just before newline}} 4. {{c1::*}} {{c2::Match 0 or more of the previous symbol}} 5. {{c1::+}} {{c2::Match 1 or more of the previous symbol}} 6. {{c1::?}} {{c2::Match 0 or 1 of the previous symbol}} 7. {{c1::*?, +?, ??}} {{c2::Non-greedy variants of the quantifiers}} 8. {{c1::{m,n} }} {{c2::Match between m and n copies of the previous symbol}} 9. {{c1::{m} }} {{c2::Match m copies of the previous symbol}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1852, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(3837), 2.5f, 2, "In Python regular expressions, the special characters are: 1. {{c1::.}} {{c2::Match anything except newline}} 2. {{c1::^}} {{c2::Match start of string}} 3. {{c1::$}} {{c2::Match end of string or just before newline}} 4. {{c1::*}} {{c2::Match 0 or more of the previous symbol}} 5. {{c1::+}} {{c2::Match 1 or more of the previous symbol}} 6. {{c1::?}} {{c2::Match 0 or 1 of the previous symbol}} 7. {{c1::*?, +?, ??}} {{c2::Non-greedy variants of the quantifiers}} 8. {{c1::{m,n} }} {{c2::Match between m and n copies of the previous symbol}} 9. {{c1::{m} }} {{c2::Match m copies of the previous symbol}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1851, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(3809), 2.5f, 2, "In Python regular expressions, the special characters are: 1. {{c1::.}} {{c2::Match anything except newline}} 2. {{c1::^}} {{c2::Match start of string}} 3. {{c1::$}} {{c2::Match end of string or just before newline}} 4. {{c1::*}} {{c2::Match 0 or more of the previous symbol}} 5. {{c1::+}} {{c2::Match 1 or more of the previous symbol}} 6. {{c1::?}} {{c2::Match 0 or 1 of the previous symbol}} 7. {{c1::*?, +?, ??}} {{c2::Non-greedy variants of the quantifiers}} 8. {{c1::{m,n} }} {{c2::Match between m and n copies of the previous symbol}} 9. {{c1::{m} }} {{c2::Match m copies of the previous symbol}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1850, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(3801), 2.5f, 2, "In Python regular expressions, the special characters are: 1. {{c1::.}} {{c2::Match anything except newline}} 2. {{c1::^}} {{c2::Match start of string}} 3. {{c1::$}} {{c2::Match end of string or just before newline}} 4. {{c1::*}} {{c2::Match 0 or more of the previous symbol}} 5. {{c1::+}} {{c2::Match 1 or more of the previous symbol}} 6. {{c1::?}} {{c2::Match 0 or 1 of the previous symbol}} 7. {{c1::*?, +?, ??}} {{c2::Non-greedy variants of the quantifiers}} 8. {{c1::{m,n} }} {{c2::Match between m and n copies of the previous symbol}} 9. {{c1::{m} }} {{c2::Match m copies of the previous symbol}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1849, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(3758), 2.5f, 2, "In Python regular expressions, the special characters are: 1. {{c1::.}} {{c2::Match anything except newline}} 2. {{c1::^}} {{c2::Match start of string}} 3. {{c1::$}} {{c2::Match end of string or just before newline}} 4. {{c1::*}} {{c2::Match 0 or more of the previous symbol}} 5. {{c1::+}} {{c2::Match 1 or more of the previous symbol}} 6. {{c1::?}} {{c2::Match 0 or 1 of the previous symbol}} 7. {{c1::*?, +?, ??}} {{c2::Non-greedy variants of the quantifiers}} 8. {{c1::{m,n} }} {{c2::Match between m and n copies of the previous symbol}} 9. {{c1::{m} }} {{c2::Match m copies of the previous symbol}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1848, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(3075), 2.5f, 2, "Ethical lenses through which you can view data ethics problems/questions are: 1. {{c1::The rights approach}}: {{c2::Which option best respects the rights of all stakeholders?}} 2. {{c1::The justice approach}}: {{c2::Which option treats people equally/proportionately?}} 3. {{c1::The utilitarian approach}}: {{c2::Which option produces the most good?}} 4. {{c1::The common good approach}}: {{c2::Which option best serves the community and not just some members?}} 5. {{c1::The virtue approach}}: {{c2::Which option leads me to act as the sort of person I want to be?}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1847, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(3005), 2.5f, 2, "Ethical lenses through which you can view data ethics problems/questions are: 1. {{c1::The rights approach}}: {{c2::Which option best respects the rights of all stakeholders?}} 2. {{c1::The justice approach}}: {{c2::Which option treats people equally/proportionately?}} 3. {{c1::The utilitarian approach}}: {{c2::Which option produces the most good?}} 4. {{c1::The common good approach}}: {{c2::Which option best serves the community and not just some members?}} 5. {{c1::The virtue approach}}: {{c2::Which option leads me to act as the sort of person I want to be?}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1859, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(4044), 2.5f, 2, "In Python regular expressions, the special characters are: 1. {{c1::.}} {{c2::Match anything except newline}} 2. {{c1::^}} {{c2::Match start of string}} 3. {{c1::$}} {{c2::Match end of string or just before newline}} 4. {{c1::*}} {{c2::Match 0 or more of the previous symbol}} 5. {{c1::+}} {{c2::Match 1 or more of the previous symbol}} 6. {{c1::?}} {{c2::Match 0 or 1 of the previous symbol}} 7. {{c1::*?, +?, ??}} {{c2::Non-greedy variants of the quantifiers}} 8. {{c1::{m,n} }} {{c2::Match between m and n copies of the previous symbol}} 9. {{c1::{m} }} {{c2::Match m copies of the previous symbol}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1846, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(2978), 2.5f, 2, "Ethical lenses through which you can view data ethics problems/questions are: 1. {{c1::The rights approach}}: {{c2::Which option best respects the rights of all stakeholders?}} 2. {{c1::The justice approach}}: {{c2::Which option treats people equally/proportionately?}} 3. {{c1::The utilitarian approach}}: {{c2::Which option produces the most good?}} 4. {{c1::The common good approach}}: {{c2::Which option best serves the community and not just some members?}} 5. {{c1::The virtue approach}}: {{c2::Which option leads me to act as the sort of person I want to be?}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1844, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(2845), 2.5f, 2, "Ethical lenses through which you can view data ethics problems/questions are: 1. {{c1::The rights approach}}: {{c2::Which option best respects the rights of all stakeholders?}} 2. {{c1::The justice approach}}: {{c2::Which option treats people equally/proportionately?}} 3. {{c1::The utilitarian approach}}: {{c2::Which option produces the most good?}} 4. {{c1::The common good approach}}: {{c2::Which option best serves the community and not just some members?}} 5. {{c1::The virtue approach}}: {{c2::Which option leads me to act as the sort of person I want to be?}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1843, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(2802), 2.5f, 2, "Ethical lenses through which you can view data ethics problems/questions are: 1. {{c1::The rights approach}}: {{c2::Which option best respects the rights of all stakeholders?}} 2. {{c1::The justice approach}}: {{c2::Which option treats people equally/proportionately?}} 3. {{c1::The utilitarian approach}}: {{c2::Which option produces the most good?}} 4. {{c1::The common good approach}}: {{c2::Which option best serves the community and not just some members?}} 5. {{c1::The virtue approach}}: {{c2::Which option leads me to act as the sort of person I want to be?}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1842, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(2770), 2.5f, 2, "Ethical lenses through which you can view data ethics problems/questions are: 1. {{c1::The rights approach}}: {{c2::Which option best respects the rights of all stakeholders?}} 2. {{c1::The justice approach}}: {{c2::Which option treats people equally/proportionately?}} 3. {{c1::The utilitarian approach}}: {{c2::Which option produces the most good?}} 4. {{c1::The common good approach}}: {{c2::Which option best serves the community and not just some members?}} 5. {{c1::The virtue approach}}: {{c2::Which option leads me to act as the sort of person I want to be?}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1841, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(2713), 2.5f, 2, "Ethical lenses through which you can view data ethics problems/questions are: 1. {{c1::The rights approach}}: {{c2::Which option best respects the rights of all stakeholders?}} 2. {{c1::The justice approach}}: {{c2::Which option treats people equally/proportionately?}} 3. {{c1::The utilitarian approach}}: {{c2::Which option produces the most good?}} 4. {{c1::The common good approach}}: {{c2::Which option best serves the community and not just some members?}} 5. {{c1::The virtue approach}}: {{c2::Which option leads me to act as the sort of person I want to be?}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1840, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(2686), 2.5f, 2, "Ethical lenses through which you can view data ethics problems/questions are: 1. {{c1::The rights approach}}: {{c2::Which option best respects the rights of all stakeholders?}} 2. {{c1::The justice approach}}: {{c2::Which option treats people equally/proportionately?}} 3. {{c1::The utilitarian approach}}: {{c2::Which option produces the most good?}} 4. {{c1::The common good approach}}: {{c2::Which option best serves the community and not just some members?}} 5. {{c1::The virtue approach}}: {{c2::Which option leads me to act as the sort of person I want to be?}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1839, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(2619), 2.5f, 2, "Ethical lenses through which you can view data ethics problems/questions are: 1. {{c1::The rights approach}}: {{c2::Which option best respects the rights of all stakeholders?}} 2. {{c1::The justice approach}}: {{c2::Which option treats people equally/proportionately?}} 3. {{c1::The utilitarian approach}}: {{c2::Which option produces the most good?}} 4. {{c1::The common good approach}}: {{c2::Which option best serves the community and not just some members?}} 5. {{c1::The virtue approach}}: {{c2::Which option leads me to act as the sort of person I want to be?}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1838, 7, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(2015), 2.5f, 2, "What questions can you ask in order to check for bias in a ML project you are working on? 1. Should we {{c1::even be doing this?}} 2. What bias exists in the {{c2::data/dataset?}} 3. Can we perform {{c3::audits of the code/data?}} 4. What are the {{c4::performance measures}} stratified by {{c4::different populations/sub-groups?}} 5. What is the accuracy of {{c5::a simple rule-based alternative?}} 6. What processes exist {{c6::to handle mistakes or appeals?}} 7. How diverse is {{c7::the team that created the system/model?}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1837, 6, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(1969), 2.5f, 2, "What questions can you ask in order to check for bias in a ML project you are working on? 1. Should we {{c1::even be doing this?}} 2. What bias exists in the {{c2::data/dataset?}} 3. Can we perform {{c3::audits of the code/data?}} 4. What are the {{c4::performance measures}} stratified by {{c4::different populations/sub-groups?}} 5. What is the accuracy of {{c5::a simple rule-based alternative?}} 6. What processes exist {{c6::to handle mistakes or appeals?}} 7. How diverse is {{c7::the team that created the system/model?}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1836, 5, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(1931), 2.5f, 2, "What questions can you ask in order to check for bias in a ML project you are working on? 1. Should we {{c1::even be doing this?}} 2. What bias exists in the {{c2::data/dataset?}} 3. Can we perform {{c3::audits of the code/data?}} 4. What are the {{c4::performance measures}} stratified by {{c4::different populations/sub-groups?}} 5. What is the accuracy of {{c5::a simple rule-based alternative?}} 6. What processes exist {{c6::to handle mistakes or appeals?}} 7. How diverse is {{c7::the team that created the system/model?}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1835, 4, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(1891), 2.5f, 2, "What questions can you ask in order to check for bias in a ML project you are working on? 1. Should we {{c1::even be doing this?}} 2. What bias exists in the {{c2::data/dataset?}} 3. Can we perform {{c3::audits of the code/data?}} 4. What are the {{c4::performance measures}} stratified by {{c4::different populations/sub-groups?}} 5. What is the accuracy of {{c5::a simple rule-based alternative?}} 6. What processes exist {{c6::to handle mistakes or appeals?}} 7. How diverse is {{c7::the team that created the system/model?}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1834, 4, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(1850), 2.5f, 2, "What questions can you ask in order to check for bias in a ML project you are working on? 1. Should we {{c1::even be doing this?}} 2. What bias exists in the {{c2::data/dataset?}} 3. Can we perform {{c3::audits of the code/data?}} 4. What are the {{c4::performance measures}} stratified by {{c4::different populations/sub-groups?}} 5. What is the accuracy of {{c5::a simple rule-based alternative?}} 6. What processes exist {{c6::to handle mistakes or appeals?}} 7. How diverse is {{c7::the team that created the system/model?}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1833, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(1823), 2.5f, 2, "What questions can you ask in order to check for bias in a ML project you are working on? 1. Should we {{c1::even be doing this?}} 2. What bias exists in the {{c2::data/dataset?}} 3. Can we perform {{c3::audits of the code/data?}} 4. What are the {{c4::performance measures}} stratified by {{c4::different populations/sub-groups?}} 5. What is the accuracy of {{c5::a simple rule-based alternative?}} 6. What processes exist {{c6::to handle mistakes or appeals?}} 7. How diverse is {{c7::the team that created the system/model?}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1845, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(2907), 2.5f, 2, "Ethical lenses through which you can view data ethics problems/questions are: 1. {{c1::The rights approach}}: {{c2::Which option best respects the rights of all stakeholders?}} 2. {{c1::The justice approach}}: {{c2::Which option treats people equally/proportionately?}} 3. {{c1::The utilitarian approach}}: {{c2::Which option produces the most good?}} 4. {{c1::The common good approach}}: {{c2::Which option best serves the community and not just some members?}} 5. {{c1::The virtue approach}}: {{c2::Which option leads me to act as the sort of person I want to be?}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1860, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(4085), 2.5f, 2, "In Python regular expressions, the special characters are: 1. {{c1::.}} {{c2::Match anything except newline}} 2. {{c1::^}} {{c2::Match start of string}} 3. {{c1::$}} {{c2::Match end of string or just before newline}} 4. {{c1::*}} {{c2::Match 0 or more of the previous symbol}} 5. {{c1::+}} {{c2::Match 1 or more of the previous symbol}} 6. {{c1::?}} {{c2::Match 0 or 1 of the previous symbol}} 7. {{c1::*?, +?, ??}} {{c2::Non-greedy variants of the quantifiers}} 8. {{c1::{m,n} }} {{c2::Match between m and n copies of the previous symbol}} 9. {{c1::{m} }} {{c2::Match m copies of the previous symbol}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1861, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(4102), 2.5f, 2, "In Python regular expressions, the special characters are: 1. {{c1::.}} {{c2::Match anything except newline}} 2. {{c1::^}} {{c2::Match start of string}} 3. {{c1::$}} {{c2::Match end of string or just before newline}} 4. {{c1::*}} {{c2::Match 0 or more of the previous symbol}} 5. {{c1::+}} {{c2::Match 1 or more of the previous symbol}} 6. {{c1::?}} {{c2::Match 0 or 1 of the previous symbol}} 7. {{c1::*?, +?, ??}} {{c2::Non-greedy variants of the quantifiers}} 8. {{c1::{m,n} }} {{c2::Match between m and n copies of the previous symbol}} 9. {{c1::{m} }} {{c2::Match m copies of the previous symbol}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1862, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(4146), 2.5f, 2, "In Python regular expressions, the special characters are: 1. {{c1::.}} {{c2::Match anything except newline}} 2. {{c1::^}} {{c2::Match start of string}} 3. {{c1::$}} {{c2::Match end of string or just before newline}} 4. {{c1::*}} {{c2::Match 0 or more of the previous symbol}} 5. {{c1::+}} {{c2::Match 1 or more of the previous symbol}} 6. {{c1::?}} {{c2::Match 0 or 1 of the previous symbol}} 7. {{c1::*?, +?, ??}} {{c2::Non-greedy variants of the quantifiers}} 8. {{c1::{m,n} }} {{c2::Match between m and n copies of the previous symbol}} 9. {{c1::{m} }} {{c2::Match m copies of the previous symbol}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1889, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(1872), 2.5f, 2, "In EntityFramework Core, the DbContext holds {{c1::information required for EFC to configure the mapping from database tables to classes in C#}} and is {{c2::the object that is used to start queries against the database}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1888, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(1212), 2.5f, 2, "A second possible problem with O/RMs is that they {{c1::divorce you from the underlying SQL implementation}} and therefore you might not be aware {{c2::using an O/RM of the performance implications of the queries you are writing}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1887, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(1091), 2.5f, 2, "A second possible problem with O/RMs is that they {{c1::divorce you from the underlying SQL implementation}} and therefore you might not be aware {{c2::using an O/RM of the performance implications of the queries you are writing}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1886, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(487), 2.5f, 2, "{{c1::Object-relational impedance mismatch}} refers to the problem where {{c2::friction arises in mapping database entities to class instances because the data model in a database differs from that in standard software}}. {{c3::For example, databases use keys to enforce identity semantics, whereas instances are typically considered unique by the memory that they occupy.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1885, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(340), 2.5f, 2, "{{c1::Object-relational impedance mismatch}} refers to the problem where {{c2::friction arises in mapping database entities to class instances because the data model in a database differs from that in standard software}}. {{c3::For example, databases use keys to enforce identity semantics, whereas instances are typically considered unique by the memory that they occupy.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1884, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(195), 2.5f, 2, "{{c1::Object-relational impedance mismatch}} refers to the problem where {{c2::friction arises in mapping database entities to class instances because the data model in a database differs from that in standard software}}. {{c3::For example, databases use keys to enforce identity semantics, whereas instances are typically considered unique by the memory that they occupy.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1883, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(9644), 2.5f, 2, "On Windows you can type accents by using {{c1::modifier keys}}. For example, to type [moire] with the proper accent you can type the sequence {{c1::m o i r [Ctrl+'] e}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1882, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(9613), 2.5f, 2, "On Windows you can type accents by using {{c1::modifier keys}}. For example, to type [moire] with the proper accent you can type the sequence {{c1::m o i r [Ctrl+'] e}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1881, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(9060), 2.5f, 2, "{{c1::Test time augmentation (TTA)}} refers to {{c2::creating multiple versions of the test input using data augmentation and then ensembling over the predicted labels.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1880, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(8934), 2.5f, 2, "{{c1::Test time augmentation (TTA)}} refers to {{c2::creating multiple versions of the test input using data augmentation and then ensembling over the predicted labels.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1879, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(8397), 2.5f, 2, "To replace contents of a string with a regular expression you can use {{c1::1re.sub(pattern, repl, string, count=0, flags=0) }}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1878, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(7821), 2.5f, 2, "To retrieve groups from a match object you use {{c1::1Match.group([group1, ...]) }} but you should remember that {{c2::m.group(0) returns the full match.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1877, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(7777), 2.5f, 2, "To retrieve groups from a match object you use {{c1::1Match.group([group1, ...]) }} but you should remember that {{c2::m.group(0) returns the full match.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1876, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(7239), 2.5f, 2, "The difference between {{c1::re.findall}} and {{c1::re.finditer}} is that {{c2::re.findall returns a list of strings with the match contents while re.finditer returns an interator over match objects.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1875, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(7115), 2.5f, 2, "The difference between {{c1::re.findall}} and {{c1::re.finditer}} is that {{c2::re.findall returns a list of strings with the match contents while re.finditer returns an interator over match objects.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1874, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(7094), 2.5f, 2, "The difference between {{c1::re.findall}} and {{c1::re.finditer}} is that {{c2::re.findall returns a list of strings with the match contents while re.finditer returns an interator over match objects.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1873, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(6597), 2.5f, 2, "To split on a regular expression you can use {{c1::1re.split(r'\\W+', 'Words, words, words.') }}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1872, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(6056), 2.5f, 2, "The difference between {{c1::re.search}} and {{c1::re.match}} is that {{c2::re.match requires that a match begins at the start of the string}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1871, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(5985), 2.5f, 2, "The difference between {{c1::re.search}} and {{c1::re.match}} is that {{c2::re.match requires that a match begins at the start of the string}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1870, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(5935), 2.5f, 2, "The difference between {{c1::re.search}} and {{c1::re.match}} is that {{c2::re.match requires that a match begins at the start of the string}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1869, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(5465), 2.5f, 2, "To create a regular expression use {{c1::1prog = re.compile(pattern) }}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1868, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(4962), 2.5f, 2, "Inside a regex set, i.e. [], special characters {{c1::lose their meaning}}, and you can form the complement of the set with {{c2::^}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1867, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(4948), 2.5f, 2, "Inside a regex set, i.e. [], special characters {{c1::lose their meaning}}, and you can form the complement of the set with {{c2::^}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1866, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(4274), 2.5f, 2, "In Python regular expressions, the special characters are: 1. {{c1::.}} {{c2::Match anything except newline}} 2. {{c1::^}} {{c2::Match start of string}} 3. {{c1::$}} {{c2::Match end of string or just before newline}} 4. {{c1::*}} {{c2::Match 0 or more of the previous symbol}} 5. {{c1::+}} {{c2::Match 1 or more of the previous symbol}} 6. {{c1::?}} {{c2::Match 0 or 1 of the previous symbol}} 7. {{c1::*?, +?, ??}} {{c2::Non-greedy variants of the quantifiers}} 8. {{c1::{m,n} }} {{c2::Match between m and n copies of the previous symbol}} 9. {{c1::{m} }} {{c2::Match m copies of the previous symbol}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1865, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(4230), 2.5f, 2, "In Python regular expressions, the special characters are: 1. {{c1::.}} {{c2::Match anything except newline}} 2. {{c1::^}} {{c2::Match start of string}} 3. {{c1::$}} {{c2::Match end of string or just before newline}} 4. {{c1::*}} {{c2::Match 0 or more of the previous symbol}} 5. {{c1::+}} {{c2::Match 1 or more of the previous symbol}} 6. {{c1::?}} {{c2::Match 0 or 1 of the previous symbol}} 7. {{c1::*?, +?, ??}} {{c2::Non-greedy variants of the quantifiers}} 8. {{c1::{m,n} }} {{c2::Match between m and n copies of the previous symbol}} 9. {{c1::{m} }} {{c2::Match m copies of the previous symbol}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1864, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(4217), 2.5f, 2, "In Python regular expressions, the special characters are: 1. {{c1::.}} {{c2::Match anything except newline}} 2. {{c1::^}} {{c2::Match start of string}} 3. {{c1::$}} {{c2::Match end of string or just before newline}} 4. {{c1::*}} {{c2::Match 0 or more of the previous symbol}} 5. {{c1::+}} {{c2::Match 1 or more of the previous symbol}} 6. {{c1::?}} {{c2::Match 0 or 1 of the previous symbol}} 7. {{c1::*?, +?, ??}} {{c2::Non-greedy variants of the quantifiers}} 8. {{c1::{m,n} }} {{c2::Match between m and n copies of the previous symbol}} 9. {{c1::{m} }} {{c2::Match m copies of the previous symbol}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1863, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 898, DateTimeKind.Utc).AddTicks(4159), 2.5f, 2, "In Python regular expressions, the special characters are: 1. {{c1::.}} {{c2::Match anything except newline}} 2. {{c1::^}} {{c2::Match start of string}} 3. {{c1::$}} {{c2::Match end of string or just before newline}} 4. {{c1::*}} {{c2::Match 0 or more of the previous symbol}} 5. {{c1::+}} {{c2::Match 1 or more of the previous symbol}} 6. {{c1::?}} {{c2::Match 0 or 1 of the previous symbol}} 7. {{c1::*?, +?, ??}} {{c2::Non-greedy variants of the quantifiers}} 8. {{c1::{m,n} }} {{c2::Match between m and n copies of the previous symbol}} 9. {{c1::{m} }} {{c2::Match m copies of the previous symbol}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1891, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 899, DateTimeKind.Utc).AddTicks(2508), 2.5f, 2, "A {{c1::DbSet<T>}} property configures {{c2::EFC that there is a mapping between a particular C# class (T) and a database table with the name of the property}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1465, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(5359), 2.5f, 2, "{{c2::batch gradient methods}} are also called {{c1::deterministic gradient methods}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1709, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(5412), 2.5f, 2, "In the context of FRP and lenses, the lens laws are 1. {{c1::Get-Put}}: {{c2::If you modify something by changing a subpart to its original value, nothing happens}} 2. {{c1::Put-Get}}: {{c2::If you modify a subpart and then view it, you get back exactly that changed subpart}} 3. {{c1::Put-Put}}: {{c2::Writing twice is equivalent to just the second write operation}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1707, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(5308), 2.5f, 2, "In the context of FRP and lenses, the lens laws are 1. {{c1::Get-Put}}: {{c2::If you modify something by changing a subpart to its original value, nothing happens}} 2. {{c1::Put-Get}}: {{c2::If you modify a subpart and then view it, you get back exactly that changed subpart}} 3. {{c1::Put-Put}}: {{c2::Writing twice is equivalent to just the second write operation}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1553, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(2028), 2.5f, 2, "Empirically, the best learning rate is {{c1::usually somewhat larger}} than the optimal learning rate for the {{c2::first few epochs}}. This is an idea behind the {{c2::one cycle learning rate policy}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1552, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(2000), 2.5f, 2, "Empirically, the best learning rate is {{c1::usually somewhat larger}} than the optimal learning rate for the {{c2::first few epochs}}. This is an idea behind the {{c2::one cycle learning rate policy}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1551, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(1373), 2.5f, 2, "In order to avoid following very long paths in parameter space, we need either to {{c1::initialize well so we don't have much distance to travel}} or {{c2::use non-local optimization methods}} but at the current time only {{c1::the first of these is practical}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1550, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(1334), 2.5f, 2, "In order to avoid following very long paths in parameter space, we need either to {{c1::initialize well so we don't have much distance to travel}} or {{c2::use non-local optimization methods}} but at the current time only {{c1::the first of these is practical}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1549, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(1290), 2.5f, 2, "In order to avoid following very long paths in parameter space, we need either to {{c1::initialize well so we don't have much distance to travel}} or {{c2::use non-local optimization methods}} but at the current time only {{c1::the first of these is practical}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1548, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(674), 2.5f, 2, "Thinking about the path traversed by SGD is a deep way to consider improvements and heuristics we apply. For instance {{c1::gradient clipping}} can be considered as setting a {{c2::maximum velocity in the parameter space}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1547, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(623), 2.5f, 2, "Thinking about the path traversed by SGD is a deep way to consider improvements and heuristics we apply. For instance {{c1::gradient clipping}} can be considered as setting a {{c2::maximum velocity in the parameter space}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1546, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(25), 2.5f, 2, "Local structure can increase the {{c1::path in parameter space}} we are required to traverse in order to achieve a good solution.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1545, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 888, DateTimeKind.Utc).AddTicks(9462), 2.5f, 2, "A fundamental and difficult problem in the optimization of non-convex functions is that optimization methods see only {{c1::local structure}} and there should not be any guarantee of correspondence between {{c1::local and global structure}}. As an example of this consider {{c1::the Higgs mode tophat potential but put a symmetry breaking tiny linear term}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1544, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 888, DateTimeKind.Utc).AddTicks(9380), 2.5f, 2, "A fundamental and difficult problem in the optimization of non-convex functions is that optimization methods see only {{c1::local structure}} and there should not be any guarantee of correspondence between {{c1::local and global structure}}. As an example of this consider {{c1::the Higgs mode tophat potential but put a symmetry breaking tiny linear term}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1543, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 888, DateTimeKind.Utc).AddTicks(9341), 2.5f, 2, "A fundamental and difficult problem in the optimization of non-convex functions is that optimization methods see only {{c1::local structure}} and there should not be any guarantee of correspondence between {{c1::local and global structure}}. As an example of this consider {{c1::the Higgs mode tophat potential but put a symmetry breaking tiny linear term}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1542, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 888, DateTimeKind.Utc).AddTicks(8651), 2.5f, 2, "Even though the computational graphs for deep networks are long, they don't have the same {{c1::long term dependency problems as in RNNs}} because the {{c2::weight matrices we multiply are all different}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1554, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(2066), 2.5f, 2, "Empirically, the best learning rate is {{c1::usually somewhat larger}} than the optimal learning rate for the {{c2::first few epochs}}. This is an idea behind the {{c2::one cycle learning rate policy}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1541, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 888, DateTimeKind.Utc).AddTicks(8595), 2.5f, 2, "Even though the computational graphs for deep networks are long, they don't have the same {{c1::long term dependency problems as in RNNs}} because the {{c2::weight matrices we multiply are all different}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1539, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 888, DateTimeKind.Utc).AddTicks(7871), 2.5f, 2, "The {{c1::eigenvector associated to the largest eigenvalue}} is sometimes called the {{c2::principal eigenvector}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1538, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 888, DateTimeKind.Utc).AddTicks(7241), 2.5f, 2, "The {{c1::power method algorithm}} allows for estimating the {{c2::largest eigenvalue and the associated eigenvector}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1537, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 888, DateTimeKind.Utc).AddTicks(7182), 2.5f, 2, "The {{c1::power method algorithm}} allows for estimating the {{c2::largest eigenvalue and the associated eigenvector}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1536, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 888, DateTimeKind.Utc).AddTicks(6628), 2.5f, 2, "Long term dependencies in a computational graph can also cause problems in optimization, to see this, suppose there is a path that corresponds to multiplying by a weight $\\textbf{W}$ $t$ times. Then {{c1::$\\boldsymbol{W}^{t}=\\left(\\boldsymbol{V} \\operatorname{diag}(\\boldsymbol{\\lambda}) \\boldsymbol{V}^{-1}\\right)^{t}=\\boldsymbol{V} \\operatorname{diag}(\\boldsymbol{\\lambda})^{t} \\boldsymbol{V}^{-1}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1535, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 888, DateTimeKind.Utc).AddTicks(5589), 2.5f, 2, "At the level of architecture differences, {{c1::cliff structures}} are very common in {{c2::recurrent neural networks}} because {{c2::feedback causes many weights to get multiplied together many times}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1534, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 888, DateTimeKind.Utc).AddTicks(5517), 2.5f, 2, "At the level of architecture differences, {{c1::cliff structures}} are very common in {{c2::recurrent neural networks}} because {{c2::feedback causes many weights to get multiplied together many times}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1533, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 888, DateTimeKind.Utc).AddTicks(5482), 2.5f, 2, "At the level of architecture differences, {{c1::cliff structures}} are very common in {{c2::recurrent neural networks}} because {{c2::feedback causes many weights to get multiplied together many times}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1532, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 888, DateTimeKind.Utc).AddTicks(4944), 2.5f, 2, "If there are {{c1::cliffs}} in the loss function, sampling across them can {{c2::kick the parameters very far away}}. This can be circumvented by using {{c2::gradient clipping}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1531, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 888, DateTimeKind.Utc).AddTicks(4918), 2.5f, 2, "If there are {{c1::cliffs}} in the loss function, sampling across them can {{c2::kick the parameters very far away}}. This can be circumvented by using {{c2::gradient clipping}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1530, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 888, DateTimeKind.Utc).AddTicks(4873), 2.5f, 2, "If there are {{c1::cliffs}} in the loss function, sampling across them can {{c2::kick the parameters very far away}}. This can be circumvented by using {{c2::gradient clipping}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1529, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 888, DateTimeKind.Utc).AddTicks(4347), 2.5f, 2, "Although not a critical point, {{c1::plateaus in the cost function}} are very dangerous because {{c2::the gradient and Hessian approximately vanish}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1528, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 888, DateTimeKind.Utc).AddTicks(4256), 2.5f, 2, "Although not a critical point, {{c1::plateaus in the cost function}} are very dangerous because {{c2::the gradient and Hessian approximately vanish}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1540, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 888, DateTimeKind.Utc).AddTicks(7903), 2.5f, 2, "The {{c1::eigenvector associated to the largest eigenvalue}} is sometimes called the {{c2::principal eigenvector}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1555, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(2659), 2.5f, 2, "In optimization the {{c1::excess error}} is defined by {{c2::$J(\\theta)-\\min_\\theta J(\\theta)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1556, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(2702), 2.5f, 2, "In optimization the {{c1::excess error}} is defined by {{c2::$J(\\theta)-\\min_\\theta J(\\theta)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1557, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(3271), 2.5f, 2, "In convex optimization problems trained with SGD the excess error falls according to {{c1::$O(k^{-1/2})$}} and in very convex cases {{c1::$O(k^{-1})$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1584, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(2058), 2.5f, 2, "{{c1::Normalized initialization}} by {{c1::Glorot and Bengio (2010)}} suggests using (TeX) {{c2::$w_{ij}\\sim U(-\\frac{1}{\\sqrt{m} }, \\frac{1}{\\sqrt{m} })$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1583, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(2023), 2.5f, 2, "{{c1::Normalized initialization}} by {{c1::Glorot and Bengio (2010)}} suggests using (TeX) {{c2::$w_{ij}\\sim U(-\\frac{1}{\\sqrt{m} }, \\frac{1}{\\sqrt{m} })$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1582, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(1503), 2.5f, 2, "From the perspective of prior belief about interaction in our model, zero centering out weights suggests that {{c1::most units in the network do not interact with one another}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1581, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(847), 2.5f, 2, "From the perspective of the activations, we set weights so that {{c1::the distribution of activations is essentially the same across layers}}. Setting larger weights better breaks {{c2::symmetry}} but {{c2::causes exploding activation and gradients if too large}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1580, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(786), 2.5f, 2, "From the perspective of the activations, we set weights so that {{c1::the distribution of activations is essentially the same across layers}}. Setting larger weights better breaks {{c2::symmetry}} but {{c2::causes exploding activation and gradients if too large}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1579, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(767), 2.5f, 2, "From the perspective of the activations, we set weights so that {{c1::the distribution of activations is essentially the same across layers}}. Setting larger weights better breaks {{c2::symmetry}} but {{c2::causes exploding activation and gradients if too large}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1578, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(141), 2.5f, 2, "While the exact {{c1::distribution of weights}} appears not to matter too much, the {{c2::scale of the distribution matters a lot}} on both the {{c2::optimization outcome and how the model generalizes}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1577, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(43), 2.5f, 2, "While the exact {{c1::distribution of weights}} appears not to matter too much, the {{c2::scale of the distribution matters a lot}} on both the {{c2::optimization outcome and how the model generalizes}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1576, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(9992), 2.5f, 2, "While the exact {{c1::distribution of weights}} appears not to matter too much, the {{c2::scale of the distribution matters a lot}} on both the {{c2::optimization outcome and how the model generalizes}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1575, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(9463), 2.5f, 2, "From a linear algebra perpsective, random initialization of weight matrices tries to achieve {{c1::zero dimensional nullspaces so that features propagate through the network}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1574, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(8836), 2.5f, 2, "Most parameter initialization strategies attempt to achieve {{c1::some good behavior of the model at $t_0$, i.e. before any data is seen}}. Additionally, our initialization should always break {{c1::weight space symmetry}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1573, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(8803), 2.5f, 2, "Most parameter initialization strategies attempt to achieve {{c1::some good behavior of the model at $t_0$, i.e. before any data is seen}}. Additionally, our initialization should always break {{c1::weight space symmetry}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1572, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(8024), 2.5f, 2, "Nesterov momentum refers to using the update rule {{c1::$\\begin{array}{l}\\boldsymbol{v} \\leftarrow \\alpha \\boldsymbol{v}-\\epsilon \\nabla_{\\boldsymbol{\\theta} }\\left[\\frac{1}{m} \\sum_{i=1}^{m} L\\left(\\boldsymbol{f}\\left(\\boldsymbol{x}^{(i)} ; \\boldsymbol{\\theta}+\\alpha \\boldsymbol{v}\\right), \\boldsymbol{y}^{(i)}\\right)\\right] \\\\\\boldsymbol{\\theta} \\leftarrow \\boldsymbol{\\theta}+\\boldsymbol{v}\\end{array}$}} this differs from the standard momentum formulation by {{c2::evaluating the gradient at the point $\\theta + \\alpha v$}}. You can think about this as incorporating {{c2::some information from the Hessian, heuristically}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1571, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(7968), 2.5f, 2, "Nesterov momentum refers to using the update rule {{c1::$\\begin{array}{l}\\boldsymbol{v} \\leftarrow \\alpha \\boldsymbol{v}-\\epsilon \\nabla_{\\boldsymbol{\\theta} }\\left[\\frac{1}{m} \\sum_{i=1}^{m} L\\left(\\boldsymbol{f}\\left(\\boldsymbol{x}^{(i)} ; \\boldsymbol{\\theta}+\\alpha \\boldsymbol{v}\\right), \\boldsymbol{y}^{(i)}\\right)\\right] \\\\\\boldsymbol{\\theta} \\leftarrow \\boldsymbol{\\theta}+\\boldsymbol{v}\\end{array}$}} this differs from the standard momentum formulation by {{c2::evaluating the gradient at the point $\\theta + \\alpha v$}}. You can think about this as incorporating {{c2::some information from the Hessian, heuristically}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1570, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(7901), 2.5f, 2, "Nesterov momentum refers to using the update rule {{c1::$\\begin{array}{l}\\boldsymbol{v} \\leftarrow \\alpha \\boldsymbol{v}-\\epsilon \\nabla_{\\boldsymbol{\\theta} }\\left[\\frac{1}{m} \\sum_{i=1}^{m} L\\left(\\boldsymbol{f}\\left(\\boldsymbol{x}^{(i)} ; \\boldsymbol{\\theta}+\\alpha \\boldsymbol{v}\\right), \\boldsymbol{y}^{(i)}\\right)\\right] \\\\\\boldsymbol{\\theta} \\leftarrow \\boldsymbol{\\theta}+\\boldsymbol{v}\\end{array}$}} this differs from the standard momentum formulation by {{c2::evaluating the gradient at the point $\\theta + \\alpha v$}}. You can think about this as incorporating {{c2::some information from the Hessian, heuristically}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1569, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(6622), 2.5f, 2, "When scheduling momentum hyperparameters, they should be {{c1::small}} initially.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1568, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(6140), 2.5f, 2, "When using momentum, it is common to set $\\alpha$ in between {{c1::0.5 and 0.99}} or even allowing {{c1::momentum scheduling}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1567, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(6110), 2.5f, 2, "When using momentum, it is common to set $\\alpha$ in between {{c1::0.5 and 0.99}} or even allowing {{c1::momentum scheduling}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1566, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(5568), 2.5f, 2, "In the method of momentum we use the update rule $\\begin{array}{l}\\boldsymbol{v} \\leftarrow \\alpha \\boldsymbol{v}-\\epsilon \\nabla_{\\boldsymbol{\\theta} }\\left(\\frac{1}{m} \\sum_{i=1}^{m} L\\left(\\boldsymbol{f}\\left(\\boldsymbol{x}^{(i)} ; \\boldsymbol{\\theta}\\right), \\boldsymbol{y}^{(i)}\\right)\\right) \\\\\\boldsymbol{\\theta} \\leftarrow \\boldsymbol{\\theta}+\\boldsymbol{v}\\end{array}$ we can think of this as setting an importance of prior gradients ({{c1::$\\alpha/\\epsilon$}}) and a terminal velocity {{c2::$\\frac{\\epsilon|| \\boldsymbol{g}||}{1-\\alpha}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1565, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(5512), 2.5f, 2, "In the method of momentum we use the update rule $\\begin{array}{l}\\boldsymbol{v} \\leftarrow \\alpha \\boldsymbol{v}-\\epsilon \\nabla_{\\boldsymbol{\\theta} }\\left(\\frac{1}{m} \\sum_{i=1}^{m} L\\left(\\boldsymbol{f}\\left(\\boldsymbol{x}^{(i)} ; \\boldsymbol{\\theta}\\right), \\boldsymbol{y}^{(i)}\\right)\\right) \\\\\\boldsymbol{\\theta} \\leftarrow \\boldsymbol{\\theta}+\\boldsymbol{v}\\end{array}$ we can think of this as setting an importance of prior gradients ({{c1::$\\alpha/\\epsilon$}}) and a terminal velocity {{c2::$\\frac{\\epsilon|| \\boldsymbol{g}||}{1-\\alpha}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1564, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(4908), 2.5f, 2, "The {{c1::method of momentum}} developed by {{c1::Polyak (1964)}} uses an {{c2::exponentially decaying memory of past gradients}}. Mathematically this means using the update rule {{c2::$\\begin{array}{l}\\boldsymbol{v} \\leftarrow \\alpha \\boldsymbol{v}-\\epsilon \\nabla_{\\boldsymbol{\\theta} }\\left(\\frac{1}{m} \\sum_{i=1}^{m} L\\left(\\boldsymbol{f}\\left(\\boldsymbol{x}^{(i)} ; \\boldsymbol{\\theta}\\right), \\boldsymbol{y}^{(i)}\\right)\\right) \\\\\\boldsymbol{\\theta} \\leftarrow \\boldsymbol{\\theta}+\\boldsymbol{v}\\end{array}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1563, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(4578), 2.5f, 2, "The {{c1::method of momentum}} developed by {{c1::Polyak (1964)}} uses an {{c2::exponentially decaying memory of past gradients}}. Mathematically this means using the update rule {{c2::$\\begin{array}{l}\\boldsymbol{v} \\leftarrow \\alpha \\boldsymbol{v}-\\epsilon \\nabla_{\\boldsymbol{\\theta} }\\left(\\frac{1}{m} \\sum_{i=1}^{m} L\\left(\\boldsymbol{f}\\left(\\boldsymbol{x}^{(i)} ; \\boldsymbol{\\theta}\\right), \\boldsymbol{y}^{(i)}\\right)\\right) \\\\\\boldsymbol{\\theta} \\leftarrow \\boldsymbol{\\theta}+\\boldsymbol{v}\\end{array}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1562, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(4489), 2.5f, 2, "The {{c1::method of momentum}} developed by {{c1::Polyak (1964)}} uses an {{c2::exponentially decaying memory of past gradients}}. Mathematically this means using the update rule {{c2::$\\begin{array}{l}\\boldsymbol{v} \\leftarrow \\alpha \\boldsymbol{v}-\\epsilon \\nabla_{\\boldsymbol{\\theta} }\\left(\\frac{1}{m} \\sum_{i=1}^{m} L\\left(\\boldsymbol{f}\\left(\\boldsymbol{x}^{(i)} ; \\boldsymbol{\\theta}\\right), \\boldsymbol{y}^{(i)}\\right)\\right) \\\\\\boldsymbol{\\theta} \\leftarrow \\boldsymbol{\\theta}+\\boldsymbol{v}\\end{array}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1561, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(4464), 2.5f, 2, "The {{c1::method of momentum}} developed by {{c1::Polyak (1964)}} uses an {{c2::exponentially decaying memory of past gradients}}. Mathematically this means using the update rule {{c2::$\\begin{array}{l}\\boldsymbol{v} \\leftarrow \\alpha \\boldsymbol{v}-\\epsilon \\nabla_{\\boldsymbol{\\theta} }\\left(\\frac{1}{m} \\sum_{i=1}^{m} L\\left(\\boldsymbol{f}\\left(\\boldsymbol{x}^{(i)} ; \\boldsymbol{\\theta}\\right), \\boldsymbol{y}^{(i)}\\right)\\right) \\\\\\boldsymbol{\\theta} \\leftarrow \\boldsymbol{\\theta}+\\boldsymbol{v}\\end{array}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1560, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(3875), 2.5f, 2, "In the SGD context, the {{c1::Cramer-Rao}} bound allows us to put limits on how fast the {{c2::generalization error falls: not faster than $O(k^{-1})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1559, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(3808), 2.5f, 2, "In the SGD context, the {{c1::Cramer-Rao}} bound allows us to put limits on how fast the {{c2::generalization error falls: not faster than $O(k^{-1})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1558, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 889, DateTimeKind.Utc).AddTicks(3295), 2.5f, 2, "In convex optimization problems trained with SGD the excess error falls according to {{c1::$O(k^{-1/2})$}} and in very convex cases {{c1::$O(k^{-1})$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1527, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 888, DateTimeKind.Utc).AddTicks(3653), 2.5f, 2, "{{c1::Second order methods like Newton's method}} have a hard time with the critical landscapes of DNNs because they {{c2::are attracted to critical points}}. New approaches like {{c2::saddle-free Newton's method (Dauphin et al. (2014))}} are promising though.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1585, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(2152), 2.5f, 2, "{{c1::Normalized initialization}} by {{c1::Glorot and Bengio (2010)}} suggests using (TeX) {{c2::$w_{ij}\\sim U(-\\frac{1}{\\sqrt{m} }, \\frac{1}{\\sqrt{m} })$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1526, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 888, DateTimeKind.Utc).AddTicks(3595), 2.5f, 2, "{{c1::Second order methods like Newton's method}} have a hard time with the critical landscapes of DNNs because they {{c2::are attracted to critical points}}. New approaches like {{c2::saddle-free Newton's method (Dauphin et al. (2014))}} are promising though.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1524, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 888, DateTimeKind.Utc).AddTicks(2914), 2.5f, 2, "One reason SGD fares so well in deep learning problems is that if we consider the critical landscape, {{c1::SGD does not have an issue escaping from saddle points, eventually}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1492, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 887, DateTimeKind.Utc).AddTicks(1235), 2.5f, 2, "Solving convex optimization problems can still be difficult if {{c1::the objective is ill-conditioned}}. The way this arises most prominently is in {{c1::ill-conditioning of the Hessian}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1491, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 887, DateTimeKind.Utc).AddTicks(1194), 2.5f, 2, "Solving convex optimization problems can still be difficult if {{c1::the objective is ill-conditioned}}. The way this arises most prominently is in {{c1::ill-conditioning of the Hessian}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1490, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 887, DateTimeKind.Utc).AddTicks(637), 2.5f, 2, "In we only {{c1::train for one epoch}} it is impossible for our model to {{c2::overfit the training data}}. This is an especially valuable observation in the context of {{c2::online learning}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1489, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 887, DateTimeKind.Utc).AddTicks(612), 2.5f, 2, "In we only {{c1::train for one epoch}} it is impossible for our model to {{c2::overfit the training data}}. This is an especially valuable observation in the context of {{c2::online learning}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1488, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 887, DateTimeKind.Utc).AddTicks(575), 2.5f, 2, "In we only {{c1::train for one epoch}} it is impossible for our model to {{c2::overfit the training data}}. This is an especially valuable observation in the context of {{c2::online learning}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1487, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(9987), 2.5f, 2, "Only the {{c1::first epoch}} of SGD provides an {{c2::unbiased estimate of the gradient}} but in practice {{c2::this doesn't matter too much}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1486, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(9952), 2.5f, 2, "Only the {{c1::first epoch}} of SGD provides an {{c2::unbiased estimate of the gradient}} but in practice {{c2::this doesn't matter too much}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1485, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(9909), 2.5f, 2, "Only the {{c1::first epoch}} of SGD provides an {{c2::unbiased estimate of the gradient}} but in practice {{c2::this doesn't matter too much}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1484, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(9387), 2.5f, 2, "Minibatches should be chosen {{c1::randomly}} to avoid {{c1::the minibatch providing a biased estimate of the gradient direction}}. Typically we can get away with {{c1::shuffling the data once}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1483, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(9356), 2.5f, 2, "Minibatches should be chosen {{c1::randomly}} to avoid {{c1::the minibatch providing a biased estimate of the gradient direction}}. Typically we can get away with {{c1::shuffling the data once}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1482, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(9280), 2.5f, 2, "Minibatches should be chosen {{c1::randomly}} to avoid {{c1::the minibatch providing a biased estimate of the gradient direction}}. Typically we can get away with {{c1::shuffling the data once}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1481, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(8738), 2.5f, 2, "If we are using second order optimization methods, our batch sizes should {{c1::be much larger, often in the realm of 10000 examples}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1493, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 887, DateTimeKind.Utc).AddTicks(2085), 2.5f, 2, "If the Hessian is ill-conditioned we can run into problems even when using SGD, mathematically this is because the loss changes by {{c1::$\\frac{1}{2} \\epsilon^{2} \\boldsymbol{g}^{\\top} \\boldsymbol{H} \\boldsymbol{g}-\\epsilon \\boldsymbol{g}^{\\top} \\boldsymbol{g}$}} so if {{c1::$\\frac{1}{2}\\epsilon^2\\boldsymbol{g}^\\intercal\\boldsymbol{Hg}>\\epsilon\\boldsymbol{g}^\\intercal\\boldsymbol{g}$}} the loss will increase!", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1480, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(8183), 2.5f, 2, "By the {{c1::gradient noise scale}} we mean to refer to {{c2::the variation between gradient estimates offered by single training examples}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1478, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(7511), 2.5f, 2, "In distributed SGD, we can keep a picture in mind which connects {{c1::batch size}} and {{c1::the gradient noise scale}} This picture is {{c2::}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1477, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(7503), 2.5f, 2, "In distributed SGD, we can keep a picture in mind which connects {{c1::batch size}} and {{c1::the gradient noise scale}} This picture is {{c2::}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1476, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(7470), 2.5f, 2, "In distributed SGD, we can keep a picture in mind which connects {{c1::batch size}} and {{c1::the gradient noise scale}} This picture is {{c2::}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1475, 6, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(6886), 2.5f, 2, "Batch size is driven by: 1. Large batches are better but {{c1::with sublinear returns}} 2. Multicore architectures {{c2::are better served by larger batches}} 3. When GPUs are used {{c3::the entire batch and model should fit in memory}} 4. Power of {{c4::2 batch sizes empirically perform better, especially on GPUs}} 5. Small batches offer a {{c5::regularizing effect}} because {{c5::they add noise to the parameter exploration process}}. 6. Batches may be made virtually larger by {{c6::distributed SGD}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1474, 5, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(6863), 2.5f, 2, "Batch size is driven by: 1. Large batches are better but {{c1::with sublinear returns}} 2. Multicore architectures {{c2::are better served by larger batches}} 3. When GPUs are used {{c3::the entire batch and model should fit in memory}} 4. Power of {{c4::2 batch sizes empirically perform better, especially on GPUs}} 5. Small batches offer a {{c5::regularizing effect}} because {{c5::they add noise to the parameter exploration process}}. 6. Batches may be made virtually larger by {{c6::distributed SGD}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1473, 5, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(6806), 2.5f, 2, "Batch size is driven by: 1. Large batches are better but {{c1::with sublinear returns}} 2. Multicore architectures {{c2::are better served by larger batches}} 3. When GPUs are used {{c3::the entire batch and model should fit in memory}} 4. Power of {{c4::2 batch sizes empirically perform better, especially on GPUs}} 5. Small batches offer a {{c5::regularizing effect}} because {{c5::they add noise to the parameter exploration process}}. 6. Batches may be made virtually larger by {{c6::distributed SGD}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1472, 4, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(6775), 2.5f, 2, "Batch size is driven by: 1. Large batches are better but {{c1::with sublinear returns}} 2. Multicore architectures {{c2::are better served by larger batches}} 3. When GPUs are used {{c3::the entire batch and model should fit in memory}} 4. Power of {{c4::2 batch sizes empirically perform better, especially on GPUs}} 5. Small batches offer a {{c5::regularizing effect}} because {{c5::they add noise to the parameter exploration process}}. 6. Batches may be made virtually larger by {{c6::distributed SGD}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1471, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(6662), 2.5f, 2, "Batch size is driven by: 1. Large batches are better but {{c1::with sublinear returns}} 2. Multicore architectures {{c2::are better served by larger batches}} 3. When GPUs are used {{c3::the entire batch and model should fit in memory}} 4. Power of {{c4::2 batch sizes empirically perform better, especially on GPUs}} 5. Small batches offer a {{c5::regularizing effect}} because {{c5::they add noise to the parameter exploration process}}. 6. Batches may be made virtually larger by {{c6::distributed SGD}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1470, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(6608), 2.5f, 2, "Batch size is driven by: 1. Large batches are better but {{c1::with sublinear returns}} 2. Multicore architectures {{c2::are better served by larger batches}} 3. When GPUs are used {{c3::the entire batch and model should fit in memory}} 4. Power of {{c4::2 batch sizes empirically perform better, especially on GPUs}} 5. Small batches offer a {{c5::regularizing effect}} because {{c5::they add noise to the parameter exploration process}}. 6. Batches may be made virtually larger by {{c6::distributed SGD}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1469, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(6561), 2.5f, 2, "Batch size is driven by: 1. Large batches are better but {{c1::with sublinear returns}} 2. Multicore architectures {{c2::are better served by larger batches}} 3. When GPUs are used {{c3::the entire batch and model should fit in memory}} 4. Power of {{c4::2 batch sizes empirically perform better, especially on GPUs}} 5. Small batches offer a {{c5::regularizing effect}} because {{c5::they add noise to the parameter exploration process}}. 6. Batches may be made virtually larger by {{c6::distributed SGD}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1468, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(5967), 2.5f, 2, "Optimization methods that use only a small sample to make an update are called {{c1::stochastic}} or {{c2::online}} methods.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1467, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(5950), 2.5f, 2, "Optimization methods that use only a small sample to make an update are called {{c1::stochastic}} or {{c2::online}} methods.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1479, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 886, DateTimeKind.Utc).AddTicks(8097), 2.5f, 2, "By the {{c1::gradient noise scale}} we mean to refer to {{c2::the variation between gradient estimates offered by single training examples}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1494, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 887, DateTimeKind.Utc).AddTicks(2203), 2.5f, 2, "If the Hessian is ill-conditioned we can run into problems even when using SGD, mathematically this is because the loss changes by {{c1::$\\frac{1}{2} \\epsilon^{2} \\boldsymbol{g}^{\\top} \\boldsymbol{H} \\boldsymbol{g}-\\epsilon \\boldsymbol{g}^{\\top} \\boldsymbol{g}$}} so if {{c1::$\\frac{1}{2}\\epsilon^2\\boldsymbol{g}^\\intercal\\boldsymbol{Hg}>\\epsilon\\boldsymbol{g}^\\intercal\\boldsymbol{g}$}} the loss will increase!", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1495, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 887, DateTimeKind.Utc).AddTicks(2795), 2.5f, 2, "We can still detect {{c1::ill-conditioning of the Hessian}} by monitoring {{c2::our gradient step size and the empirical variation in the loss}} as we perform SGD.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1496, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 887, DateTimeKind.Utc).AddTicks(2867), 2.5f, 2, "We can still detect {{c1::ill-conditioning of the Hessian}} by monitoring {{c2::our gradient step size and the empirical variation in the loss}} as we perform SGD.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1523, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 888, DateTimeKind.Utc).AddTicks(2286), 2.5f, 2, "Recent work by {{c1::Dauphin et al. (2014) and Choromanska et al. (2014)}} provide support for the belief that {{c2::saddle points are the predominate critical points in NN cost functions}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1522, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 888, DateTimeKind.Utc).AddTicks(2207), 2.5f, 2, "Recent work by {{c1::Dauphin et al. (2014) and Choromanska et al. (2014)}} provide support for the belief that {{c2::saddle points are the predominate critical points in NN cost functions}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1521, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 888, DateTimeKind.Utc).AddTicks(1598), 2.5f, 2, "{{c1::Baldi and Hornik (1989)}} showed that {{c2::shallow autoencoders actually have no local minima at all}} and empirically {{c2::this appears to be the case with deeper networks as well}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1520, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 888, DateTimeKind.Utc).AddTicks(1534), 2.5f, 2, "{{c1::Baldi and Hornik (1989)}} showed that {{c2::shallow autoencoders actually have no local minima at all}} and empirically {{c2::this appears to be the case with deeper networks as well}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1519, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 888, DateTimeKind.Utc).AddTicks(1430), 2.5f, 2, "{{c1::Baldi and Hornik (1989)}} showed that {{c2::shallow autoencoders actually have no local minima at all}} and empirically {{c2::this appears to be the case with deeper networks as well}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1518, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 888, DateTimeKind.Utc).AddTicks(806), 2.5f, 2, "{{c1::Saddle points}} dominate the critical landscape of high dimensional functions because {{c2::the Hessian needs to have only two eigenvalues with opposite sign}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1517, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 888, DateTimeKind.Utc).AddTicks(731), 2.5f, 2, "{{c1::Saddle points}} dominate the critical landscape of high dimensional functions because {{c2::the Hessian needs to have only two eigenvalues with opposite sign}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1516, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 888, DateTimeKind.Utc).AddTicks(210), 2.5f, 2, "Moderate to high-cost critical points are much more likely to be {{c1::saddle points}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1515, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 887, DateTimeKind.Utc).AddTicks(9648), 2.5f, 2, "Because of the {{c1::bias in eigenvalues of the Hessian near minima}}, for a random function {{c2::most local minima are not far in cost from the global minima}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1514, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 887, DateTimeKind.Utc).AddTicks(9580), 2.5f, 2, "Because of the {{c1::bias in eigenvalues of the Hessian near minima}}, for a random function {{c2::most local minima are not far in cost from the global minima}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1513, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 887, DateTimeKind.Utc).AddTicks(9012), 2.5f, 2, "Random functions exhibit the property that {{c1::the eigenvalues are biased toward positive values}} as we approach {{c2::the function minimum}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1512, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 887, DateTimeKind.Utc).AddTicks(8981), 2.5f, 2, "Random functions exhibit the property that {{c1::the eigenvalues are biased toward positive values}} as we approach {{c2::the function minimum}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1511, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 887, DateTimeKind.Utc).AddTicks(8374), 2.5f, 2, "People often say that NNs have many {{c1::local minima}} while this is true, they don't have {{c2::that many in practice}}, especially compared to {{c2::saddle points}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1510, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 887, DateTimeKind.Utc).AddTicks(8353), 2.5f, 2, "People often say that NNs have many {{c1::local minima}} while this is true, they don't have {{c2::that many in practice}}, especially compared to {{c2::saddle points}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1509, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 887, DateTimeKind.Utc).AddTicks(8320), 2.5f, 2, "People often say that NNs have many {{c1::local minima}} while this is true, they don't have {{c2::that many in practice}}, especially compared to {{c2::saddle points}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1508, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 887, DateTimeKind.Utc).AddTicks(7829), 2.5f, 2, "If parameter symmetries were the only problem we dealt with in optimizing deep models we would be happy because {{c1::the local minimum be a global minimum and optimization methods would still work}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1507, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 887, DateTimeKind.Utc).AddTicks(7100), 2.5f, 2, "From the perspective of {{c1::model identifiability}} weight decay on NNs is nice because {{c2::it breaks scaling symmetry}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1506, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 887, DateTimeKind.Utc).AddTicks(7062), 2.5f, 2, "From the perspective of {{c1::model identifiability}} weight decay on NNs is nice because {{c2::it breaks scaling symmetry}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1505, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 887, DateTimeKind.Utc).AddTicks(6386), 2.5f, 2, "In addition to weight space symmetry, another clear symmetry in NNs is {{c1::scaling incoming weighs and biases and outgoing weights by reciprocal amounts}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1504, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 887, DateTimeKind.Utc).AddTicks(5754), 2.5f, 2, "{{c1::Weight space symmetry}} refers to how {{c2::exchange of neurons in the same layer together with all of the incoming and outgoing weights results in an identical model}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1503, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 887, DateTimeKind.Utc).AddTicks(5626), 2.5f, 2, "{{c1::Weight space symmetry}} refers to how {{c2::exchange of neurons in the same layer together with all of the incoming and outgoing weights results in an identical model}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1502, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 887, DateTimeKind.Utc).AddTicks(5137), 2.5f, 2, "Deep learning models are not {{c1::identifiable}}, one pernicious way that this happens is via {{c2::weight space symmetry}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1501, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 887, DateTimeKind.Utc).AddTicks(5105), 2.5f, 2, "Deep learning models are not {{c1::identifiable}}, one pernicious way that this happens is via {{c2::weight space symmetry}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1500, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 887, DateTimeKind.Utc).AddTicks(4614), 2.5f, 2, "Deep learning cost functions have many critical points because they are {{c1::non-convex}} and because there are many {{c2::model symmetries}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1499, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 887, DateTimeKind.Utc).AddTicks(4587), 2.5f, 2, "Deep learning cost functions have many critical points because they are {{c1::non-convex}} and because there are many {{c2::model symmetries}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1498, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 887, DateTimeKind.Utc).AddTicks(4097), 2.5f, 2, "Non-convex problems can have many {{c1::critical points}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1497, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 887, DateTimeKind.Utc).AddTicks(3537), 2.5f, 2, "Convex functions have a single {{c1::critical point or critical region consisting of the solution to the problem}}. The converse is not true though.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1525, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 888, DateTimeKind.Utc).AddTicks(3551), 2.5f, 2, "{{c1::Second order methods like Newton's method}} have a hard time with the critical landscapes of DNNs because they {{c2::are attracted to critical points}}. New approaches like {{c2::saddle-free Newton's method (Dauphin et al. (2014))}} are promising though.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1708, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(5323), 2.5f, 2, "In the context of FRP and lenses, the lens laws are 1. {{c1::Get-Put}}: {{c2::If you modify something by changing a subpart to its original value, nothing happens}} 2. {{c1::Put-Get}}: {{c2::If you modify a subpart and then view it, you get back exactly that changed subpart}} 3. {{c1::Put-Put}}: {{c2::Writing twice is equivalent to just the second write operation}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1586, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(2753), 2.5f, 2, "Normalized initialization can be thought of as compromise between desiring that {{c1::all layers have the same activation variance}} and wanting them also to have {{c2::the same gradient variance}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1588, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(3410), 2.5f, 2, "In initialization, {{c1::Saxe et al. (2013)}} recommend using {{c2::random orthogonal matrices with a gain factor $g$ that accounts for the nonlinear activation}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1675, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 893, DateTimeKind.Utc).AddTicks(7868), 2.5f, 2, "Serializers are not themselves responsible for the translation into JSON for instance because {{c1::there are many possible target formats}} this is handled by {{c1::Renderers}} such as {{c1::rest_framework.renderers.JSONRenderer}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1674, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 893, DateTimeKind.Utc).AddTicks(7811), 2.5f, 2, "Serializers are not themselves responsible for the translation into JSON for instance because {{c1::there are many possible target formats}} this is handled by {{c1::Renderers}} such as {{c1::rest_framework.renderers.JSONRenderer}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1673, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 893, DateTimeKind.Utc).AddTicks(7221), 2.5f, 2, "Suppose we had a simple model 1 2 3 4 5 6 7 8 9from datetime import datetime class Comment: def __init__(self, email, content, created=None): self.email = email self.content = content self.created = created or datetime.now() comment = Comment(email='leila@example.com', content='foo bar') What would the serializer for this class look like (with imports)?", new TimeSpan(0, 0, 10, 0, 0), 2, "1 2 3 4 5 6from rest_framework import serializers class CommentSerializer(serializers.Serializer): email = serializers.EmailField() content = serializers.CharField(max_length=200) created = serializers.DateTimeField()" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1672, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 893, DateTimeKind.Utc).AddTicks(6782), 2.5f, 2, "Serializers are a bit weirdly named because they also {{c1::provide deserialization of data to Python instances}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1671, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 893, DateTimeKind.Utc).AddTicks(6211), 2.5f, 2, "Serializers are capable of handling {{c1::querysets}} and {{c2::model instances}} when converting from Python to wire formats", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1670, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 893, DateTimeKind.Utc).AddTicks(6186), 2.5f, 2, "Serializers are capable of handling {{c1::querysets}} and {{c2::model instances}} when converting from Python to wire formats", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1669, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 893, DateTimeKind.Utc).AddTicks(5674), 2.5f, 2, "The principal purpose of a Serializer in DRF is to {{c1::convert native Python data into data that can be trasnmitted over the wire like JSON, XML, or other content types or back}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1668, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 893, DateTimeKind.Utc).AddTicks(4978), 2.5f, 2, "At a very high level in DRF: Serializers {{c1::define the API representation}} ViewSets {{c2::define the view behavior}} Routers {{c3:automatically define the URL configuration}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1667, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 893, DateTimeKind.Utc).AddTicks(4944), 2.5f, 2, "At a very high level in DRF: Serializers {{c1::define the API representation}} ViewSets {{c2::define the view behavior}} Routers {{c3:automatically define the URL configuration}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1666, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 893, DateTimeKind.Utc).AddTicks(4387), 2.5f, 2, "Global settings for DRF are kept in {{c1::settings.py:REST_FRAMEWORK}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1665, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 893, DateTimeKind.Utc).AddTicks(3912), 2.5f, 2, "\"You should make \"\"applications\"\" for a Django project from [outside/within] {{c1::within}} the container folder. If you wanted to make an app called \"\"polls\"\" you could use {{c1::1python manage.py startapp polls }}\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1664, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 893, DateTimeKind.Utc).AddTicks(3866), 2.5f, 2, "\"You should make \"\"applications\"\" for a Django project from [outside/within] {{c1::within}} the container folder. If you wanted to make an app called \"\"polls\"\" you could use {{c1::1python manage.py startapp polls }}\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1676, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 893, DateTimeKind.Utc).AddTicks(7913), 2.5f, 2, "Serializers are not themselves responsible for the translation into JSON for instance because {{c1::there are many possible target formats}} this is handled by {{c1::Renderers}} such as {{c1::rest_framework.renderers.JSONRenderer}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1663, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 893, DateTimeKind.Utc).AddTicks(3383), 2.5f, 2, "To run a django app on port 8080 you could use {{c1::1 python manage.py runserver 8080 }}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1661, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 893, DateTimeKind.Utc).AddTicks(2853), 2.5f, 2, "The outermost directory in a Django project is just {{c1::a container for the project}} and [can/cannot] {{c1::can}} be renamed.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1660, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 893, DateTimeKind.Utc).AddTicks(2349), 2.5f, 2, "\"You can create an application called \"\"mysite\"\" in Django with {{c1::1django-admin startproject mysite }}\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1659, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 893, DateTimeKind.Utc).AddTicks(1843), 2.5f, 2, "To get the arguments to a Python program you can use {{c1::sys.argv}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1658, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 893, DateTimeKind.Utc).AddTicks(1327), 2.5f, 2, "To remove an entire directory tree in Python you can use {{c1::1 2import shutil shutil.rmtree(path, ignore_errors=False, onerror=my_handler) }}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1657, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 893, DateTimeKind.Utc).AddTicks(742), 2.5f, 2, "The difference between shutil.copy and {{c1::shutil.copy2}} is that the latter tries to {{c2::also preserve file metadata}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1656, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 893, DateTimeKind.Utc).AddTicks(704), 2.5f, 2, "The difference between shutil.copy and {{c1::shutil.copy2}} is that the latter tries to {{c2::also preserve file metadata}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1655, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 893, DateTimeKind.Utc).AddTicks(214), 2.5f, 2, "\"To copy a file you can use {{c1::1 2import shutil shutil.copyfile(\"\"a.db\"\", \"\"backup.db\"\") }}\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1654, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 892, DateTimeKind.Utc).AddTicks(9668), 2.5f, 2, "\"To move a file in Python you should {{c1::1 2import shutil shutil.move(\"\"first/location/file.txt\"\", \"\"second/file.txt\"\") }}\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1653, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 892, DateTimeKind.Utc).AddTicks(9052), 2.5f, 2, "In order to adjust learning rates on every epoch we might use code like {{c1::1 2 3 4 5scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=1, gamma=0.1) for epoch in range(100): train(...) validate(...) scheduler.step() }}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1652, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 892, DateTimeKind.Utc).AddTicks(8306), 2.5f, 2, "Given a model to construct an Adadelta optimizer and perform one step according to the gradients on the parameters we can use {{c1::1 2opt = optim.Adadelta(model.parameters(), ...) opt.step() }}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1651, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 892, DateTimeKind.Utc).AddTicks(7717), 2.5f, 2, "To get a ReLU layer you can use {{c1::1nn.ReLU }}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1650, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 892, DateTimeKind.Utc).AddTicks(7243), 2.5f, 2, "To make a dropout layer and apply it to a 20x16 tensor {{c1::1 2 3drop = nn.Dropout(p=0.5, inplace=False) x = torch.Tensor(20, 16) y = drop(x) }}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1662, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 893, DateTimeKind.Utc).AddTicks(2897), 2.5f, 2, "The outermost directory in a Django project is just {{c1::a container for the project}} and [can/cannot] {{c1::can}} be renamed.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1677, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 893, DateTimeKind.Utc).AddTicks(8411), 2.5f, 2, "As in the case of Renderers, DRF does not make Serializers do the work of actually translating from wire formats to objects, this is the work of {{c1::Parsers}} such as {{c1::rest_framework.parsers.JSONParser}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1678, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 893, DateTimeKind.Utc).AddTicks(8454), 2.5f, 2, "As in the case of Renderers, DRF does not make Serializers do the work of actually translating from wire formats to objects, this is the work of {{c1::Parsers}} such as {{c1::rest_framework.parsers.JSONParser}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1679, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 893, DateTimeKind.Utc).AddTicks(8989), 2.5f, 2, "The .create and .update methods of a Serializer should return {{c1::instances of the class they serialize}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1706, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(5216), 2.5f, 2, "In the context of FRP and lenses, the lens laws are 1. {{c1::Get-Put}}: {{c2::If you modify something by changing a subpart to its original value, nothing happens}} 2. {{c1::Put-Get}}: {{c2::If you modify a subpart and then view it, you get back exactly that changed subpart}} 3. {{c1::Put-Put}}: {{c2::Writing twice is equivalent to just the second write operation}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1705, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(4703), 2.5f, 2, "The {{c1::XY Problem}} refers to {{c2::asking about your belief as to the solution to a problem rather than the problem itself}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1704, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(4607), 2.5f, 2, "The {{c1::XY Problem}} refers to {{c2::asking about your belief as to the solution to a problem rather than the problem itself}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1703, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(4158), 2.5f, 2, "You can start Jekyll with {{c1::bundle exec jekyll serve}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1702, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(3565), 2.5f, 2, "In Django 3.x ForeignKeys require on_delete which specifies what happens to {{c1::the instance that points to another instance when the pointed to instance is deleted}}. Options are 1. {{c2::CASCADE}} which {{c3::also deletes the object containing the ForeignKey}} 2. {{c2::PROTECT}} which {{c3::Prevents deletion of the referenced object by raising a ProtectedError }} 3. {{c2::RESTRICT}} which {{c3::Prevents deletion of a referenced object unless it also references a different object via CASCADE that is also being deleted in the same operation}} 4. {{c2::SET_NULL}} which {{c3::sets the ForeignKey null}} 5. {{c2::SET_DEFAULT}} which {{c3::sets the ForeignKey to its default value}} 6. {{c2::SET()}} which {{c3::accepts a function to be called which generates a value}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1701, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(3504), 2.5f, 2, "In Django 3.x ForeignKeys require on_delete which specifies what happens to {{c1::the instance that points to another instance when the pointed to instance is deleted}}. Options are 1. {{c2::CASCADE}} which {{c3::also deletes the object containing the ForeignKey}} 2. {{c2::PROTECT}} which {{c3::Prevents deletion of the referenced object by raising a ProtectedError }} 3. {{c2::RESTRICT}} which {{c3::Prevents deletion of a referenced object unless it also references a different object via CASCADE that is also being deleted in the same operation}} 4. {{c2::SET_NULL}} which {{c3::sets the ForeignKey null}} 5. {{c2::SET_DEFAULT}} which {{c3::sets the ForeignKey to its default value}} 6. {{c2::SET()}} which {{c3::accepts a function to be called which generates a value}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1700, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(3491), 2.5f, 2, "In Django 3.x ForeignKeys require on_delete which specifies what happens to {{c1::the instance that points to another instance when the pointed to instance is deleted}}. Options are 1. {{c2::CASCADE}} which {{c3::also deletes the object containing the ForeignKey}} 2. {{c2::PROTECT}} which {{c3::Prevents deletion of the referenced object by raising a ProtectedError }} 3. {{c2::RESTRICT}} which {{c3::Prevents deletion of a referenced object unless it also references a different object via CASCADE that is also being deleted in the same operation}} 4. {{c2::SET_NULL}} which {{c3::sets the ForeignKey null}} 5. {{c2::SET_DEFAULT}} which {{c3::sets the ForeignKey to its default value}} 6. {{c2::SET()}} which {{c3::accepts a function to be called which generates a value}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1699, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(3444), 2.5f, 2, "In Django 3.x ForeignKeys require on_delete which specifies what happens to {{c1::the instance that points to another instance when the pointed to instance is deleted}}. Options are 1. {{c2::CASCADE}} which {{c3::also deletes the object containing the ForeignKey}} 2. {{c2::PROTECT}} which {{c3::Prevents deletion of the referenced object by raising a ProtectedError }} 3. {{c2::RESTRICT}} which {{c3::Prevents deletion of a referenced object unless it also references a different object via CASCADE that is also being deleted in the same operation}} 4. {{c2::SET_NULL}} which {{c3::sets the ForeignKey null}} 5. {{c2::SET_DEFAULT}} which {{c3::sets the ForeignKey to its default value}} 6. {{c2::SET()}} which {{c3::accepts a function to be called which generates a value}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1698, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(3425), 2.5f, 2, "In Django 3.x ForeignKeys require on_delete which specifies what happens to {{c1::the instance that points to another instance when the pointed to instance is deleted}}. Options are 1. {{c2::CASCADE}} which {{c3::also deletes the object containing the ForeignKey}} 2. {{c2::PROTECT}} which {{c3::Prevents deletion of the referenced object by raising a ProtectedError }} 3. {{c2::RESTRICT}} which {{c3::Prevents deletion of a referenced object unless it also references a different object via CASCADE that is also being deleted in the same operation}} 4. {{c2::SET_NULL}} which {{c3::sets the ForeignKey null}} 5. {{c2::SET_DEFAULT}} which {{c3::sets the ForeignKey to its default value}} 6. {{c2::SET()}} which {{c3::accepts a function to be called which generates a value}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1697, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(3393), 2.5f, 2, "In Django 3.x ForeignKeys require on_delete which specifies what happens to {{c1::the instance that points to another instance when the pointed to instance is deleted}}. Options are 1. {{c2::CASCADE}} which {{c3::also deletes the object containing the ForeignKey}} 2. {{c2::PROTECT}} which {{c3::Prevents deletion of the referenced object by raising a ProtectedError }} 3. {{c2::RESTRICT}} which {{c3::Prevents deletion of a referenced object unless it also references a different object via CASCADE that is also being deleted in the same operation}} 4. {{c2::SET_NULL}} which {{c3::sets the ForeignKey null}} 5. {{c2::SET_DEFAULT}} which {{c3::sets the ForeignKey to its default value}} 6. {{c2::SET()}} which {{c3::accepts a function to be called which generates a value}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1696, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(3377), 2.5f, 2, "In Django 3.x ForeignKeys require on_delete which specifies what happens to {{c1::the instance that points to another instance when the pointed to instance is deleted}}. Options are 1. {{c2::CASCADE}} which {{c3::also deletes the object containing the ForeignKey}} 2. {{c2::PROTECT}} which {{c3::Prevents deletion of the referenced object by raising a ProtectedError }} 3. {{c2::RESTRICT}} which {{c3::Prevents deletion of a referenced object unless it also references a different object via CASCADE that is also being deleted in the same operation}} 4. {{c2::SET_NULL}} which {{c3::sets the ForeignKey null}} 5. {{c2::SET_DEFAULT}} which {{c3::sets the ForeignKey to its default value}} 6. {{c2::SET()}} which {{c3::accepts a function to be called which generates a value}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1695, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(3229), 2.5f, 2, "In Django 3.x ForeignKeys require on_delete which specifies what happens to {{c1::the instance that points to another instance when the pointed to instance is deleted}}. Options are 1. {{c2::CASCADE}} which {{c3::also deletes the object containing the ForeignKey}} 2. {{c2::PROTECT}} which {{c3::Prevents deletion of the referenced object by raising a ProtectedError }} 3. {{c2::RESTRICT}} which {{c3::Prevents deletion of a referenced object unless it also references a different object via CASCADE that is also being deleted in the same operation}} 4. {{c2::SET_NULL}} which {{c3::sets the ForeignKey null}} 5. {{c2::SET_DEFAULT}} which {{c3::sets the ForeignKey to its default value}} 6. {{c2::SET()}} which {{c3::accepts a function to be called which generates a value}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1694, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(3213), 2.5f, 2, "In Django 3.x ForeignKeys require on_delete which specifies what happens to {{c1::the instance that points to another instance when the pointed to instance is deleted}}. Options are 1. {{c2::CASCADE}} which {{c3::also deletes the object containing the ForeignKey}} 2. {{c2::PROTECT}} which {{c3::Prevents deletion of the referenced object by raising a ProtectedError }} 3. {{c2::RESTRICT}} which {{c3::Prevents deletion of a referenced object unless it also references a different object via CASCADE that is also being deleted in the same operation}} 4. {{c2::SET_NULL}} which {{c3::sets the ForeignKey null}} 5. {{c2::SET_DEFAULT}} which {{c3::sets the ForeignKey to its default value}} 6. {{c2::SET()}} which {{c3::accepts a function to be called which generates a value}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1693, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(3136), 2.5f, 2, "In Django 3.x ForeignKeys require on_delete which specifies what happens to {{c1::the instance that points to another instance when the pointed to instance is deleted}}. Options are 1. {{c2::CASCADE}} which {{c3::also deletes the object containing the ForeignKey}} 2. {{c2::PROTECT}} which {{c3::Prevents deletion of the referenced object by raising a ProtectedError }} 3. {{c2::RESTRICT}} which {{c3::Prevents deletion of a referenced object unless it also references a different object via CASCADE that is also being deleted in the same operation}} 4. {{c2::SET_NULL}} which {{c3::sets the ForeignKey null}} 5. {{c2::SET_DEFAULT}} which {{c3::sets the ForeignKey to its default value}} 6. {{c2::SET()}} which {{c3::accepts a function to be called which generates a value}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1692, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(3119), 2.5f, 2, "In Django 3.x ForeignKeys require on_delete which specifies what happens to {{c1::the instance that points to another instance when the pointed to instance is deleted}}. Options are 1. {{c2::CASCADE}} which {{c3::also deletes the object containing the ForeignKey}} 2. {{c2::PROTECT}} which {{c3::Prevents deletion of the referenced object by raising a ProtectedError }} 3. {{c2::RESTRICT}} which {{c3::Prevents deletion of a referenced object unless it also references a different object via CASCADE that is also being deleted in the same operation}} 4. {{c2::SET_NULL}} which {{c3::sets the ForeignKey null}} 5. {{c2::SET_DEFAULT}} which {{c3::sets the ForeignKey to its default value}} 6. {{c2::SET()}} which {{c3::accepts a function to be called which generates a value}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1691, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(3036), 2.5f, 2, "In Django 3.x ForeignKeys require on_delete which specifies what happens to {{c1::the instance that points to another instance when the pointed to instance is deleted}}. Options are 1. {{c2::CASCADE}} which {{c3::also deletes the object containing the ForeignKey}} 2. {{c2::PROTECT}} which {{c3::Prevents deletion of the referenced object by raising a ProtectedError }} 3. {{c2::RESTRICT}} which {{c3::Prevents deletion of a referenced object unless it also references a different object via CASCADE that is also being deleted in the same operation}} 4. {{c2::SET_NULL}} which {{c3::sets the ForeignKey null}} 5. {{c2::SET_DEFAULT}} which {{c3::sets the ForeignKey to its default value}} 6. {{c2::SET()}} which {{c3::accepts a function to be called which generates a value}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1690, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(3017), 2.5f, 2, "In Django 3.x ForeignKeys require on_delete which specifies what happens to {{c1::the instance that points to another instance when the pointed to instance is deleted}}. Options are 1. {{c2::CASCADE}} which {{c3::also deletes the object containing the ForeignKey}} 2. {{c2::PROTECT}} which {{c3::Prevents deletion of the referenced object by raising a ProtectedError }} 3. {{c2::RESTRICT}} which {{c3::Prevents deletion of a referenced object unless it also references a different object via CASCADE that is also being deleted in the same operation}} 4. {{c2::SET_NULL}} which {{c3::sets the ForeignKey null}} 5. {{c2::SET_DEFAULT}} which {{c3::sets the ForeignKey to its default value}} 6. {{c2::SET()}} which {{c3::accepts a function to be called which generates a value}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1689, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(2292), 2.5f, 2, "To retrieve the instance and data parameters passed into a Serializer's __init__ we can use {{c1::.instance and .initial_data}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1688, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(1798), 2.5f, 2, "\"What should we add to this class in order to ensure that \"\"django\"\" must be in the title field of instances? 1 2 3 4 5from rest_framework import serializers class BlogPostSerializer(serializers.Serializer): title = serializers.CharField(max_length=100) content = serializers.CharField()\"", new TimeSpan(0, 0, 10, 0, 0), 2, "\"1 2 3 4 5 6 7 8 9 10 from rest_framework import serializers class BlogPostSerializer(serializers.Serializer): title = serializers.CharField(max_length=100) content = serializers.CharField() def validate_title(self, value): if 'django' not in value.lower(): raise serializers.ValidationError(\"\"Blog post is not about Django\"\") return value\"" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1687, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(1418), 2.5f, 2, "In the case that there were validation errors in a Serializer that did not correspond to a single field they are found in the {{c1::non_field_errors key of .errors}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1686, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(862), 2.5f, 2, "If a Serializer's data is invalid which can be checked by {{c1::.is_valid()}} you can find the reason why on {{c2::.errors}} which is a {{c2::dictionary of the error messages corresponding to the validation failure}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1685, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(783), 2.5f, 2, "If a Serializer's data is invalid which can be checked by {{c1::.is_valid()}} you can find the reason why on {{c2::.errors}} which is a {{c2::dictionary of the error messages corresponding to the validation failure}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1684, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(765), 2.5f, 2, "If a Serializer's data is invalid which can be checked by {{c1::.is_valid()}} you can find the reason why on {{c2::.errors}} which is a {{c2::dictionary of the error messages corresponding to the validation failure}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1683, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(241), 2.5f, 2, "In a Serializer, an instance of a serializer knows whether the corresponding instance is being {{c1::updated}} or {{c1::created}} based on {{c2::whether an instance was passed to the serializer constructor along with the data}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1682, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(153), 2.5f, 2, "In a Serializer, an instance of a serializer knows whether the corresponding instance is being {{c1::updated}} or {{c1::created}} based on {{c2::whether an instance was passed to the serializer constructor along with the data}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1681, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 894, DateTimeKind.Utc).AddTicks(135), 2.5f, 2, "In a Serializer, an instance of a serializer knows whether the corresponding instance is being {{c1::updated}} or {{c1::created}} based on {{c2::whether an instance was passed to the serializer constructor along with the data}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1680, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 893, DateTimeKind.Utc).AddTicks(9582), 2.5f, 2, "In the case where a Serializer corresponds to a persisted object (such as a Django model) then .update and .create should ensure that {{c1::the instance saving logic is called as appropriate before returning}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1649, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 892, DateTimeKind.Utc).AddTicks(6611), 2.5f, 2, "To add a recurrent layer you can use one of {{c1::1 2 3nn.RNN nn.LSTM nn.GRU }}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1587, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(2790), 2.5f, 2, "Normalized initialization can be thought of as compromise between desiring that {{c1::all layers have the same activation variance}} and wanting them also to have {{c2::the same gradient variance}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1648, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 892, DateTimeKind.Utc).AddTicks(6100), 2.5f, 2, "To make a batch normalization layer you can use {{c1::nn.BatchNorm}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1646, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 892, DateTimeKind.Utc).AddTicks(5066), 2.5f, 2, "To construct a convolutional layer with kernel size s from m to n channels in 2-dimensions you use {{c1::1nn.Conv2d(m,n,s) }}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1614, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 891, DateTimeKind.Utc).AddTicks(1709), 2.5f, 2, "ONNX = {{c1::Open Neural Network Exchange}} which is an {{c1::ecosystem and model specification that can be used in different DNN libraries}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1613, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 891, DateTimeKind.Utc).AddTicks(1177), 2.5f, 2, "A standard set of PyTorch imports consists of {{c1:: 1 2 3 4 5 6 7 8import torch from torch.utils.data import Dataset, DataLoader from torch import Tensor import torch.audograd as autograd import torch.nn as nn import torch.nn.functional as F import torch.optim as optim }}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1612, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 891, DateTimeKind.Utc).AddTicks(165), 2.5f, 2, "Frontend and tracing tools in PyTorch are located in {{c1::1from torch.jit import script, trace }}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1611, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(9614), 2.5f, 2, "AdaGrad is well motivated theoretically for {{c1::convex optimization problems}}. However, at a high level, in deep learning problems {{c1::AdaGrad can fail because learning rates can fall quickly due to steep gradients encountered very early in the learning process}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1610, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(9479), 2.5f, 2, "AdaGrad is well motivated theoretically for {{c1::convex optimization problems}}. However, at a high level, in deep learning problems {{c1::AdaGrad can fail because learning rates can fall quickly due to steep gradients encountered very early in the learning process}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1609, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(8801), 2.5f, 2, "{{c1::AdaGrad}} individually {{c2::adapts learning rates}} by {{c2::scaling them inversely proportional to the square root of the sum of their historical squared values}}. Intuitively, this incentivizes {{c2::learning faster in directions that are less steep}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1608, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(8743), 2.5f, 2, "{{c1::AdaGrad}} individually {{c2::adapts learning rates}} by {{c2::scaling them inversely proportional to the square root of the sum of their historical squared values}}. Intuitively, this incentivizes {{c2::learning faster in directions that are less steep}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1607, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(8520), 2.5f, 2, "{{c1::AdaGrad}} individually {{c2::adapts learning rates}} by {{c2::scaling them inversely proportional to the square root of the sum of their historical squared values}}. Intuitively, this incentivizes {{c2::learning faster in directions that are less steep}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1606, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(8488), 2.5f, 2, "{{c1::AdaGrad}} individually {{c2::adapts learning rates}} by {{c2::scaling them inversely proportional to the square root of the sum of their historical squared values}}. Intuitively, this incentivizes {{c2::learning faster in directions that are less steep}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1605, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(7948), 2.5f, 2, "{{c1::Delta-bar-delta}} is an early heuristic approach to {{c2::setting individual learning rates on parameters}}. The core idea is that {{c2::if the partial derivatives of the loss with respect to a given parameter are sign stable, we should be able to learn faster in that direction}}. Unfortunately, in the context of {{c2::SGD, the requirements for delta-bar-delta are not satisfied because of the gradient noise}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1604, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(7855), 2.5f, 2, "{{c1::Delta-bar-delta}} is an early heuristic approach to {{c2::setting individual learning rates on parameters}}. The core idea is that {{c2::if the partial derivatives of the loss with respect to a given parameter are sign stable, we should be able to learn faster in that direction}}. Unfortunately, in the context of {{c2::SGD, the requirements for delta-bar-delta are not satisfied because of the gradient noise}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1603, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(7710), 2.5f, 2, "{{c1::Delta-bar-delta}} is an early heuristic approach to {{c2::setting individual learning rates on parameters}}. The core idea is that {{c2::if the partial derivatives of the loss with respect to a given parameter are sign stable, we should be able to learn faster in that direction}}. Unfortunately, in the context of {{c2::SGD, the requirements for delta-bar-delta are not satisfied because of the gradient noise}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1615, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 891, DateTimeKind.Utc).AddTicks(1796), 2.5f, 2, "ONNX = {{c1::Open Neural Network Exchange}} which is an {{c1::ecosystem and model specification that can be used in different DNN libraries}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1602, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(7652), 2.5f, 2, "{{c1::Delta-bar-delta}} is an early heuristic approach to {{c2::setting individual learning rates on parameters}}. The core idea is that {{c2::if the partial derivatives of the loss with respect to a given parameter are sign stable, we should be able to learn faster in that direction}}. Unfortunately, in the context of {{c2::SGD, the requirements for delta-bar-delta are not satisfied because of the gradient noise}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1600, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(6317), 2.5f, 2, "Exceptions to the rule for setting biases include: 1. Setting biases initially to get the correct {{c1::marginal statistics for the output}}. For instance if we are predicting classes with softmax and we observe {{c1::a marginal distribution of classes $\\mathbf{c}$}} you can set biases such that {{c1::$\\text{softmax}(\\boldsymbol{b})=\\boldsymbol{c}$}} 2. Biases can be set to avoid too much {{c2::saturation in the network. Typically this means setting the bias on ReLU inputs to 0.1}} 3. If the bias controls a gate {{c3::we should set the bias to 1 initially}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1599, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(6270), 2.5f, 2, "Exceptions to the rule for setting biases include: 1. Setting biases initially to get the correct {{c1::marginal statistics for the output}}. For instance if we are predicting classes with softmax and we observe {{c1::a marginal distribution of classes $\\mathbf{c}$}} you can set biases such that {{c1::$\\text{softmax}(\\boldsymbol{b})=\\boldsymbol{c}$}} 2. Biases can be set to avoid too much {{c2::saturation in the network. Typically this means setting the bias on ReLU inputs to 0.1}} 3. If the bias controls a gate {{c3::we should set the bias to 1 initially}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1598, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(6146), 2.5f, 2, "Exceptions to the rule for setting biases include: 1. Setting biases initially to get the correct {{c1::marginal statistics for the output}}. For instance if we are predicting classes with softmax and we observe {{c1::a marginal distribution of classes $\\mathbf{c}$}} you can set biases such that {{c1::$\\text{softmax}(\\boldsymbol{b})=\\boldsymbol{c}$}} 2. Biases can be set to avoid too much {{c2::saturation in the network. Typically this means setting the bias on ReLU inputs to 0.1}} 3. If the bias controls a gate {{c3::we should set the bias to 1 initially}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1597, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(6092), 2.5f, 2, "Exceptions to the rule for setting biases include: 1. Setting biases initially to get the correct {{c1::marginal statistics for the output}}. For instance if we are predicting classes with softmax and we observe {{c1::a marginal distribution of classes $\\mathbf{c}$}} you can set biases such that {{c1::$\\text{softmax}(\\boldsymbol{b})=\\boldsymbol{c}$}} 2. Biases can be set to avoid too much {{c2::saturation in the network. Typically this means setting the bias on ReLU inputs to 0.1}} 3. If the bias controls a gate {{c3::we should set the bias to 1 initially}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1596, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(6034), 2.5f, 2, "Exceptions to the rule for setting biases include: 1. Setting biases initially to get the correct {{c1::marginal statistics for the output}}. For instance if we are predicting classes with softmax and we observe {{c1::a marginal distribution of classes $\\mathbf{c}$}} you can set biases such that {{c1::$\\text{softmax}(\\boldsymbol{b})=\\boldsymbol{c}$}} 2. Biases can be set to avoid too much {{c2::saturation in the network. Typically this means setting the bias on ReLU inputs to 0.1}} 3. If the bias controls a gate {{c3::we should set the bias to 1 initially}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1595, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(5442), 2.5f, 2, "Sparse initialization clearly works well in certain problem domains because of {{c1::the huge success of CNNs}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1594, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(4881), 2.5f, 2, "From the perspective of prior, sparse initialization represents {{c1::a strong belief that most units are noninteracting}} and if this is incorrect {{c2::the model can take a long time to recover}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1593, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(4830), 2.5f, 2, "From the perspective of prior, sparse initialization represents {{c1::a strong belief that most units are noninteracting}} and if this is incorrect {{c2::the model can take a long time to recover}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1592, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(4156), 2.5f, 2, "A drawback to scaling weights to have the same standard deviation is when layers are large, {{c1::every weight becomes small}}. We can get around this with {{c2::sparse initialization}} which {{c2::keeps only a fixed number of nonzero weights}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1591, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(4105), 2.5f, 2, "A drawback to scaling weights to have the same standard deviation is when layers are large, {{c1::every weight becomes small}}. We can get around this with {{c2::sparse initialization}} which {{c2::keeps only a fixed number of nonzero weights}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1590, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(4073), 2.5f, 2, "A drawback to scaling weights to have the same standard deviation is when layers are large, {{c1::every weight becomes small}}. We can get around this with {{c2::sparse initialization}} which {{c2::keeps only a fixed number of nonzero weights}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1589, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(3511), 2.5f, 2, "In initialization, {{c1::Saxe et al. (2013)}} recommend using {{c2::random orthogonal matrices with a gain factor $g$ that accounts for the nonlinear activation}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1601, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 890, DateTimeKind.Utc).AddTicks(6989), 2.5f, 2, "From a weight initialization standpoint, transfer learning can be {{c1::considered to be a clever form of weight initialization that is likely to be close to the optimal values}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1616, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 891, DateTimeKind.Utc).AddTicks(2361), 2.5f, 2, "You can import the torchvision primary tools with {{c1::1from torchvision import datasets, models, transforms }}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1617, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 891, DateTimeKind.Utc).AddTicks(3070), 2.5f, 2, "Tools for distributed communication and training are in (imports) {{c1:: 1 2import torch.distributed as dist # distributed communication from multiprocessing import Process # memory sharing processes }}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1618, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 891, DateTimeKind.Utc).AddTicks(3672), 2.5f, 2, "To create a tensor with random standard normally distributed entries {{c1:: 1torch.randn(*size) # tensor with independent N(0,1) entries }}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1645, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 892, DateTimeKind.Utc).AddTicks(4576), 2.5f, 2, "To construct a fully connected layer {{c1::1nn.Linear(m,n) }}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1644, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 892, DateTimeKind.Utc).AddTicks(4125), 2.5f, 2, "To write device agnostic code in torch you should {{c1::construct a device object and populate it once according to torch.cuda.is_available()}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1643, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 892, DateTimeKind.Utc).AddTicks(3505), 2.5f, 2, "To zero out a tensor you can use {{c1::1x.zero_() }}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1642, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 892, DateTimeKind.Utc).AddTicks(3092), 2.5f, 2, "A shorthand for matrix transposition is {{c1::Tensor.t()}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1641, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 892, DateTimeKind.Utc).AddTicks(2615), 2.5f, 2, "To explicitly matrix multiply or matrix-vector multiply you can {{c1::1 2A.mm(B) # matrix multiplication A.mv(x) # matrix-vector multiplication 1 2A.mm(B) # matrix multiplication A.mv(x) # matrix-vector multiplication }}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1640, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 892, DateTimeKind.Utc).AddTicks(1827), 2.5f, 2, "To {{c1::add a dimension with unit size}} you can use {{c2::Tensor.unsqueeze(dim=dim_idx)}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1639, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 892, DateTimeKind.Utc).AddTicks(1782), 2.5f, 2, "To {{c1::add a dimension with unit size}} you can use {{c2::Tensor.unsqueeze(dim=dim_idx)}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1638, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 892, DateTimeKind.Utc).AddTicks(1265), 2.5f, 2, "To transpose dimensions of a tensor you can use {{c1::Tensor.transpose(a, b)}} which {{c1::swaps dimensions a and b}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1637, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 892, DateTimeKind.Utc).AddTicks(1230), 2.5f, 2, "To transpose dimensions of a tensor you can use {{c1::Tensor.transpose(a, b)}} which {{c1::swaps dimensions a and b}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1636, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 892, DateTimeKind.Utc).AddTicks(726), 2.5f, 2, "The {{c1::stride}} of a tensor indicates how many {{c2::items must be traversed to arrive at the next index in the current dimension}}. As an example if a tensor has shape (2, 3, 4) the {{c1::stride}} will be {{c2::(12, 4, 1)}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1635, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 892, DateTimeKind.Utc).AddTicks(708), 2.5f, 2, "The {{c1::stride}} of a tensor indicates how many {{c2::items must be traversed to arrive at the next index in the current dimension}}. As an example if a tensor has shape (2, 3, 4) the {{c1::stride}} will be {{c2::(12, 4, 1)}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1634, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 892, DateTimeKind.Utc).AddTicks(694), 2.5f, 2, "The {{c1::stride}} of a tensor indicates how many {{c2::items must be traversed to arrive at the next index in the current dimension}}. As an example if a tensor has shape (2, 3, 4) the {{c1::stride}} will be {{c2::(12, 4, 1)}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1633, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 892, DateTimeKind.Utc).AddTicks(609), 2.5f, 2, "The {{c1::stride}} of a tensor indicates how many {{c2::items must be traversed to arrive at the next index in the current dimension}}. As an example if a tensor has shape (2, 3, 4) the {{c1::stride}} will be {{c2::(12, 4, 1)}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1632, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 892, DateTimeKind.Utc).AddTicks(112), 2.5f, 2, "The difference between {{c1::view and reshape}} is that the former {{c2::must be compatible with the shape and the stride}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1631, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 892, DateTimeKind.Utc).AddTicks(54), 2.5f, 2, "The difference between {{c1::view and reshape}} is that the former {{c2::must be compatible with the shape and the stride}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1630, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 891, DateTimeKind.Utc).AddTicks(9541), 2.5f, 2, "When creating a tensor view we can pass a {{c1::-1}} to indicate that {{c2::that dimension should be the appropriate size to make the number of elements compatible}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1629, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 891, DateTimeKind.Utc).AddTicks(9442), 2.5f, 2, "When creating a tensor view we can pass a {{c1::-1}} to indicate that {{c2::that dimension should be the appropriate size to make the number of elements compatible}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1628, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 891, DateTimeKind.Utc).AddTicks(8912), 2.5f, 2, "The api for viewing a tensor in torch is {{c1::Tensor.view(*shape) → Tensor}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1627, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 891, DateTimeKind.Utc).AddTicks(8413), 2.5f, 2, "While tensors created with torch.tensor are contiguous in memory, the same is not necessarily true of {{c1::a view of that tensor}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1626, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 891, DateTimeKind.Utc).AddTicks(7895), 2.5f, 2, "If you wished to convince yourself that a tensor in Torch uses the same underlying memory you could use {{c1::1 2 3x = torch.rand(4,4) y = t.view(2, -1) # 2x8 x.storage().data_ptr() == y.storage().data_ptr() }}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1625, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 891, DateTimeKind.Utc).AddTicks(7125), 2.5f, 2, "By creating a view of a tensor {{c1::we can create an instance using the same underlying data}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1624, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 891, DateTimeKind.Utc).AddTicks(6532), 2.5f, 2, "To concatenate a sequence of tensors along a certain dimension {{c1::1torch.cat(tensor_seq, dim=0) }}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1623, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 891, DateTimeKind.Utc).AddTicks(6007), 2.5f, 2, "To get the shape of a tensor {{c1::1x.size() }}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1622, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 891, DateTimeKind.Utc).AddTicks(5584), 2.5f, 2, "To indicate that a tensor should receive gradient calculations you should use {{c1::1requires_grad=True }} in the constructor", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1621, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 891, DateTimeKind.Utc).AddTicks(5092), 2.5f, 2, "To clone a tensor {{c1::1x.clone() }}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1620, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 891, DateTimeKind.Utc).AddTicks(4651), 2.5f, 2, "To prevent code from autograd tracking tensor history {{c1::1with torch.no_grad(): }}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1619, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 891, DateTimeKind.Utc).AddTicks(4153), 2.5f, 2, "To create a tensor from a nested list or an ndarray {{c1::1torch.Tensor(L) }}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1647, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 892, DateTimeKind.Utc).AddTicks(5522), 2.5f, 2, "To create a pooling layer in 2 dimensions which pools over 5 units {{c1::1nn.MaxPool2d(5) }}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 977, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 871, DateTimeKind.Utc).AddTicks(5336), 2.5f, 2, "We can convince ourselves that state of the art computer vision models do not understand because they misclassify {{c1::adversarial examples}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 976, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 871, DateTimeKind.Utc).AddTicks(4824), 2.5f, 2, "Instead of drawing a mask for dropout from a Bernoulli distribution, we could {{c1::draw multiplicative weights from any other distribution like a normal distribution which can perform better in some contexts}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 975, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 871, DateTimeKind.Utc).AddTicks(4100), 2.5f, 2, "Making noise multiplicative (as in dropout) as opposed to additive is formally a nice approach because our model {{c1::cannot merely rescale the weights of the layers in order to escape from the noise}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 332, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(7172), 2.5f, 2, "The {{c1::standard deviation, $\\sigma$}} is the {{c2::square root}} of the {{c3::variance}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 331, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(6607), 2.5f, 2, "The {{c1::variance}} is a {{c2::measure of how much the values of a function of a random variable vary in quadrature as we same different values from the distribution.}} The {{c1::variance}} is defined by {{c2::$\\operatorname{Var}(f(x))=\\mathbb{E}\\left[(f(x)-\\mathbb{E}[f(x)])^{2}\\right]$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 330, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(6443), 2.5f, 2, "The {{c1::variance}} is a {{c2::measure of how much the values of a function of a random variable vary in quadrature as we same different values from the distribution.}} The {{c1::variance}} is defined by {{c2::$\\operatorname{Var}(f(x))=\\mathbb{E}\\left[(f(x)-\\mathbb{E}[f(x)])^{2}\\right]$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 329, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(6426), 2.5f, 2, "The {{c1::variance}} is a {{c2::measure of how much the values of a function of a random variable vary in quadrature as we same different values from the distribution.}} The {{c1::variance}} is defined by {{c2::$\\operatorname{Var}(f(x))=\\mathbb{E}\\left[(f(x)-\\mathbb{E}[f(x)])^{2}\\right]$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 328, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(6280), 2.5f, 2, "The {{c1::variance}} is a {{c2::measure of how much the values of a function of a random variable vary in quadrature as we same different values from the distribution.}} The {{c1::variance}} is defined by {{c2::$\\operatorname{Var}(f(x))=\\mathbb{E}\\left[(f(x)-\\mathbb{E}[f(x)])^{2}\\right]$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 327, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(5471), 2.5f, 2, "The {{c1::expected value of a function of a random variable}} is defined by {{c2::the weighted mean value taken over the distribution}} and can be mathematically represented as {{c2::$\\mathbb{E}_{\\text{x}\\sim P}[f(x)] = \\sum_xP(x)f(x)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 326, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(5410), 2.5f, 2, "The {{c1::expected value of a function of a random variable}} is defined by {{c2::the weighted mean value taken over the distribution}} and can be mathematically represented as {{c2::$\\mathbb{E}_{\\text{x}\\sim P}[f(x)] = \\sum_xP(x)f(x)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 325, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(5345), 2.5f, 2, "The {{c1::expected value of a function of a random variable}} is defined by {{c2::the weighted mean value taken over the distribution}} and can be mathematically represented as {{c2::$\\mathbb{E}_{\\text{x}\\sim P}[f(x)] = \\sum_xP(x)f(x)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 324, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(4596), 2.5f, 2, "Two random variables $\\text{x},\\text{y}$ are considered {{c1::independent}} if {{c2::$p(x,y)=p(x)p(y)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 323, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(4423), 2.5f, 2, "Two random variables $\\text{x},\\text{y}$ are considered {{c1::independent}} if {{c2::$p(x,y)=p(x)p(y)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 322, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(3873), 2.5f, 2, "What is the relationship between the conditional probability and the chain rule of probability?", new TimeSpan(0, 0, 10, 0, 0), 2, "If you just multiply through in the definition of the conditional probability you obtain the chain rule." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 321, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(3505), 2.5f, 2, "Why do conditional probabilities, i.e. $p(x\\mid y)$ not tell us about what will happen if we perform $y$?", new TimeSpan(0, 0, 10, 0, 0), 2, "They only tell us what will happen if we observe $y$. Perhaps we learn about $x$ when we observe $y$ not because of $y$ directly, but because it tells us about a parameter of the system. If we force $y$, it is not guaranteed that $x$ is more or less likely to do anything in general. Understanding what will happen is the domain of causal modeling and the original question is better reformulated as an intervention query." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 333, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(7194), 2.5f, 2, "The {{c1::standard deviation, $\\sigma$}} is the {{c2::square root}} of the {{c3::variance}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 320, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(2916), 2.5f, 2, "An {{c1::intervention query}} refers to calculating the consequences of an action in {{c2::causal modeling}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 318, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(2371), 2.5f, 2, "{{c1::$P(\\text{y}=y\\mid\\text{x}=x)$}} = {{c2::$\\frac{P(\\text{x}=x,\\text{y}=y)}{P(\\text{x}=x)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 317, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(2311), 2.5f, 2, "{{c1::$P(\\text{y}=y\\mid\\text{x}=x)$}} = {{c2::$\\frac{P(\\text{x}=x,\\text{y}=y)}{P(\\text{x}=x)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 316, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(1731), 2.5f, 2, "The {{c1::marginal probability}} gives the probability distribution along a subset of random variables in a {{c2::joint distribution}}. To obtain it you {{c3::integrate or sum out the other random variables}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 315, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(1675), 2.5f, 2, "The {{c1::marginal probability}} gives the probability distribution along a subset of random variables in a {{c2::joint distribution}}. To obtain it you {{c3::integrate or sum out the other random variables}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 314, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(1644), 2.5f, 2, "The {{c1::marginal probability}} gives the probability distribution along a subset of random variables in a {{c2::joint distribution}}. To obtain it you {{c3::integrate or sum out the other random variables}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 313, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(1052), 2.5f, 2, "A {{c1::probability density function}} gives the density associated to a continuous random variable. {{c2::$p(x)\\delta x$}} gives the probability that {{c2::$\\text{x}$ takes a value between $x$ and $x + \\delta x$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 312, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(989), 2.5f, 2, "A {{c1::probability density function}} gives the density associated to a continuous random variable. {{c2::$p(x)\\delta x$}} gives the probability that {{c2::$\\text{x}$ takes a value between $x$ and $x + \\delta x$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 311, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(962), 2.5f, 2, "A {{c1::probability density function}} gives the density associated to a continuous random variable. {{c2::$p(x)\\delta x$}} gives the probability that {{c2::$\\text{x}$ takes a value between $x$ and $x + \\delta x$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 310, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(345), 2.5f, 2, "{{c1::Bayesian probability}} is related to the {{c2::level of certainty we hold about a prediction of a single event occurring}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 309, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(260), 2.5f, 2, "{{c1::Bayesian probability}} is related to the {{c2::level of certainty we hold about a prediction of a single event occurring}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 308, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(9671), 2.5f, 2, "{{c1::Frequentist probability}} is related to the {{c2::observed rates that events occur when a particular experiment is performed many times}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 307, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(9570), 2.5f, 2, "{{c1::Frequentist probability}} is related to the {{c2::observed rates that events occur when a particular experiment is performed many times}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 319, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(2889), 2.5f, 2, "An {{c1::intervention query}} refers to calculating the consequences of an action in {{c2::causal modeling}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 334, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(7210), 2.5f, 2, "The {{c1::standard deviation, $\\sigma$}} is the {{c2::square root}} of the {{c3::variance}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 335, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(7845), 2.5f, 2, "The {{c1::covariance}} gives a crude sense of how much {{c2::two random variables are linearly related to one another.}} It is defined through {{c3::$\\operatorname{Cov}(f(x), g(y))=\\mathbb{E}[(f(x)-\\mathbb{E}[f(x)])(g(y)-\\mathbb{E}[g(y)])]$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 336, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(7973), 2.5f, 2, "The {{c1::covariance}} gives a crude sense of how much {{c2::two random variables are linearly related to one another.}} It is defined through {{c3::$\\operatorname{Cov}(f(x), g(y))=\\mathbb{E}[(f(x)-\\mathbb{E}[f(x)])(g(y)-\\mathbb{E}[g(y)])]$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 363, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 852, DateTimeKind.Utc).AddTicks(8442), 2.5f, 2, "The empirical distribution measures {{c1::the empirical frequency at which different samples have been observed, i.e. the empirical frequency}}. It has a PDF of the form {{c2::$\\hat{p}(\\boldsymbol{x})=\\frac{1}{m} \\sum_{i=1}^{m} \\delta\\left(\\boldsymbol{x}-\\boldsymbol{x}^{(i)}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 362, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 852, DateTimeKind.Utc).AddTicks(8324), 2.5f, 2, "The empirical distribution measures {{c1::the empirical frequency at which different samples have been observed, i.e. the empirical frequency}}. It has a PDF of the form {{c2::$\\hat{p}(\\boldsymbol{x})=\\frac{1}{m} \\sum_{i=1}^{m} \\delta\\left(\\boldsymbol{x}-\\boldsymbol{x}^{(i)}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 361, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 852, DateTimeKind.Utc).AddTicks(7434), 2.5f, 2, "The {{c1::Laplace distribution}} has probability density function {{c2::$\\operatorname{Laplace}(x ; \\mu, \\gamma)=\\frac{1}{2 \\gamma} \\exp \\left(-\\frac{|x-\\mu|}{\\gamma}\\right)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 360, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 852, DateTimeKind.Utc).AddTicks(7320), 2.5f, 2, "The {{c1::Laplace distribution}} has probability density function {{c2::$\\operatorname{Laplace}(x ; \\mu, \\gamma)=\\frac{1}{2 \\gamma} \\exp \\left(-\\frac{|x-\\mu|}{\\gamma}\\right)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 359, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 852, DateTimeKind.Utc).AddTicks(6713), 2.5f, 2, "The exponential distribution is a probability distribution with PDF {{c1::$p(x ; \\lambda)= \\operatorname{Exp}(\\lambda) = \\lambda \\mathbf{1}_{x \\geq 0} \\exp (-\\lambda x)$}}. The mean and variance of the distribution are {{c1::$\\frac{1}{\\lambda}$ and $\\frac{1}{\\lambda^2}$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 358, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 852, DateTimeKind.Utc).AddTicks(6656), 2.5f, 2, "The exponential distribution is a probability distribution with PDF {{c1::$p(x ; \\lambda)= \\operatorname{Exp}(\\lambda) = \\lambda \\mathbf{1}_{x \\geq 0} \\exp (-\\lambda x)$}}. The mean and variance of the distribution are {{c1::$\\frac{1}{\\lambda}$ and $\\frac{1}{\\lambda^2}$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 357, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 852, DateTimeKind.Utc).AddTicks(5862), 2.5f, 2, "The multivariate normal has distribution {{c1::$\\mathcal{N}(\\boldsymbol{x} ; \\boldsymbol{\\mu}, \\boldsymbol{\\Sigma})=\\sqrt{\\frac{1}{(2 \\pi)^{n} \\operatorname{det}(\\boldsymbol{\\Sigma})} } \\exp \\left(-\\frac{1}{2}(\\boldsymbol{x}-\\boldsymbol{\\mu})^{\\top} \\boldsymbol{\\Sigma}^{-1}(\\boldsymbol{x}-\\boldsymbol{\\mu})\\right)$}} where the {{c1::covariance matrix $\\boldsymbol{\\Sigma}$ is symmetric and positive definite}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 356, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 852, DateTimeKind.Utc).AddTicks(5778), 2.5f, 2, "The multivariate normal has distribution {{c1::$\\mathcal{N}(\\boldsymbol{x} ; \\boldsymbol{\\mu}, \\boldsymbol{\\Sigma})=\\sqrt{\\frac{1}{(2 \\pi)^{n} \\operatorname{det}(\\boldsymbol{\\Sigma})} } \\exp \\left(-\\frac{1}{2}(\\boldsymbol{x}-\\boldsymbol{\\mu})^{\\top} \\boldsymbol{\\Sigma}^{-1}(\\boldsymbol{x}-\\boldsymbol{\\mu})\\right)$}} where the {{c1::covariance matrix $\\boldsymbol{\\Sigma}$ is symmetric and positive definite}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 355, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 852, DateTimeKind.Utc).AddTicks(4649), 2.5f, 2, "Gaussians appear in many places because of {{c1::the central limit theorem}} and because {{c2::it is a distribution occupying maximal entropy over the real numbers with fixed first two moments}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 354, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 852, DateTimeKind.Utc).AddTicks(4542), 2.5f, 2, "Gaussians appear in many places because of {{c1::the central limit theorem}} and because {{c2::it is a distribution occupying maximal entropy over the real numbers with fixed first two moments}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 353, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 852, DateTimeKind.Utc).AddTicks(3942), 2.5f, 2, "The classical central limit theorem (CLT) states that {{c1::if a sample of $n$ random variables $X_i$ are drawn independently then $X_{\\mathrm{norm} } \\equiv \\frac{\\sum_{i=1}^{N} x_{i}-\\sum_{i=1}^{N} \\mu_{i} }{\\sqrt{\\sum_{i=1}^{N} \\sigma_{i}^{2} } }$ has a limiting cumulative distribution function which approaches a normal distribution.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 352, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 852, DateTimeKind.Utc).AddTicks(2735), 2.5f, 2, "The Gaussian or normal distribution is a probability distribution over real numbers with PDF {{c1::$\\mathcal{N}\\left(x ; \\mu, \\sigma^{2}\\right)=\\sqrt{\\frac{1}{2 \\pi \\sigma^{2} } } \\exp \\left(-\\frac{1}{2 \\sigma^{2} }(x-\\mu)^{2}\\right)$}} The normal distribution can also be characterized in terms of a {{c2::precision or inverse variance, $\\beta=\\sigma^{-2}$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 351, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 852, DateTimeKind.Utc).AddTicks(2671), 2.5f, 2, "The Gaussian or normal distribution is a probability distribution over real numbers with PDF {{c1::$\\mathcal{N}\\left(x ; \\mu, \\sigma^{2}\\right)=\\sqrt{\\frac{1}{2 \\pi \\sigma^{2} } } \\exp \\left(-\\frac{1}{2 \\sigma^{2} }(x-\\mu)^{2}\\right)$}} The normal distribution can also be characterized in terms of a {{c2::precision or inverse variance, $\\beta=\\sigma^{-2}$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 350, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 852, DateTimeKind.Utc).AddTicks(1793), 2.5f, 2, "The {{c1::multinoulli distribution}} or {{c1::categorical distribution}} generalizes the Bernoulli distribution over k different classes. The PMF for the distribution is {{c1::$f(x \\mid \\boldsymbol{p})=\\prod_{i=1}^{k} p_{i}^{[x=i]}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 349, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 852, DateTimeKind.Utc).AddTicks(1726), 2.5f, 2, "The {{c1::multinoulli distribution}} or {{c1::categorical distribution}} generalizes the Bernoulli distribution over k different classes. The PMF for the distribution is {{c1::$f(x \\mid \\boldsymbol{p})=\\prod_{i=1}^{k} p_{i}^{[x=i]}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 348, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 852, DateTimeKind.Utc).AddTicks(1689), 2.5f, 2, "The {{c1::multinoulli distribution}} or {{c1::categorical distribution}} generalizes the Bernoulli distribution over k different classes. The PMF for the distribution is {{c1::$f(x \\mid \\boldsymbol{p})=\\prod_{i=1}^{k} p_{i}^{[x=i]}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 347, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 852, DateTimeKind.Utc).AddTicks(1030), 2.5f, 2, "The variance of a Bernoulli distribution with parameter $\\phi$ is {{c1::$\\phi(1-\\phi)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 346, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 852, DateTimeKind.Utc).AddTicks(477), 2.5f, 2, "The PMF for the {{c1::Bernoulli distribution}} is given by {{c2::$P(\\mathrm{x}=x)=\\phi^{x}(1-\\phi)^{1-x}$}} and is typically abbreviated as {{c1::Bernoulli(p)}} or {{c1::B(1, p) because of its relationship to the binomial distribution.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 345, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 852, DateTimeKind.Utc).AddTicks(406), 2.5f, 2, "The PMF for the {{c1::Bernoulli distribution}} is given by {{c2::$P(\\mathrm{x}=x)=\\phi^{x}(1-\\phi)^{1-x}$}} and is typically abbreviated as {{c1::Bernoulli(p)}} or {{c1::B(1, p) because of its relationship to the binomial distribution.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 344, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 852, DateTimeKind.Utc).AddTicks(385), 2.5f, 2, "The PMF for the {{c1::Bernoulli distribution}} is given by {{c2::$P(\\mathrm{x}=x)=\\phi^{x}(1-\\phi)^{1-x}$}} and is typically abbreviated as {{c1::Bernoulli(p)}} or {{c1::B(1, p) because of its relationship to the binomial distribution.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 343, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 852, DateTimeKind.Utc).AddTicks(327), 2.5f, 2, "The PMF for the {{c1::Bernoulli distribution}} is given by {{c2::$P(\\mathrm{x}=x)=\\phi^{x}(1-\\phi)^{1-x}$}} and is typically abbreviated as {{c1::Bernoulli(p)}} or {{c1::B(1, p) because of its relationship to the binomial distribution.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 342, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(9600), 2.5f, 2, "The {{c1::Bernoulli distribution}} gives a distribution over {{c2::a single binary random variable.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 341, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(9553), 2.5f, 2, "The {{c1::Bernoulli distribution}} gives a distribution over {{c2::a single binary random variable.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 340, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(8953), 2.5f, 2, "The {{c1::covariance matrix}} is the {{c2::matrix of covariances between elements of the random vector.}} It is defined by {{c3::$\\operatorname{Cov}(\\mathbf{x})_{i, j}=\\operatorname{Cov}\\left(\\mathbf{x}_{i}, \\mathbf{x}_{j}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 339, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(8842), 2.5f, 2, "The {{c1::covariance matrix}} is the {{c2::matrix of covariances between elements of the random vector.}} It is defined by {{c3::$\\operatorname{Cov}(\\mathbf{x})_{i, j}=\\operatorname{Cov}\\left(\\mathbf{x}_{i}, \\mathbf{x}_{j}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 338, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(8770), 2.5f, 2, "The {{c1::covariance matrix}} is the {{c2::matrix of covariances between elements of the random vector.}} It is defined by {{c3::$\\operatorname{Cov}(\\mathbf{x})_{i, j}=\\operatorname{Cov}\\left(\\mathbf{x}_{i}, \\mathbf{x}_{j}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 337, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 851, DateTimeKind.Utc).AddTicks(8074), 2.5f, 2, "The {{c1::covariance}} gives a crude sense of how much {{c2::two random variables are linearly related to one another.}} It is defined through {{c3::$\\operatorname{Cov}(f(x), g(y))=\\mathbb{E}[(f(x)-\\mathbb{E}[f(x)])(g(y)-\\mathbb{E}[g(y)])]$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 306, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(8927), 2.5f, 2, "Uncertainty about our models of a system come from (at least) three places: 1. {{c1::Inherent stochasticity in the system (as in QM)}} 2. {{c2::Incomplete observability of the state of the system}} 3. {{c3::Incomplete or inappropriate modeling of a system}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 364, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 852, DateTimeKind.Utc).AddTicks(9685), 2.5f, 2, "A {{c1::latent variable}} is a random variable that {{c2::we do not or cannot observe}}. One use in the case of a mixture model is {{c3::to denote a class label representing the generating mixture component, drawn from a multinoulli distribution}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 305, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(8871), 2.5f, 2, "Uncertainty about our models of a system come from (at least) three places: 1. {{c1::Inherent stochasticity in the system (as in QM)}} 2. {{c2::Incomplete observability of the state of the system}} 3. {{c3::Incomplete or inappropriate modeling of a system}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 303, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(7992), 2.5f, 2, "Matrices {{c1::commute cyclically}} inside a trace.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 271, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(8290), 2.5f, 2, "The definition of the {{c1::$L^p$ norm}} is {{c2::$\\left|\\left|x\\right|\\right|_p = \\left(\\sum_i|x_i|^p\\right)^{1/p}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 270, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(8212), 2.5f, 2, "The definition of the {{c1::$L^p$ norm}} is {{c2::$\\left|\\left|x\\right|\\right|_p = \\left(\\sum_i|x_i|^p\\right)^{1/p}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 269, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(7684), 2.5f, 2, "A {{c1::singular matrix}} is one which has {{c2::linearly dependent rows or columns}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 268, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(7639), 2.5f, 2, "A {{c1::singular matrix}} is one which has {{c2::linearly dependent rows or columns}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 267, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(7143), 2.5f, 2, "The {{c1::span of all of the columns of a matrix}} is called the {{c2::column space}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 266, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(7120), 2.5f, 2, "The {{c1::span of all of the columns of a matrix}} is called the {{c2::column space}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 265, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(6592), 2.5f, 2, "The {{c1::span}} of a set of vectors is the {{c2::set of all points obtainable by a linear combination of the set}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 264, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(6518), 2.5f, 2, "The {{c1::span}} of a set of vectors is the {{c2::set of all points obtainable by a linear combination of the set}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 263, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(6004), 2.5f, 2, "The {{c1::elementwise product of matrices}} is called the {{c2::Hadamard product}} and is often depicted as {{c3::$\\textbf{A}\\odot \\textbf{B}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 262, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(5934), 2.5f, 2, "The {{c1::elementwise product of matrices}} is called the {{c2::Hadamard product}} and is often depicted as {{c3::$\\textbf{A}\\odot \\textbf{B}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 261, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(5906), 2.5f, 2, "The {{c1::elementwise product of matrices}} is called the {{c2::Hadamard product}} and is often depicted as {{c3::$\\textbf{A}\\odot \\textbf{B}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 260, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(5343), 2.5f, 2, "What is the difference between localist and distributed representations?", new TimeSpan(0, 0, 10, 0, 0), 2, "\"A localist representation is one where a single learned feature is used to represent every single possible instantiation of a concept. This is as opposed to a distributed representation where there can be a many-to-many relationship between neurons and concepts. At a coarse level, distributed representations allow expressing adjectival phrases and conjunctions. I.e., there are concepts for \"\"red\"\" and concepts for \"\"car\"\" and each of these participate in expressing the concept of \"\"the redness of some cars\"\". In a distributed representation, each concept is represented by many local features and many local features participate in the representation of many concepts (many-to-many).\"" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 272, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(8771), 2.5f, 2, "What are a few interesting special cases of the $L^p$ norm?", new TimeSpan(0, 0, 10, 0, 0), 2, "When p=1, we obtain the Manhattan distance which helps to encourage sparsity. In the case where p=2, we get the Euclidean norm. In the case where $p=\\infty$ we obtain the max norm which measures the maximum absolute value of any component of the input vector." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 259, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(4908), 2.5f, 2, "Is there evidence of a single learning algorithm in the brain?", new TimeSpan(0, 0, 10, 0, 0), 2, "Some indirect evidence, yes. In animal models (notably ferrets), individuals that have had their sensory inputs rewired have demonstrated that brain regions previously used for auditory processing can learn to see." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 257, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(4425), 2.5f, 2, "{{c1::Deep learning}} is a form of {{c2::representation learning}} which is a form of {{c3::machine learning}} which is one approach in the discipline of {{c4::artificial intelligence}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 256, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(4400), 2.5f, 2, "{{c1::Deep learning}} is a form of {{c2::representation learning}} which is a form of {{c3::machine learning}} which is one approach in the discipline of {{c4::artificial intelligence}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 255, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(4365), 2.5f, 2, "{{c1::Deep learning}} is a form of {{c2::representation learning}} which is a form of {{c3::machine learning}} which is one approach in the discipline of {{c4::artificial intelligence}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 254, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(3858), 2.5f, 2, "If we are asked to perform a task requiring only simple concepts to explain, does it make sense to allow the system to learn more complicated concepts?", new TimeSpan(0, 0, 10, 0, 0), 2, "Yes, often. Knowledge of complex ideas allows us to refine our understanding of simpler ideas. If you want to identify books in images, it helps to know about the idea of a bookshelf, because then if our system observes several books next to one another, it might be encouraged to identify book-like objects adjacent that might otherwise be misclassified." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 253, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(3484), 2.5f, 2, "\"Deep learning is well and poorly named because \"\"deep\"\" is overloaded. What are three ways in which we mean deep?\"", new TimeSpan(0, 0, 10, 0, 0), 2, "1. Sometimes people are being imprecise and are using deep learning to refer to deep neural networks, in which case depth is a formal concept expressing the path length through the network from input to output. 2. At a conceptual level, deep learning refers to learning a graph of concepts or features which embed data into a space where performing some task is straightforward. This is directly related to representation learning. 3. Deep is also meant to convey that the computation stack is deep. This is connected to the previous: computing high level features typically requires computing the lower level ones first." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 252, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(3029), 2.5f, 2, "What is the relationship between deep learning and representation learning?", new TimeSpan(0, 0, 10, 0, 0), 2, "\"Unfortunately, learning representations is essentially as hard as the original stated problems. If we could learn when an image had windows, wheels, doors, hubcaps, or roads in them, it would be much more straightforward to know when they contain cars. This is because relevant concepts are only slightly shallower than the domain problem. Equivalently, conceptual knowledge is deep and stacked upon many prior concepts. Deep learning provides an idea, which is that the learned representation should be expressed in terms of simpler \"\"concepts\"\" (features). This feature stack is allowed to be deep when we measure the concept distance between the discriminating features and the raw input features.\"" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 251, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(2590), 2.5f, 2, "When designing features, we try to separate the {{c1::factors of variance}} that explain the range of observed data. By {{c1::factors of variance}} we mean {{c2::sources of influence}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 250, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(2562), 2.5f, 2, "When designing features, we try to separate the {{c1::factors of variance}} that explain the range of observed data. By {{c1::factors of variance}} we mean {{c2::sources of influence}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 249, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(2531), 2.5f, 2, "When designing features, we try to separate the {{c1::factors of variance}} that explain the range of observed data. By {{c1::factors of variance}} we mean {{c2::sources of influence}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 248, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(2007), 2.5f, 2, "What are some core motivations for autoencoders?", new TimeSpan(0, 0, 10, 0, 0), 2, "\"Autoencoders are related to compression, we aim to identify features that allow us to preserve the essential variations between observed data. This encourages a system to learn the core structure and concepts of a distribution of data because compression schemes that are concept aware are very effective: i.e. \"\"there is a car in the upper left corner of the image\"\".\"" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 247, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(1509), 2.5f, 2, "An {{c2::autoencoder}} is a combination of an {{c1::encoder function}} which {{c1::converts data to a different representation}} and a {{c1::decoder that converts data back}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 246, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(1468), 2.5f, 2, "An {{c2::autoencoder}} is a combination of an {{c1::encoder function}} which {{c1::converts data to a different representation}} and a {{c1::decoder that converts data back}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 258, 4, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(4458), 2.5f, 2, "{{c1::Deep learning}} is a form of {{c2::representation learning}} which is a form of {{c3::machine learning}} which is one approach in the discipline of {{c4::artificial intelligence}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 273, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(9459), 2.5f, 2, "A norm is any function that satisfies 1. {{c1::$f(\\textbf{x}) = 0 \\Rightarrow \\textbf{x} = 0$}} 2. {{c2::$f(\\textbf{x} + \\textbf{y})\\leq f(\\textbf{x}) + f(\\textbf{y})$, the triangle inequality}} 3. {{c3::$\\forall\\alpha\\in\\mathbb{R},f(\\alpha\\textbf{x}) = |\\alpha|f(\\textbf{x})$, linearity}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 274, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(9613), 2.5f, 2, "A norm is any function that satisfies 1. {{c1::$f(\\textbf{x}) = 0 \\Rightarrow \\textbf{x} = 0$}} 2. {{c2::$f(\\textbf{x} + \\textbf{y})\\leq f(\\textbf{x}) + f(\\textbf{y})$, the triangle inequality}} 3. {{c3::$\\forall\\alpha\\in\\mathbb{R},f(\\alpha\\textbf{x}) = |\\alpha|f(\\textbf{x})$, linearity}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 275, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(9704), 2.5f, 2, "A norm is any function that satisfies 1. {{c1::$f(\\textbf{x}) = 0 \\Rightarrow \\textbf{x} = 0$}} 2. {{c2::$f(\\textbf{x} + \\textbf{y})\\leq f(\\textbf{x}) + f(\\textbf{y})$, the triangle inequality}} 3. {{c3::$\\forall\\alpha\\in\\mathbb{R},f(\\alpha\\textbf{x}) = |\\alpha|f(\\textbf{x})$, linearity}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 302, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(7504), 2.5f, 2, "(Trace transpose) {{c1::$\\text{Tr}(\\textbf{A})$}} = {{c2::$\\text{Tr}(\\textbf{A}^\\intercal)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 301, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(7459), 2.5f, 2, "(Trace transpose) {{c1::$\\text{Tr}(\\textbf{A})$}} = {{c2::$\\text{Tr}(\\textbf{A}^\\intercal)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 300, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(6886), 2.5f, 2, "{{c1::(Trace property) $||\\textbf{A}||_F$}} = {{c2::$\\sqrt{\\text{Tr}(\\textbf{AA}^\\intercal)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 299, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(6833), 2.5f, 2, "{{c1::(Trace property) $||\\textbf{A}||_F$}} = {{c2::$\\sqrt{\\text{Tr}(\\textbf{AA}^\\intercal)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 298, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(6271), 2.5f, 2, "What is the role of the Moore-Penrose pseudoinverse in the case of solving linear equations?", new TimeSpan(0, 0, 10, 0, 0), 2, "Sometimes solving $\\textbf{Ax} = \\textbf{b}$ has either many solutions for $\\textbf{x}$ or none at all. In the case where there are many solutions, typically when $\\textbf{A}$ has more columns than rows, the value $\\textbf{x}=\\textbf{A}^+\\textbf{y}$ produces $\\textbf{x}$ with minimal norm. In the case there is no solution, the same quantity produces the value of $\\textbf{x}$ which minimizes $||\\textbf{Ax}-\\textbf{y}||_2$." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 297, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(5797), 2.5f, 2, "How is the Moore-Penrose pseudoinverse typically calculated?", new TimeSpan(0, 0, 10, 0, 0), 2, "Typically, you perform a singular value decomposition, at which point $\\textbf{A}^+=\\textbf{V}\\textbf{D}^{+}\\textbf{U}^\\intercal$. This reduces the problem to the question of finding the pseudoinverse of $\\textbf{D}$ which amounts just to taking the reciprocal of the nonzero elements and transposing." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 296, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(5418), 2.5f, 2, "The {{c1::Moore-Penrose pseudoinverse}} is defined through {{c2::$\\textbf{A}^+=\\lim_{\\alpha\\rightarrow0}(\\textbf{A}^\\intercal\\textbf{A}+\\alpha\\textbf{I})^{-1}\\textbf{A}^\\intercal$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 295, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(5292), 2.5f, 2, "The {{c1::Moore-Penrose pseudoinverse}} is defined through {{c2::$\\textbf{A}^+=\\lim_{\\alpha\\rightarrow0}(\\textbf{A}^\\intercal\\textbf{A}+\\alpha\\textbf{I})^{-1}\\textbf{A}^\\intercal$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 294, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(4555), 2.5f, 2, "The {{c1::singular value decomposition of a matrix}} is a decomposition into the form {{c2::$\\textbf{A}=\\textbf{U}\\textbf{D}\\textbf{V}^\\intercal$}}. The {{c1::columns of $\\textbf{U},\\textbf{V}$}} are called {{c1::left- and right-singular vectors respectively}}. Left singular vectors are eigenvectors of {{c3::$\\textbf{AA}^\\intercal$}}. The {{c1::$\\textbf{D}$ matrix}} is {{c3::diagonal but not necessarily square}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 293, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(4513), 2.5f, 2, "The {{c1::singular value decomposition of a matrix}} is a decomposition into the form {{c2::$\\textbf{A}=\\textbf{U}\\textbf{D}\\textbf{V}^\\intercal$}}. The {{c1::columns of $\\textbf{U},\\textbf{V}$}} are called {{c1::left- and right-singular vectors respectively}}. Left singular vectors are eigenvectors of {{c3::$\\textbf{AA}^\\intercal$}}. The {{c1::$\\textbf{D}$ matrix}} is {{c3::diagonal but not necessarily square}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 292, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(4486), 2.5f, 2, "The {{c1::singular value decomposition of a matrix}} is a decomposition into the form {{c2::$\\textbf{A}=\\textbf{U}\\textbf{D}\\textbf{V}^\\intercal$}}. The {{c1::columns of $\\textbf{U},\\textbf{V}$}} are called {{c1::left- and right-singular vectors respectively}}. Left singular vectors are eigenvectors of {{c3::$\\textbf{AA}^\\intercal$}}. The {{c1::$\\textbf{D}$ matrix}} is {{c3::diagonal but not necessarily square}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 291, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(4453), 2.5f, 2, "The {{c1::singular value decomposition of a matrix}} is a decomposition into the form {{c2::$\\textbf{A}=\\textbf{U}\\textbf{D}\\textbf{V}^\\intercal$}}. The {{c1::columns of $\\textbf{U},\\textbf{V}$}} are called {{c1::left- and right-singular vectors respectively}}. Left singular vectors are eigenvectors of {{c3::$\\textbf{AA}^\\intercal$}}. The {{c1::$\\textbf{D}$ matrix}} is {{c3::diagonal but not necessarily square}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 290, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(4400), 2.5f, 2, "The {{c1::singular value decomposition of a matrix}} is a decomposition into the form {{c2::$\\textbf{A}=\\textbf{U}\\textbf{D}\\textbf{V}^\\intercal$}}. The {{c1::columns of $\\textbf{U},\\textbf{V}$}} are called {{c1::left- and right-singular vectors respectively}}. Left singular vectors are eigenvectors of {{c3::$\\textbf{AA}^\\intercal$}}. The {{c1::$\\textbf{D}$ matrix}} is {{c3::diagonal but not necessarily square}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 289, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(4356), 2.5f, 2, "The {{c1::singular value decomposition of a matrix}} is a decomposition into the form {{c2::$\\textbf{A}=\\textbf{U}\\textbf{D}\\textbf{V}^\\intercal$}}. The {{c1::columns of $\\textbf{U},\\textbf{V}$}} are called {{c1::left- and right-singular vectors respectively}}. Left singular vectors are eigenvectors of {{c3::$\\textbf{AA}^\\intercal$}}. The {{c1::$\\textbf{D}$ matrix}} is {{c3::diagonal but not necessarily square}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 288, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(4252), 2.5f, 2, "The {{c1::singular value decomposition of a matrix}} is a decomposition into the form {{c2::$\\textbf{A}=\\textbf{U}\\textbf{D}\\textbf{V}^\\intercal$}}. The {{c1::columns of $\\textbf{U},\\textbf{V}$}} are called {{c1::left- and right-singular vectors respectively}}. Left singular vectors are eigenvectors of {{c3::$\\textbf{AA}^\\intercal$}}. The {{c1::$\\textbf{D}$ matrix}} is {{c3::diagonal but not necessarily square}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 287, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(3626), 2.5f, 2, "What is the relationship between definiteness of a matrix and quadratic forms?", new TimeSpan(0, 0, 10, 0, 0), 2, "If $\\textbf{A}$ is positive semidefinite, then $f(x)=\\textbf{x}^\\intercal\\textbf{A}\\textbf{x}\\geq 0$, which is sometimes taken as a definition of positive semidefiniteness." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 286, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(3250), 2.5f, 2, "A {{c1::positive definite}} matrix is one that {{c2::has all positive eigenvalues}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 285, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(3210), 2.5f, 2, "A {{c1::positive definite}} matrix is one that {{c2::has all positive eigenvalues}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 284, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(2709), 2.5f, 2, "Every {{c1::real symmetric matrix}} can be expressed {{c2::in any eigendecomposition, $\\textbf{A} = \\textbf{V}\\text{diag}(\\boldsymbol{\\lambda})\\textbf{V}^{-1}$, with real eigenvectors and eigenvalues}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 283, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(2558), 2.5f, 2, "Every {{c1::real symmetric matrix}} can be expressed {{c2::in any eigendecomposition, $\\textbf{A} = \\textbf{V}\\text{diag}(\\boldsymbol{\\lambda})\\textbf{V}^{-1}$, with real eigenvectors and eigenvalues}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 282, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(1983), 2.5f, 2, "A {{c1::right eigenvector or just an eigenvector}} is one that satisfies {{c2::$\\textbf{Av}=\\lambda\\textbf{v}$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 281, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(1940), 2.5f, 2, "A {{c1::right eigenvector or just an eigenvector}} is one that satisfies {{c2::$\\textbf{Av}=\\lambda\\textbf{v}$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 280, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(1384), 2.5f, 2, "What is the difference between right and left eigenvectors?", new TimeSpan(0, 0, 10, 0, 0), 2, "Only the side that we view the matrix as acting from. Typically we work with right eigenvectors." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 279, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(1008), 2.5f, 2, "An {{c1::orthogonal matrix}} is a {{c2::square matrix satisfying $\\textbf{A}^\\intercal\\textbf{A} = \\textbf{I}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 278, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(927), 2.5f, 2, "An {{c1::orthogonal matrix}} is a {{c2::square matrix satisfying $\\textbf{A}^\\intercal\\textbf{A} = \\textbf{I}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 277, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(362), 2.5f, 2, "The {{c1::Frobenius norm}} is given by {{c2::$||A||_F = \\sqrt{\\sum_{ij}A_{ij}^2}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 276, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(314), 2.5f, 2, "The {{c1::Frobenius norm}} is given by {{c2::$||A||_F = \\sqrt{\\sum_{ij}A_{ij}^2}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 304, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 850, DateTimeKind.Utc).AddTicks(8806), 2.5f, 2, "Uncertainty about our models of a system come from (at least) three places: 1. {{c1::Inherent stochasticity in the system (as in QM)}} 2. {{c2::Incomplete observability of the state of the system}} 3. {{c3::Incomplete or inappropriate modeling of a system}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 245, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(1384), 2.5f, 2, "An {{c2::autoencoder}} is a combination of an {{c1::encoder function}} which {{c1::converts data to a different representation}} and a {{c1::decoder that converts data back}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 365, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 852, DateTimeKind.Utc).AddTicks(9787), 2.5f, 2, "A {{c1::latent variable}} is a random variable that {{c2::we do not or cannot observe}}. One use in the case of a mixture model is {{c3::to denote a class label representing the generating mixture component, drawn from a multinoulli distribution}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 367, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 853, DateTimeKind.Utc).AddTicks(1042), 2.5f, 2, "A model is said to be a {{c1::universal approximator}} if {{c2::any smooth density can be approximated to any fidelity by the model with appropriate parameters}}. A common example is {{c1::the Gaussian mixture model}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 454, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(8577), 2.5f, 2, "{{c1::Complementary slackness}} refers to how at optimal points for the dual solution either {{c2::the Lagrange multiplier associated to a constraint is zero or the constraint is active.}} Mathematically: {{c2::$\\boldsymbol{\\alpha}\\odot\\boldsymbol{h}(\\boldsymbol{x})=0$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 453, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(7468), 2.5f, 2, "In Karush-Kuhn-Tucker, the Lagrangian is also called the {{c1::dual function}} and the whole approach is sometimes called {{c1:: the primal-dual approach to constrained optimization}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 452, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(7394), 2.5f, 2, "In Karush-Kuhn-Tucker, the Lagrangian is also called the {{c1::dual function}} and the whole approach is sometimes called {{c1:: the primal-dual approach to constrained optimization}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 451, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(6722), 2.5f, 2, "In the KKT method, an optimization constraint is called {{c1::active}} if the {{c2::dual Lagrange multiplier is equal to zero}}. Geometrically, this means {{c3::the point where the optimal value is achieved is on the boundary defined by the constraint}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 450, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(6625), 2.5f, 2, "In the KKT method, an optimization constraint is called {{c1::active}} if the {{c2::dual Lagrange multiplier is equal to zero}}. Geometrically, this means {{c3::the point where the optimal value is achieved is on the boundary defined by the constraint}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 449, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(6558), 2.5f, 2, "In the KKT method, an optimization constraint is called {{c1::active}} if the {{c2::dual Lagrange multiplier is equal to zero}}. Geometrically, this means {{c3::the point where the optimal value is achieved is on the boundary defined by the constraint}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 448, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(5777), 2.5f, 2, "In the KKT method given Lagrangian $L(\\boldsymbol{x}, \\boldsymbol{\\lambda}, \\boldsymbol{\\alpha})=f(\\boldsymbol{x})+\\sum_{i} \\lambda_{i} g^{(i)}(\\boldsymbol{x})+\\sum_{j} \\alpha_{j} h^{(j)}(\\boldsymbol{x})$ there is an equivalence between {{c1::$\\min _{\\boldsymbol{x} \\in \\mathbb{S} } f(\\boldsymbol{x})$}} and {{c2::$\\min _{\\boldsymbol{x} } \\max _{\\boldsymbol{\\lambda} } \\max _{\\boldsymbol{\\alpha}, \\boldsymbol{\\alpha} \\geq 0} L(\\boldsymbol{x}, \\boldsymbol{\\lambda}, \\boldsymbol{\\alpha})$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 447, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(5595), 2.5f, 2, "In the KKT method given Lagrangian $L(\\boldsymbol{x}, \\boldsymbol{\\lambda}, \\boldsymbol{\\alpha})=f(\\boldsymbol{x})+\\sum_{i} \\lambda_{i} g^{(i)}(\\boldsymbol{x})+\\sum_{j} \\alpha_{j} h^{(j)}(\\boldsymbol{x})$ there is an equivalence between {{c1::$\\min _{\\boldsymbol{x} \\in \\mathbb{S} } f(\\boldsymbol{x})$}} and {{c2::$\\min _{\\boldsymbol{x} } \\max _{\\boldsymbol{\\lambda} } \\max _{\\boldsymbol{\\alpha}, \\boldsymbol{\\alpha} \\geq 0} L(\\boldsymbol{x}, \\boldsymbol{\\lambda}, \\boldsymbol{\\alpha})$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 446, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(4683), 2.5f, 2, "The {{c1::Karush-Kuhn-Tucker (KKT)}} approach to constrained optimization is to {{c2::transform a constrained problem into an unconstrained one by use of a clever generalized Lagrange function}}. The {{c1::KKT Lagrangian}} for constraints $\\mathbb{S}=\\left\\{\\boldsymbol{x} \\mid \\forall i, g^{(i)}(\\boldsymbol{x})=0 \\text { and } \\forall j, h^{(j)}(\\boldsymbol{x}) \\leq 0\\right\\}$ is given by {{c3::$L(\\boldsymbol{x}, \\boldsymbol{\\lambda}, \\boldsymbol{\\alpha})=f(\\boldsymbol{x})+\\sum_{i} \\lambda_{i} g^{(i)}(\\boldsymbol{x})+\\sum_{j} \\alpha_{j} h^{(j)}(\\boldsymbol{x})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 445, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(4442), 2.5f, 2, "The {{c1::Karush-Kuhn-Tucker (KKT)}} approach to constrained optimization is to {{c2::transform a constrained problem into an unconstrained one by use of a clever generalized Lagrange function}}. The {{c1::KKT Lagrangian}} for constraints $\\mathbb{S}=\\left\\{\\boldsymbol{x} \\mid \\forall i, g^{(i)}(\\boldsymbol{x})=0 \\text { and } \\forall j, h^{(j)}(\\boldsymbol{x}) \\leq 0\\right\\}$ is given by {{c3::$L(\\boldsymbol{x}, \\boldsymbol{\\lambda}, \\boldsymbol{\\alpha})=f(\\boldsymbol{x})+\\sum_{i} \\lambda_{i} g^{(i)}(\\boldsymbol{x})+\\sum_{j} \\alpha_{j} h^{(j)}(\\boldsymbol{x})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 444, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(4418), 2.5f, 2, "The {{c1::Karush-Kuhn-Tucker (KKT)}} approach to constrained optimization is to {{c2::transform a constrained problem into an unconstrained one by use of a clever generalized Lagrange function}}. The {{c1::KKT Lagrangian}} for constraints $\\mathbb{S}=\\left\\{\\boldsymbol{x} \\mid \\forall i, g^{(i)}(\\boldsymbol{x})=0 \\text { and } \\forall j, h^{(j)}(\\boldsymbol{x}) \\leq 0\\right\\}$ is given by {{c3::$L(\\boldsymbol{x}, \\boldsymbol{\\lambda}, \\boldsymbol{\\alpha})=f(\\boldsymbol{x})+\\sum_{i} \\lambda_{i} g^{(i)}(\\boldsymbol{x})+\\sum_{j} \\alpha_{j} h^{(j)}(\\boldsymbol{x})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 443, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(4298), 2.5f, 2, "The {{c1::Karush-Kuhn-Tucker (KKT)}} approach to constrained optimization is to {{c2::transform a constrained problem into an unconstrained one by use of a clever generalized Lagrange function}}. The {{c1::KKT Lagrangian}} for constraints $\\mathbb{S}=\\left\\{\\boldsymbol{x} \\mid \\forall i, g^{(i)}(\\boldsymbol{x})=0 \\text { and } \\forall j, h^{(j)}(\\boldsymbol{x}) \\leq 0\\right\\}$ is given by {{c3::$L(\\boldsymbol{x}, \\boldsymbol{\\lambda}, \\boldsymbol{\\alpha})=f(\\boldsymbol{x})+\\sum_{i} \\lambda_{i} g^{(i)}(\\boldsymbol{x})+\\sum_{j} \\alpha_{j} h^{(j)}(\\boldsymbol{x})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 455, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(8692), 2.5f, 2, "{{c1::Complementary slackness}} refers to how at optimal points for the dual solution either {{c2::the Lagrange multiplier associated to a constraint is zero or the constraint is active.}} Mathematically: {{c2::$\\boldsymbol{\\alpha}\\odot\\boldsymbol{h}(\\boldsymbol{x})=0$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 442, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(3353), 2.5f, 2, "If we wish {{c2::to optimize a function over a restricted space}} we are performing {{c1::constrained optimization}}. This space is called {{c2::the feasible region}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 440, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(3285), 2.5f, 2, "If we wish {{c2::to optimize a function over a restricted space}} we are performing {{c1::constrained optimization}}. This space is called {{c2::the feasible region}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 439, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(2532), 2.5f, 2, "A {{c1::Lipschitz continuous}} function is one whose {{c2::rate of change is bounded by a constant, called the Lipschitz constant}}. We can express this mathematically as {{c2::$\\forall \\boldsymbol{x}, \\forall \\boldsymbol{y},|f(\\boldsymbol{x})-f(\\boldsymbol{y})| \\leq \\mathcal{L}|| \\boldsymbol{x}-\\boldsymbol{y} \\|_{2}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 438, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(2366), 2.5f, 2, "A {{c1::Lipschitz continuous}} function is one whose {{c2::rate of change is bounded by a constant, called the Lipschitz constant}}. We can express this mathematically as {{c2::$\\forall \\boldsymbol{x}, \\forall \\boldsymbol{y},|f(\\boldsymbol{x})-f(\\boldsymbol{y})| \\leq \\mathcal{L}|| \\boldsymbol{x}-\\boldsymbol{y} \\|_{2}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 437, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(2276), 2.5f, 2, "A {{c1::Lipschitz continuous}} function is one whose {{c2::rate of change is bounded by a constant, called the Lipschitz constant}}. We can express this mathematically as {{c2::$\\forall \\boldsymbol{x}, \\forall \\boldsymbol{y},|f(\\boldsymbol{x})-f(\\boldsymbol{y})| \\leq \\mathcal{L}|| \\boldsymbol{x}-\\boldsymbol{y} \\|_{2}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 436, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(1581), 2.5f, 2, "{{c1::First order}} optimization methods use only {{c2::the gradient}} while {{c1::second order}} methods also use {{c2::the Hessian}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 435, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(1559), 2.5f, 2, "{{c1::First order}} optimization methods use only {{c2::the gradient}} while {{c1::second order}} methods also use {{c2::the Hessian}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 434, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(1477), 2.5f, 2, "{{c1::First order}} optimization methods use only {{c2::the gradient}} while {{c1::second order}} methods also use {{c2::the Hessian}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 433, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(1449), 2.5f, 2, "{{c1::First order}} optimization methods use only {{c2::the gradient}} while {{c1::second order}} methods also use {{c2::the Hessian}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 432, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(908), 2.5f, 2, "{{c1::Newton's method}} can be used to take a step towards a critical point by using the update rule {{c2::$\\boldsymbol{x}^{*}=\\boldsymbol{x}^{(0)}-\\boldsymbol{H}(f)\\left(\\boldsymbol{x}^{(0)}\\right)^{-1} \\nabla_{\\boldsymbol{x} } f\\left(\\boldsymbol{x}^{(0)}\\right)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 431, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(739), 2.5f, 2, "{{c1::Newton's method}} can be used to take a step towards a critical point by using the update rule {{c2::$\\boldsymbol{x}^{*}=\\boldsymbol{x}^{(0)}-\\boldsymbol{H}(f)\\left(\\boldsymbol{x}^{(0)}\\right)^{-1} \\nabla_{\\boldsymbol{x} } f\\left(\\boldsymbol{x}^{(0)}\\right)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 430, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(98), 2.5f, 2, "The {{c1::eigenvalues}} of the Hessian are related to {{c2::the local curvature}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 429, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(67), 2.5f, 2, "The {{c1::eigenvalues}} of the Hessian are related to {{c2::the local curvature}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 441, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(3326), 2.5f, 2, "If we wish {{c2::to optimize a function over a restricted space}} we are performing {{c1::constrained optimization}}. This space is called {{c2::the feasible region}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 456, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(8824), 2.5f, 2, "{{c1::Complementary slackness}} refers to how at optimal points for the dual solution either {{c2::the Lagrange multiplier associated to a constraint is zero or the constraint is active.}} Mathematically: {{c2::$\\boldsymbol{\\alpha}\\odot\\boldsymbol{h}(\\boldsymbol{x})=0$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 457, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(9498), 2.5f, 2, "In {{c1::classification problems}} a system is asked {{c2::to specify which of some k different categories a data point belongs to, or to give a probability distribution over the classes}}. The seminal example is {{c3::object recognition in computer vision}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 458, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(9640), 2.5f, 2, "In {{c1::classification problems}} a system is asked {{c2::to specify which of some k different categories a data point belongs to, or to give a probability distribution over the classes}}. The seminal example is {{c3::object recognition in computer vision}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 485, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(7677), 2.5f, 2, "{{c1::Denoising}} can be thought of as either as a {{c2::density estimation learning problem, or as a regression roblem where the target space is the same as the feature space}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 484, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(7552), 2.5f, 2, "{{c1::Denoising}} can be thought of as either as a {{c2::density estimation learning problem, or as a regression roblem where the target space is the same as the feature space}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 483, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(6979), 2.5f, 2, "In the case of {{c1::imputation of missing values}}, our system attempts to {{c2::fill in missing values from its inputs}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 482, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(6930), 2.5f, 2, "In the case of {{c1::imputation of missing values}}, our system attempts to {{c2::fill in missing values from its inputs}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 481, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(6324), 2.5f, 2, "For {{c1::synthesis and sampling}} tasks, a system is asked to {{c2::generate new samples that are similar to training data}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 480, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(6259), 2.5f, 2, "For {{c1::synthesis and sampling}} tasks, a system is asked to {{c2::generate new samples that are similar to training data}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 479, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(5724), 2.5f, 2, "In {{c1::anomaly detection}} we are asked to {{c2::flag or label atypical data, often in an event stream}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 478, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(5660), 2.5f, 2, "In {{c1::anomaly detection}} we are asked to {{c2::flag or label atypical data, often in an event stream}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 477, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(5047), 2.5f, 2, "In {{c1::structured output}} tasks, we aim to {{c2::produce an output vector with some relationship between the elements.}} This task category subsumes {{c1::transcription and translation tasks}}. A classic example in computer vision is {{c3::pixel-wise segmentation}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 476, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(5016), 2.5f, 2, "In {{c1::structured output}} tasks, we aim to {{c2::produce an output vector with some relationship between the elements.}} This task category subsumes {{c1::transcription and translation tasks}}. A classic example in computer vision is {{c3::pixel-wise segmentation}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 475, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(4973), 2.5f, 2, "In {{c1::structured output}} tasks, we aim to {{c2::produce an output vector with some relationship between the elements.}} This task category subsumes {{c1::transcription and translation tasks}}. A classic example in computer vision is {{c3::pixel-wise segmentation}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 474, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(4893), 2.5f, 2, "In {{c1::structured output}} tasks, we aim to {{c2::produce an output vector with some relationship between the elements.}} This task category subsumes {{c1::transcription and translation tasks}}. A classic example in computer vision is {{c3::pixel-wise segmentation}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 473, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(4079), 2.5f, 2, "{{c1::Machine translatio}} is when we ask a system to perform {{c2::text to text}} modeling.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 472, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(4054), 2.5f, 2, "{{c1::Machine translatio}} is when we ask a system to perform {{c2::text to text}} modeling.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 471, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(3355), 2.5f, 2, "In {{c1::transcription}} our system takes {{c2::an unstructured form of data}} and is asked to provide {{c2::a textual representation}}. Two classic examples are {{c2::OCR and speech recognition}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 470, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(3319), 2.5f, 2, "In {{c1::transcription}} our system takes {{c2::an unstructured form of data}} and is asked to provide {{c2::a textual representation}}. Two classic examples are {{c2::OCR and speech recognition}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 469, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(3287), 2.5f, 2, "In {{c1::transcription}} our system takes {{c2::an unstructured form of data}} and is asked to provide {{c2::a textual representation}}. Two classic examples are {{c2::OCR and speech recognition}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 468, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(3239), 2.5f, 2, "In {{c1::transcription}} our system takes {{c2::an unstructured form of data}} and is asked to provide {{c2::a textual representation}}. Two classic examples are {{c2::OCR and speech recognition}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 467, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(2213), 2.5f, 2, "{{c1::Regression}} involves {{c2::predicting a numerical target}} as opposed to {{c2::a categorical target}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 466, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(2184), 2.5f, 2, "{{c1::Regression}} involves {{c2::predicting a numerical target}} as opposed to {{c2::a categorical target}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 465, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(2141), 2.5f, 2, "{{c1::Regression}} involves {{c2::predicting a numerical target}} as opposed to {{c2::a categorical target}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 464, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(1512), 2.5f, 2, "In {{c1::classification with missing inputs}} a machine learning system is asked {{c2::to perform a classification task where some of the input features are missing}}. Such a system effectively learns {{c2::a variety of functions/distributions corresponding to the different ways features are missing from the data}}. A seminal example is in {{c2::medical diagnosis where not all tests are typically run}}. One useful approach here to use {{c2::deep probabilistic models}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 463, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(1473), 2.5f, 2, "In {{c1::classification with missing inputs}} a machine learning system is asked {{c2::to perform a classification task where some of the input features are missing}}. Such a system effectively learns {{c2::a variety of functions/distributions corresponding to the different ways features are missing from the data}}. A seminal example is in {{c2::medical diagnosis where not all tests are typically run}}. One useful approach here to use {{c2::deep probabilistic models}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 462, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(1361), 2.5f, 2, "In {{c1::classification with missing inputs}} a machine learning system is asked {{c2::to perform a classification task where some of the input features are missing}}. Such a system effectively learns {{c2::a variety of functions/distributions corresponding to the different ways features are missing from the data}}. A seminal example is in {{c2::medical diagnosis where not all tests are typically run}}. One useful approach here to use {{c2::deep probabilistic models}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 461, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(1244), 2.5f, 2, "In {{c1::classification with missing inputs}} a machine learning system is asked {{c2::to perform a classification task where some of the input features are missing}}. Such a system effectively learns {{c2::a variety of functions/distributions corresponding to the different ways features are missing from the data}}. A seminal example is in {{c2::medical diagnosis where not all tests are typically run}}. One useful approach here to use {{c2::deep probabilistic models}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 460, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(1153), 2.5f, 2, "In {{c1::classification with missing inputs}} a machine learning system is asked {{c2::to perform a classification task where some of the input features are missing}}. Such a system effectively learns {{c2::a variety of functions/distributions corresponding to the different ways features are missing from the data}}. A seminal example is in {{c2::medical diagnosis where not all tests are typically run}}. One useful approach here to use {{c2::deep probabilistic models}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 459, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 855, DateTimeKind.Utc).AddTicks(9688), 2.5f, 2, "In {{c1::classification problems}} a system is asked {{c2::to specify which of some k different categories a data point belongs to, or to give a probability distribution over the classes}}. The seminal example is {{c3::object recognition in computer vision}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 428, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(9530), 2.5f, 2, "Anywhere the second partial derivatives of a function {{c1::are continuous}} you can {{c2::commute them}} and this means that the Hessian {{c3::is symmetric at these points}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 366, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 852, DateTimeKind.Utc).AddTicks(9997), 2.5f, 2, "A {{c1::latent variable}} is a random variable that {{c2::we do not or cannot observe}}. One use in the case of a mixture model is {{c3::to denote a class label representing the generating mixture component, drawn from a multinoulli distribution}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 427, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(9492), 2.5f, 2, "Anywhere the second partial derivatives of a function {{c1::are continuous}} you can {{c2::commute them}} and this means that the Hessian {{c3::is symmetric at these points}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 425, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(8950), 2.5f, 2, "The relationship between the Hessian and the gradient is that {{c1::the Hessian is the Jacobian of the gradient}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 393, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 853, DateTimeKind.Utc).AddTicks(9491), 2.5f, 2, "The {{c1::cross-entropy}} is defined by {{c2::$H(P, Q)=-\\mathbb{E}_{\\mathrm{x} \\sim P} \\log Q(x)$}}. It is related with the Shannon entropy and the KL divergence via {{c3::$H(P, Q)=H(P)+D_{\\mathrm{KL} }(P \\| Q)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 392, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 853, DateTimeKind.Utc).AddTicks(9421), 2.5f, 2, "The {{c1::cross-entropy}} is defined by {{c2::$H(P, Q)=-\\mathbb{E}_{\\mathrm{x} \\sim P} \\log Q(x)$}}. It is related with the Shannon entropy and the KL divergence via {{c3::$H(P, Q)=H(P)+D_{\\mathrm{KL} }(P \\| Q)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 391, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 853, DateTimeKind.Utc).AddTicks(8779), 2.5f, 2, "The {{c1::Kullback-Leibler (KL) divergence}} is given by {{c2::$D_{\\mathrm{KL} }(P \\| Q)=\\mathbb{E}_{\\mathrm{x} \\sim P}\\left[\\log \\frac{P(x)}{Q(x)}\\right]=\\mathbb{E}_{\\mathrm{x} \\sim P}[\\log P(x)-\\log Q(x)]$}}. It measures {{c1::the additional information required to encode P if we use Q to build a codebook}}. It is not a distance measure because {{c3::it is not symmetric}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 390, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 853, DateTimeKind.Utc).AddTicks(8751), 2.5f, 2, "The {{c1::Kullback-Leibler (KL) divergence}} is given by {{c2::$D_{\\mathrm{KL} }(P \\| Q)=\\mathbb{E}_{\\mathrm{x} \\sim P}\\left[\\log \\frac{P(x)}{Q(x)}\\right]=\\mathbb{E}_{\\mathrm{x} \\sim P}[\\log P(x)-\\log Q(x)]$}}. It measures {{c1::the additional information required to encode P if we use Q to build a codebook}}. It is not a distance measure because {{c3::it is not symmetric}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 389, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 853, DateTimeKind.Utc).AddTicks(8661), 2.5f, 2, "The {{c1::Kullback-Leibler (KL) divergence}} is given by {{c2::$D_{\\mathrm{KL} }(P \\| Q)=\\mathbb{E}_{\\mathrm{x} \\sim P}\\left[\\log \\frac{P(x)}{Q(x)}\\right]=\\mathbb{E}_{\\mathrm{x} \\sim P}[\\log P(x)-\\log Q(x)]$}}. It measures {{c1::the additional information required to encode P if we use Q to build a codebook}}. It is not a distance measure because {{c3::it is not symmetric}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 388, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 853, DateTimeKind.Utc).AddTicks(8414), 2.5f, 2, "The {{c1::Kullback-Leibler (KL) divergence}} is given by {{c2::$D_{\\mathrm{KL} }(P \\| Q)=\\mathbb{E}_{\\mathrm{x} \\sim P}\\left[\\log \\frac{P(x)}{Q(x)}\\right]=\\mathbb{E}_{\\mathrm{x} \\sim P}[\\log P(x)-\\log Q(x)]$}}. It measures {{c1::the additional information required to encode P if we use Q to build a codebook}}. It is not a distance measure because {{c3::it is not symmetric}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 387, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 853, DateTimeKind.Utc).AddTicks(7735), 2.5f, 2, "When applied to continuous random variables the {{c1::Shannon entropy}} is called the {{c2::differential entropy}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 386, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 853, DateTimeKind.Utc).AddTicks(7705), 2.5f, 2, "When applied to continuous random variables the {{c1::Shannon entropy}} is called the {{c2::differential entropy}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 385, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 853, DateTimeKind.Utc).AddTicks(7104), 2.5f, 2, "The {{c1::Shannon entropy}} allows us to quantify the {{c2::amount of uncertainty in a whole distribution}}. It is given by {{c2::$H(\\mathrm{x})=\\mathbb{E}_{\\mathrm{x} \\sim P}[I(x)]=-\\mathbb{E}_{\\mathrm{x} \\sim P}[\\log P(x)]$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 384, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 853, DateTimeKind.Utc).AddTicks(7004), 2.5f, 2, "The {{c1::Shannon entropy}} allows us to quantify the {{c2::amount of uncertainty in a whole distribution}}. It is given by {{c2::$H(\\mathrm{x})=\\mathbb{E}_{\\mathrm{x} \\sim P}[I(x)]=-\\mathbb{E}_{\\mathrm{x} \\sim P}[\\log P(x)]$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 383, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 853, DateTimeKind.Utc).AddTicks(6947), 2.5f, 2, "The {{c1::Shannon entropy}} allows us to quantify the {{c2::amount of uncertainty in a whole distribution}}. It is given by {{c2::$H(\\mathrm{x})=\\mathbb{E}_{\\mathrm{x} \\sim P}[I(x)]=-\\mathbb{E}_{\\mathrm{x} \\sim P}[\\log P(x)]$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 382, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 853, DateTimeKind.Utc).AddTicks(6059), 2.5f, 2, "The {{c1::self-information of a random variable}} is defined to be {{c2::$I(x) = -\\log P(x)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 394, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 853, DateTimeKind.Utc).AddTicks(9541), 2.5f, 2, "The {{c1::cross-entropy}} is defined by {{c2::$H(P, Q)=-\\mathbb{E}_{\\mathrm{x} \\sim P} \\log Q(x)$}}. It is related with the Shannon entropy and the KL divergence via {{c3::$H(P, Q)=H(P)+D_{\\mathrm{KL} }(P \\| Q)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 381, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 853, DateTimeKind.Utc).AddTicks(6029), 2.5f, 2, "The {{c1::self-information of a random variable}} is defined to be {{c2::$I(x) = -\\log P(x)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 379, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 853, DateTimeKind.Utc).AddTicks(5372), 2.5f, 2, "Information theory concerns quantifying how much information is present in a signal. Two driving intuitions are that 1. {{c1::Likely events should have low information content and unlikely events high content}} 2. {{c2::Independent events should have additive information content}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 378, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 853, DateTimeKind.Utc).AddTicks(4718), 2.5f, 2, "When we treat the function of a random variable as a random variable, the density of the output can be treated by letting $y=g(x)$ at which point {{c1::$p_{x}(\\boldsymbol{x})=p_{y}(g(\\boldsymbol{x}))\\left|\\operatorname{det}\\left(\\frac{\\partial g(\\boldsymbol{x})}{\\partial \\boldsymbol{x} }\\right)\\right|$}} You can think of this as arising from {{c1::the Jacobian correction due to the change of variables as in integration}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 377, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 853, DateTimeKind.Utc).AddTicks(4635), 2.5f, 2, "When we treat the function of a random variable as a random variable, the density of the output can be treated by letting $y=g(x)$ at which point {{c1::$p_{x}(\\boldsymbol{x})=p_{y}(g(\\boldsymbol{x}))\\left|\\operatorname{det}\\left(\\frac{\\partial g(\\boldsymbol{x})}{\\partial \\boldsymbol{x} }\\right)\\right|$}} You can think of this as arising from {{c1::the Jacobian correction due to the change of variables as in integration}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 376, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 853, DateTimeKind.Utc).AddTicks(3674), 2.5f, 2, "The {{c1::softplus function}} is given by {{c2::$\\zeta(x)=\\log (1+\\exp (x))$}}. It has utility in modeling {{c3::variance parameters because of its range}}. You can think of it as a softened version of {{c1::$x^{+}=\\max (0, x)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 375, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 853, DateTimeKind.Utc).AddTicks(3647), 2.5f, 2, "The {{c1::softplus function}} is given by {{c2::$\\zeta(x)=\\log (1+\\exp (x))$}}. It has utility in modeling {{c3::variance parameters because of its range}}. You can think of it as a softened version of {{c1::$x^{+}=\\max (0, x)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 374, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 853, DateTimeKind.Utc).AddTicks(3600), 2.5f, 2, "The {{c1::softplus function}} is given by {{c2::$\\zeta(x)=\\log (1+\\exp (x))$}}. It has utility in modeling {{c3::variance parameters because of its range}}. You can think of it as a softened version of {{c1::$x^{+}=\\max (0, x)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 373, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 853, DateTimeKind.Utc).AddTicks(3560), 2.5f, 2, "The {{c1::softplus function}} is given by {{c2::$\\zeta(x)=\\log (1+\\exp (x))$}}. It has utility in modeling {{c3::variance parameters because of its range}}. You can think of it as a softened version of {{c1::$x^{+}=\\max (0, x)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 372, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 853, DateTimeKind.Utc).AddTicks(2870), 2.5f, 2, "The {{c1::logistic sigmoid}} is defined by {{c2::$\\sigma(x)=\\frac{1}{1+\\exp (-x)}$}} which looks like {{c2::}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 371, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 853, DateTimeKind.Utc).AddTicks(2862), 2.5f, 2, "The {{c1::logistic sigmoid}} is defined by {{c2::$\\sigma(x)=\\frac{1}{1+\\exp (-x)}$}} which looks like {{c2::}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 370, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 853, DateTimeKind.Utc).AddTicks(2814), 2.5f, 2, "The {{c1::logistic sigmoid}} is defined by {{c2::$\\sigma(x)=\\frac{1}{1+\\exp (-x)}$}} which looks like {{c2::}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 369, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 853, DateTimeKind.Utc).AddTicks(1360), 2.5f, 2, "A model is said to be a {{c1::universal approximator}} if {{c2::any smooth density can be approximated to any fidelity by the model with appropriate parameters}}. A common example is {{c1::the Gaussian mixture model}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 368, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 853, DateTimeKind.Utc).AddTicks(1295), 2.5f, 2, "A model is said to be a {{c1::universal approximator}} if {{c2::any smooth density can be approximated to any fidelity by the model with appropriate parameters}}. A common example is {{c1::the Gaussian mixture model}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 380, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 853, DateTimeKind.Utc).AddTicks(5440), 2.5f, 2, "Information theory concerns quantifying how much information is present in a signal. Two driving intuitions are that 1. {{c1::Likely events should have low information content and unlikely events high content}} 2. {{c2::Independent events should have additive information content}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 395, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(338), 2.5f, 2, "A {{c1::structured probabilistic model}} exploits the reality that high dimensional distributions often contain many pairs of variables that are {{c2::conditionally independent given some other set of variables}}. They are also called {{c1::graphical models}}. The {{c3::edges}} represent {{c3::that the child pointed to consists of a conditional distribution over the parents: $p(\\mathbf{x})=\\prod_{i} p\\left(\\mathrm{x}_{i} \\mid P a_{\\mathcal{G} }\\left(\\mathrm{x}_{i}\\right)\\right)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 396, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(424), 2.5f, 2, "A {{c1::structured probabilistic model}} exploits the reality that high dimensional distributions often contain many pairs of variables that are {{c2::conditionally independent given some other set of variables}}. They are also called {{c1::graphical models}}. The {{c3::edges}} represent {{c3::that the child pointed to consists of a conditional distribution over the parents: $p(\\mathbf{x})=\\prod_{i} p\\left(\\mathrm{x}_{i} \\mid P a_{\\mathcal{G} }\\left(\\mathrm{x}_{i}\\right)\\right)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 397, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(450), 2.5f, 2, "A {{c1::structured probabilistic model}} exploits the reality that high dimensional distributions often contain many pairs of variables that are {{c2::conditionally independent given some other set of variables}}. They are also called {{c1::graphical models}}. The {{c3::edges}} represent {{c3::that the child pointed to consists of a conditional distribution over the parents: $p(\\mathbf{x})=\\prod_{i} p\\left(\\mathrm{x}_{i} \\mid P a_{\\mathcal{G} }\\left(\\mathrm{x}_{i}\\right)\\right)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 424, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(8252), 2.5f, 2, "The {{c1::matrix of second derivatives}} is called the {{c2::Hessian matrix}}. It is given by {{c1::$\\boldsymbol{H}(f)(\\boldsymbol{x})_{i, j}=\\frac{\\partial^{2} }{\\partial x_{i} \\partial x_{j} } f(\\boldsymbol{x})$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 423, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(8089), 2.5f, 2, "The {{c1::matrix of second derivatives}} is called the {{c2::Hessian matrix}}. It is given by {{c1::$\\boldsymbol{H}(f)(\\boldsymbol{x})_{i, j}=\\frac{\\partial^{2} }{\\partial x_{i} \\partial x_{j} } f(\\boldsymbol{x})$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 422, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(8059), 2.5f, 2, "The {{c1::matrix of second derivatives}} is called the {{c2::Hessian matrix}}. It is given by {{c1::$\\boldsymbol{H}(f)(\\boldsymbol{x})_{i, j}=\\frac{\\partial^{2} }{\\partial x_{i} \\partial x_{j} } f(\\boldsymbol{x})$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 421, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(7375), 2.5f, 2, "{{c1::Hill climbing}} is a term used to refer to {{c2::gradient descent/ascent for functions of discrete variables}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 420, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(7302), 2.5f, 2, "{{c1::Hill climbing}} is a term used to refer to {{c2::gradient descent/ascent for functions of discrete variables}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 419, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(6652), 2.5f, 2, "The SGD update rule is {{c1::$x^{\\prime}=x-\\epsilon \\nabla_{x} f(x)$}} and {{c2::$\\epsilon$}} is called the {{c1::learning rate}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 418, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(6631), 2.5f, 2, "The SGD update rule is {{c1::$x^{\\prime}=x-\\epsilon \\nabla_{x} f(x)$}} and {{c2::$\\epsilon$}} is called the {{c1::learning rate}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 417, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(6584), 2.5f, 2, "The SGD update rule is {{c1::$x^{\\prime}=x-\\epsilon \\nabla_{x} f(x)$}} and {{c2::$\\epsilon$}} is called the {{c1::learning rate}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 416, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(5899), 2.5f, 2, "For for a function f the derivative along a particular direction $\\boldsymbol{u}$ is given by {{c1::$\\boldsymbol{u}^\\intercal\\nabla_xf(\\boldsymbol{x})$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 415, 5, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(5200), 2.5f, 2, "In optimization, the function we are trying to minimize or maximize is called the {{c1::objective function}} or {{c2::criterion}}. In the case where we are trying to minimize it it might be called {{c3::a cost function}}, {{c4::a loss function}}, or an {{c5::error function}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 414, 4, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(5178), 2.5f, 2, "In optimization, the function we are trying to minimize or maximize is called the {{c1::objective function}} or {{c2::criterion}}. In the case where we are trying to minimize it it might be called {{c3::a cost function}}, {{c4::a loss function}}, or an {{c5::error function}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 413, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(5155), 2.5f, 2, "In optimization, the function we are trying to minimize or maximize is called the {{c1::objective function}} or {{c2::criterion}}. In the case where we are trying to minimize it it might be called {{c3::a cost function}}, {{c4::a loss function}}, or an {{c5::error function}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 412, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(5132), 2.5f, 2, "In optimization, the function we are trying to minimize or maximize is called the {{c1::objective function}} or {{c2::criterion}}. In the case where we are trying to minimize it it might be called {{c3::a cost function}}, {{c4::a loss function}}, or an {{c5::error function}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 411, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(5107), 2.5f, 2, "In optimization, the function we are trying to minimize or maximize is called the {{c1::objective function}} or {{c2::criterion}}. In the case where we are trying to minimize it it might be called {{c3::a cost function}}, {{c4::a loss function}}, or an {{c5::error function}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 410, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(3941), 2.5f, 2, "{{c1::Conditioning}} refers to how {{c2::rapidly a function changes with respect to small changes in its input}}. In the context of matrices, the {{c1::condition value}} is given by the {{c2::maximum ratio of eigenvalues}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 409, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(3905), 2.5f, 2, "{{c1::Conditioning}} refers to how {{c2::rapidly a function changes with respect to small changes in its input}}. In the context of matrices, the {{c1::condition value}} is given by the {{c2::maximum ratio of eigenvalues}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 408, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(3881), 2.5f, 2, "{{c1::Conditioning}} refers to how {{c2::rapidly a function changes with respect to small changes in its input}}. In the context of matrices, the {{c1::condition value}} is given by the {{c2::maximum ratio of eigenvalues}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 407, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(3750), 2.5f, 2, "{{c1::Conditioning}} refers to how {{c2::rapidly a function changes with respect to small changes in its input}}. In the context of matrices, the {{c1::condition value}} is given by the {{c2::maximum ratio of eigenvalues}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 406, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(3073), 2.5f, 2, "{{c1::Overflow}} refers to a numerical rounding error where {{c2::numbers are rounded to the largest or smallest representable value}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 405, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(2994), 2.5f, 2, "{{c1::Overflow}} refers to a numerical rounding error where {{c2::numbers are rounded to the largest or smallest representable value}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 404, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(2329), 2.5f, 2, "{{c1::Underflow}} is a numerical error where {{c2::small numbers are rounded to zero.}} This is a problem because in many situations {{c1::zero is qualitatively different than numbers close to zero}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 403, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(2263), 2.5f, 2, "{{c1::Underflow}} is a numerical error where {{c2::small numbers are rounded to zero.}} This is a problem because in many situations {{c1::zero is qualitatively different than numbers close to zero}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 402, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(2213), 2.5f, 2, "{{c1::Underflow}} is a numerical error where {{c2::small numbers are rounded to zero.}} This is a problem because in many situations {{c1::zero is qualitatively different than numbers close to zero}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 401, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(1534), 2.5f, 2, "In an undirected graphical model, the distribution {{c1::factorizes into functions that are not typically themselves probability distributions}}. Every clique in an undirected model contributes one function over {{c2::the labels of the nodes associated to that clique in the graph}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 400, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(1456), 2.5f, 2, "In an undirected graphical model, the distribution {{c1::factorizes into functions that are not typically themselves probability distributions}}. Every clique in an undirected model contributes one function over {{c2::the labels of the nodes associated to that clique in the graph}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 399, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(662), 2.5f, 2, "A {{c1::structured probabilistic model}} exploits the reality that high dimensional distributions often contain many pairs of variables that are {{c2::conditionally independent given some other set of variables}}. They are also called {{c1::graphical models}}. The {{c3::edges}} represent {{c3::that the child pointed to consists of a conditional distribution over the parents: $p(\\mathbf{x})=\\prod_{i} p\\left(\\mathrm{x}_{i} \\mid P a_{\\mathcal{G} }\\left(\\mathrm{x}_{i}\\right)\\right)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 398, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(464), 2.5f, 2, "A {{c1::structured probabilistic model}} exploits the reality that high dimensional distributions often contain many pairs of variables that are {{c2::conditionally independent given some other set of variables}}. They are also called {{c1::graphical models}}. The {{c3::edges}} represent {{c3::that the child pointed to consists of a conditional distribution over the parents: $p(\\mathbf{x})=\\prod_{i} p\\left(\\mathrm{x}_{i} \\mid P a_{\\mathcal{G} }\\left(\\mathrm{x}_{i}\\right)\\right)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 426, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 854, DateTimeKind.Utc).AddTicks(9469), 2.5f, 2, "Anywhere the second partial derivatives of a function {{c1::are continuous}} you can {{c2::commute them}} and this means that the Hessian {{c3::is symmetric at these points}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 486, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(8246), 2.5f, 2, "In {{c1::density estimation or PMF estimation}}, a system {{c2::models/learns the PDF/PMF responsible for the observed data}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 244, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(1357), 2.5f, 2, "An {{c2::autoencoder}} is a combination of an {{c1::encoder function}} which {{c1::converts data to a different representation}} and a {{c1::decoder that converts data back}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 242, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(782), 2.5f, 2, "The process of {{c1::allowing the system to discover what features should be used in the representation}} is called {{c2::representation learning}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 88, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 842, DateTimeKind.Utc).AddTicks(6692), 2.5f, 2, "Lagrange equations of motion", new TimeSpan(0, 0, 10, 0, 0), 2, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 87, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 842, DateTimeKind.Utc).AddTicks(6354), 2.5f, 2, "Definition of the Lagrangian action $S$", new TimeSpan(0, 0, 10, 0, 0), 2, "$S \\equiv \\int_0^{t_0}dt L(x_i,\\dot{x}_i)$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 86, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 842, DateTimeKind.Utc).AddTicks(5969), 2.5f, 2, "Definition of the classical Lagrangian", new TimeSpan(0, 0, 10, 0, 0), 2, "$L \\equiv T - U$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 85, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 842, DateTimeKind.Utc).AddTicks(5636), 2.5f, 2, "At a qualitative level, how do you understand the Peierls transition to be driven?", new TimeSpan(0, 0, 10, 0, 0), 2, "A small distortion of the lattice is not very costly depending on the stiffness of the atomic potential. Moving sites slightly closer together allows the electron to see one neighboring electron more than the other, adopting a state akin to a bonding state one the 1-D lattice." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 84, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 842, DateTimeKind.Utc).AddTicks(5258), 2.5f, 2, "Explain how the SSH model demonstrates the Peierls instability", new TimeSpan(0, 0, 10, 0, 0), 2, "The Su-Schrieffer-Heeger model for polyacetylene include two bond strengths $s,t$ which is due to the possible placements of the double bonds. This can be written explicitly into the model by using a unit cell with periodicity $2a$ $H = -t \\sum_{n=1}^N\\left(\\left(1 - \\delta\\right)c^\\dagger_n d_{n} + \\left(1 + \\delta \\right)d^\\dagger_n c_{n+1}\\right) + h.c.$ In the case where the parameter $\\delta = 0$, this has an increased lattice symmetry and a tight binding calculation for the lattice gives $E \\propto \\pm \\cos k$ When $\\delta is nonzero$ the same process gives a gap. Direct comparison shows that the total energy in this configuration is lowered. Make sure you can do the tihgt binding calculation." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 83, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 842, DateTimeKind.Utc).AddTicks(4759), 2.5f, 2, "Describe the phenomenology of the Peierls transition", new TimeSpan(0, 0, 10, 0, 0), 2, "A one dimensional metal can be conceived as a single band or set of bands in the case of multiple species. If the band is filled such that the Fermi level sits in the middle of a band, the Fermi surface consists of two points at $\\pm \\textbf{k}_F$. By slightly distorting the lattice, the symmetry can be reduced to a lattice constant of $2a$. This folds the Brillouin zone and allows a small gap to form at the folded Fermi surface, lowering the total energy. This can be formalized in a variety of toy models, such as the Su-Schrieffer-Heeger (SSH) model." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 82, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 842, DateTimeKind.Utc).AddTicks(4265), 2.5f, 2, "Fourier's law (where does the minus sign come from?)", new TimeSpan(0, 0, 10, 0, 0), 2, "$\\textbf{j}^{q} = -\\kappa \\Delta T$. The minus sign is due to the fact that heat flows from the hot to cold region, of course." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 81, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 842, DateTimeKind.Utc).AddTicks(3900), 2.5f, 2, "Give a toy derivation for the Drude plasmon in a slab of metal", new TimeSpan(0, 0, 10, 0, 0), 2, "We imagine displacing the entire electron gas through a distance $d$. This gives a field of magnitude $4\\pi \\sigma$ on other side of the slab. The charge per unit area though is $nde$, giving the equation of motion $Nm\\ddot{x} = -Ne\\left|4\\pi ne\\right| x$ or $\\ddot{x} = -\\frac{4\\pi ne^2}{m} x$ From this we read off the frequency by associating $\\ddot{x} = -\\omega^2 x$." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 80, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 842, DateTimeKind.Utc).AddTicks(3500), 2.5f, 2, "What does the Drude plasma frequency have to say about the optical properties of metals?", new TimeSpan(0, 0, 10, 0, 0), 2, "If $\\omega < \\omega_p$, then the dielectric constant is negative, and the field in the metal corresponds to a damped wave (opacity). Above the plasma frequency, we get oscillating solutions and light can be transmitted." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 79, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 842, DateTimeKind.Utc).AddTicks(3075), 2.5f, 2, "Give the formula for the Drude plasma frequency and note conditions for validity", new TimeSpan(0, 0, 10, 0, 0), 2, "$\\omega_p^2 = \\frac{4\\pi ne^2}{m}$ which is valid so long as the electron essentially sees a static field between collisions and if $\\omega \\tau \\gg 1$." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 78, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 842, DateTimeKind.Utc).AddTicks(2718), 2.5f, 2, "Give an approximate derivation of the Drude plasma frequency", new TimeSpan(0, 0, 10, 0, 0), 2, "Having derived an AC conductivity, we can use it to source electric field via the current $\\textbf{j}(\\textbf{r},\\omega) = \\sigma(\\omega)\\textbf{E}(\\textbf{r},\\omega)$ Plugging into the Maxwell equations, we get $-\\nabla^2\\textbf{E} = \\frac{\\omega^2}{c^2}\\left(1 + \\frac{4\\pi i \\sigma}{\\omega}\\right)\\textbf{E}$. This is a wave equation with dielectric constant $\\epsilon\\left(\\omega\\right) = 1 + \\frac{4\\pi i \\sigma}{\\omega} = 1 - \\frac{\\omega_p^2}{\\omega^2}$ definining the plasma frequency $\\omega_p^2 = \\frac{4\\pi ne^2}{m}$." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 77, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 842, DateTimeKind.Utc).AddTicks(2299), 2.5f, 2, "Why can we not trust the AC Drude response at very high frequency, where $\\lambda < v\\tau$?", new TimeSpan(0, 0, 10, 0, 0), 2, "We derived the transport equation in the case where the fields were assumed to be static in space but potentially varying in time. If the distance between collisions is comparable to the spatial scale of variations in the field, the electron sees a spatially varying field and we cannot directly apply the transport equation." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 89, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 842, DateTimeKind.Utc).AddTicks(7044), 2.5f, 2, "Lagrangian canonical momentum", new TimeSpan(0, 0, 10, 0, 0), 2, "$\\pi \\left(x\\right) = \\frac{\\partial\\mathcal{L}\\left(\\phi, \\partial_x \\phi, \\dot{\\phi}\\right)}{\\partial \\dot{\\phi}(x)}$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 76, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 842, DateTimeKind.Utc).AddTicks(1905), 2.5f, 2, "AC Drude Conductivity", new TimeSpan(0, 0, 10, 0, 0), 2, "$\\sigma \\left(\\omega\\right) = \\frac{\\sigma(0)}{1 - i\\omega\\tau}$ To derive this, we just need to plug in an ansatz of $\\textbf{p}(t) = \\text{Re}\\left(\\text{p}(\\omega)e^{-i\\omega t}\\right)$ and plug into the transport equation." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 74, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 842, DateTimeKind.Utc).AddTicks(1075), 2.5f, 2, "Electron cyclotron frequency (Hall context)", new TimeSpan(0, 0, 10, 0, 0), 2, "$\\omega_c = \\frac{e H}{mc}$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 73, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 842, DateTimeKind.Utc).AddTicks(546), 2.5f, 2, "Why might Drude have thought that electrons principally scattered from the lattice?", new TimeSpan(0, 0, 10, 0, 0), 2, "If we estimate $\\tau$ from typical resistivities and use the equipartition value for the electron velocity, we get a mean free path comparable to the interatomic spacing. This is very incorrect though, because the electron velocity is dramatically underestimated, and resistivities fall dramatically for most materials at low temperature." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 72, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 842, DateTimeKind.Utc).AddTicks(173), 2.5f, 2, "Describe generally the derivation of basic quantities in the Drude theory, for instance the conductivity", new TimeSpan(0, 0, 10, 0, 0), 2, "We have the transport equation. The expectation value for $\\textbf{p}$ can therefore be estimated as $-e\\textbf{E}\\tau$ and the conductivity easily recovered from the current." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 71, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 841, DateTimeKind.Utc).AddTicks(9774), 2.5f, 2, "Typical free electron densities in atomic metals (Z, n, $r_s/a_0$)", new TimeSpan(0, 0, 10, 0, 0), 2, "Typical electron densities range from $1-20 \\cdot 10^{22}/\\text{cm}^3$. Typical values of $r_s/a_0$ are approximately 2-3." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 70, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 841, DateTimeKind.Utc).AddTicks(9230), 2.5f, 2, "By comparison to a classical gas, why is it surprising that the Drude model functions well?", new TimeSpan(0, 0, 10, 0, 0), 2, "From a crude calculation $\\frac{V}{N} = \\frac{4\\pi r_s^3}{3}$ for the electron spacing $r_s$, we are at densities a thousand times that of a classical gas. Additionally, electrons are charged and so have strong interactions with each other and with the lattice. Nevertheless, treating electrons as dilute and neutral works well." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 69, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 840, DateTimeKind.Utc).AddTicks(6495), 2.5f, 2, "Bohr radius", new TimeSpan(0, 0, 10, 0, 0), 2, "$a_0 \\equiv \\frac{\\hbar^2}{me^2} \\approx 5.29\\cdot 10^{-9}\\text{cm}$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 68, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 840, DateTimeKind.Utc).AddTicks(6177), 2.5f, 2, "Value of Avogadro's constant", new TimeSpan(0, 0, 10, 0, 0), 2, "$N_A \\approx 6.022 \\cdot 10^{23} \\text{mol}^{-1}$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 67, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 840, DateTimeKind.Utc).AddTicks(5857), 2.5f, 2, "Dalton (close to proton mass)", new TimeSpan(0, 0, 10, 0, 0), 2, "$1 \\text{Da} \\approx 1.66\\cdot 10^{-27} \\text{kg} \\approx 931.5 \\text{MeV}$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 66, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 840, DateTimeKind.Utc).AddTicks(5514), 2.5f, 2, "Proton electron mass ratio", new TimeSpan(0, 0, 10, 0, 0), 2, "$m_p/m_e \\approx 1836.15$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 65, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 840, DateTimeKind.Utc).AddTicks(5227), 2.5f, 2, "Definition of the Seebeck coefficient", new TimeSpan(0, 0, 10, 0, 0), 2, "The Seebeck coefficient describes the thermopower or thermoelectric sensitivity. We can typically take $\\textbf{J} = -\\sigma \\nabla V -\\sigma S\\nabla T$ as a definition for the Seebeck coefficient $S$." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 64, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 840, DateTimeKind.Utc).AddTicks(4842), 2.5f, 2, "Energy temperature relationship (eV - Kelvin)", new TimeSpan(0, 0, 10, 0, 0), 2, "$1 \\text{eV} = 1.16\\cdot 10^4 \\text{K}$ from $E = k_B T$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 63, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 840, DateTimeKind.Utc).AddTicks(4415), 2.5f, 2, "Time-bandwidth product fs-eV units (Gaussian)", new TimeSpan(0, 0, 10, 0, 0), 2, "$\\Delta \\tau \\left[\\text{fs}\\right] \\Delta E \\left[\\text{meV}\\right] \\geq 1825$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 75, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 842, DateTimeKind.Utc).AddTicks(1552), 2.5f, 2, "What is the significance of $\\omega_c$ and $\\tau$ in the context of DC transport in a field?", new TimeSpan(0, 0, 10, 0, 0), 2, "The combination $\\omega_c \\tau$ forms a dimensionless measure of field. An interpretation, it measures how significantly electrons are deflected by the field between scattering events. In general the current is at an angle $\\phi$ to the parallel $\\textbf{E}$-field, given by $\\text{tan}\\phi = \\omega_c \\tau$." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 90, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 842, DateTimeKind.Utc).AddTicks(7421), 2.5f, 2, "Hamiltonian density from Lagrangian density", new TimeSpan(0, 0, 10, 0, 0), 2, "$\\mathcal{H}(\\phi, \\partial_x \\phi, \\pi) = \\left(\\left(\\pi \\dot{\\phi} - \\mathcal{L}\\left(\\phi, \\partial_x \\phi, \\dot{\\phi}\\right)\\right)\\right|_{\\dot{\\phi} = \\dot{\\phi}(\\phi,\\pi)}$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 91, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 842, DateTimeKind.Utc).AddTicks(7779), 2.5f, 2, "Quantum field", new TimeSpan(0, 0, 10, 0, 0), 2, "Quantum fields are operator valued functions like $\\hat{\\pi}, \\hat{\\phi}$ satisfying canonical commutation relationships $\\left[\\hat{\\pi}(x), \\hat{\\phi}(x')\\right] = -i\\hbar\\delta(x-x')$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 92, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 842, DateTimeKind.Utc).AddTicks(8248), 2.5f, 2, "Where do van der Waals forces come from?", new TimeSpan(0, 0, 10, 0, 0), 2, "Vacuum fluctuations of the EM field create a dipole $\\textbf{d}_A$ in a molecule. Nearby atoms and molecules see both the fluctuations and the dipole and therefore it is energetically favorable to align the fluctuating dipoles. This gives a $r^{-6}$ dependence. Characteristically the dipole dipole interaction strength goes like $K~1/r^3$. The interaction term creates a mixing between the oscillator states of the dipoles, and from a crude analysis, the characteristic frequencies are modified to $\\omega_{\\pm} = \\sqrt{\\omega_0^2 \\pm K}$ so the energy is lowered by $K^2$." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 119, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 843, DateTimeKind.Utc).AddTicks(8792), 2.5f, 2, "What are the primitive lattice vectors of the reciprocal lattice in terms of direct lattice?", new TimeSpan(0, 0, 10, 0, 0), 2, "The reciprocal space vectors $\\textbf{b}_i$ are given through $\\textbf{b}_i \\cdot \\textbf{a}_j$ = 2\\pi \\delta_{ij}. Directly, we can take $[\\textbf{b}_1,\\textbf{b}_2,\\textbf{b}_3]^\\intercal = 2\\pi[\\textbf{a}_1,\\textbf{a}_2,\\textbf{a}_3]^{-1}$ which generalizes to arbitrary dimension." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 118, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 843, DateTimeKind.Utc).AddTicks(8297), 2.5f, 2, "How do you construct the reciprocal lattice?", new TimeSpan(0, 0, 10, 0, 0), 2, "We define the reciprocal lattice as the collection of points $\\textbf{G}$ such that $e^{i\\textbf{g}\\cdot\\textbf{x}_n} = 1$ for all $\\textbf{x}_n$ in the direct lattice. The reason that this forms a lattice can be seen from the the closure property of a lattice." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 117, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 843, DateTimeKind.Utc).AddTicks(7884), 2.5f, 2, "Suppose you had a simple cubic lattice with the basis (0,0,0) (1/2, 1/2, 1/3) (1/2, 1/2, 2/3) is it appropriate to actually call this a simple cubic lattice?", new TimeSpan(0, 0, 10, 0, 0), 2, "Probably not. The crystal has a reduced symmetry, so if a real material assumed this structure the $c$ axis would very likely have at least a slightly different length than the $a$ axis. This reflects the concept that you shouldn't expect to find extra symmetries you weren't expecting in general." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 116, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 843, DateTimeKind.Utc).AddTicks(7500), 2.5f, 2, "Describe the lattice with a basis for the GaAs structure.", new TimeSpan(0, 0, 10, 0, 0), 2, "This is also called the zincblende structure. This is FCC with two sites. The first site is at (0,0,0). The second site is displaced to (1/4,1/4,1/4) and the two species are allowed to be different. If the sites are the same we also get the diamond/Si/Ge crystal structures." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 115, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 843, DateTimeKind.Utc).AddTicks(7126), 2.5f, 2, "Why is CsCl not a body-centered cubic lattice despite the Cs being coordinated inside a box of Cl atoms? What is it instead?", new TimeSpan(0, 0, 10, 0, 0), 2, "The two sets of sites are inequivalent. Therefore it is a simple-cubic lattice with a basis." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 114, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 843, DateTimeKind.Utc).AddTicks(6774), 2.5f, 2, "What is Schoenflies notation?", new TimeSpan(0, 0, 10, 0, 0), 2, "\"Schoenflies notation named after Arthur Moritz Schoenflies is a notation for point groups in 3D. This isn't quite sufficient for specifying a crystal since it does not include translation symmetries. 1. $C_n$ for cyclic has an n-fold rotation axis. 2. $C_{nh}$ also has a mirror plane perpendicular to the axis of rotation. 3. $C_{nv}$ also has $n$ mirror planes containing the axis. 4. $S_{2n}$ (from spiegel, \"\"mirror\"\") has a 2n-fold rotation-reflection axis. This is only ever with an even number because otherwise $S_n = C_{nh}$. 5. $C_{ni}$ has only a rotoinversion axis. 6. $D_n$ (dihedral/\"\"two sided\"\") has an n-fold rotation axis plus $n$ twofold axes perpendicular to that axis. 7. $T$ the chiral tetrahedral group. Also comes in $T_d$ (with diagonal mirror planes) and $T_h$ (with horizontal mirror planes). 8. $O$ the chiral octahedral group has rotation axes of the cube. $O_h$ also has horizontal (and therefore vertical) mirror planes. 9. $I$ The chiral icosahedral group has the rotation axes of an icosahedron or dodecahedron. $I_h$ also includes horizontal mirror planes.\"" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 113, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 843, DateTimeKind.Utc).AddTicks(6142), 2.5f, 2, "What are the lattices in 3D?", new TimeSpan(0, 0, 10, 0, 0), 2, "In 3D there are 14 lattice in 7 lattice systems. The first system is the cubic family (Schonflies $O_h$/lattice system, which has three lattices: 1. Primitive (P) cubic 2. Body centered (I) cubic 3. Face-centered (F) cubic The next system is the hexagonal family which has rhombohedral and hexagonal systems. Each has a single primitive lattice. The rhombohedral lattice $D_{3d}$ Has angles between all primitive vectors equal to $\\alpha$ and a single side-length $a$. The hexagonal lattice (symbol $D_{6h}$) is 2D-triangular lattices separated by a distance $c$. The next family/system is the tetragonal system with symbol $D_{4h}$. There are two lattices: 1. Tetragonal primitive (P) which is a square lattice in 2D with lattice constant $a$ separated by $c$. 2. Body centered (I) which has also a lattice point at the center of the conventional cell. The next system is the orthorhombic $D_{2h}$ system which has reduced symmetry because it is composed of orthorhombic 2D lattices $a,b$ separated by distances $c$. This comes in each of 1. Primitive (P) 2. Base-centered (C) 3. Body-centered (I) 4. Face-centered (F) Next we have the monoclinic system, $C_{2h}$. This has primitive and base-centered forms. The monoclinic system is composed of three lattice constants $a,b,c$. The angle between $b,c = \\pi/2$ and $a,b=\\pi/2$, but the angle between $a,c$ is allowed to be an angle $\\beta$. The final, triclinic system $C_i$ has the least symmetry and only a primitive form. It is defined by three lattice constants and three angles: $a,b,c$ and $\\alpha,\\beta,\\gamma$." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 112, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 843, DateTimeKind.Utc).AddTicks(5364), 2.5f, 2, "What elements form simple cubic lattices?", new TimeSpan(0, 0, 10, 0, 0), 2, "Only polonium! Discovered by Marie Curie." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 111, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 843, DateTimeKind.Utc).AddTicks(5021), 2.5f, 2, "Coordination number", new TimeSpan(0, 0, 10, 0, 0), 2, "The number of atoms or ions, (or lattice points) immediately surrounding an atom or (lattice point) in a crystal (or lattice)." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 110, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 843, DateTimeKind.Utc).AddTicks(4690), 2.5f, 2, "\"What is a basis for a \"\"lattice with a basis\"\"?\"", new TimeSpan(0, 0, 10, 0, 0), 2, "A description of the objects in a unit cell with respect to a reference lattice point. This gives a full description of a periodic structure." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 109, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 843, DateTimeKind.Utc).AddTicks(4330), 2.5f, 2, "How do you construct the Wigner-Seitz cell?", new TimeSpan(0, 0, 10, 0, 0), 2, "Take the perpendicular bisectors for the segments between a point (0) and its nearest neighbors. The interior of the hyperplanes thus defined gives the Wigner-Seitz cell which is guaranteed to be primitive (by construction)." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 108, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 843, DateTimeKind.Utc).AddTicks(3954), 2.5f, 2, "Conventional unit cell", new TimeSpan(0, 0, 10, 0, 0), 2, "A unit cell with orthogonal axes. Typically this will not be a primitive unit cell!" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 107, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 843, DateTimeKind.Utc).AddTicks(3621), 2.5f, 2, "What is a primitive unit cell?", new TimeSpan(0, 0, 10, 0, 0), 2, "It contains exactly one lattice point. An example is the Wigner-Seitz (Voronoi) cell of 0." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 106, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 843, DateTimeKind.Utc).AddTicks(3300), 2.5f, 2, "What is a unit cell?", new TimeSpan(0, 0, 10, 0, 0), 2, "A unit cell tiles space and reproduces a periodic structure." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 105, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 843, DateTimeKind.Utc).AddTicks(2950), 2.5f, 2, "Is there a hexagonal lattice?", new TimeSpan(0, 0, 10, 0, 0), 2, "No, there is a triangular lattice with a two site basis." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 104, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 843, DateTimeKind.Utc).AddTicks(2649), 2.5f, 2, "What is the relationship between periodic structures and lattices?", new TimeSpan(0, 0, 10, 0, 0), 2, "\"Any periodic structure can be considered as a lattice together with a motif at each lattice site. This motif is often called a basis and the repeating structure a \"\"lattice with a basis\"\".\"" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 103, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 843, DateTimeKind.Utc).AddTicks(2303), 2.5f, 2, "Give definitions of a lattice. How are they equivalent?", new TimeSpan(0, 0, 10, 0, 0), 2, "First, we could consider a set of points defined as integer sums of primitive lattice vectors. Second, a collection of points such that the full collection of points is identical viewed from any single point (translation invariance). Third, we can view a lattice as a set of vectors which is closed under addition. I.e. the addition of any two vectors in the lattice yields a third vector. Some directions of equivalence are easy: 1 implies 3. To see 3 implies 2 we can use contrapositive: if there were two points p1 and p2 which did not have identical environments, WLOG we could choose a point q seen by p2 which is not seen by p1. Mathematically, q - p2 + p1 is not a lattice point. However, beacuse the lattice is closed under addition and q - p2 is a lattice point, adding p1 gives a contradiction. To see that 2 implies 1 which completes the proof, we need to construct a basis. Choose any point of the lattice and call it zero. Find the closest point which is not in the span of the collected primitive lattice vectors, continue as such." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 102, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 843, DateTimeKind.Utc).AddTicks(1802), 2.5f, 2, "What is a crystal?", new TimeSpan(0, 0, 10, 0, 0), 2, "A lattice is a periodic arrangement of atoms. You might also have a molecular crystal which is a periodic arrangement of molecules." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 101, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 843, DateTimeKind.Utc).AddTicks(1483), 2.5f, 2, "What is a quasicrystal?", new TimeSpan(0, 0, 10, 0, 0), 2, "Ordered but not periodic. There is no long range order as a result." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 100, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 843, DateTimeKind.Utc).AddTicks(1184), 2.5f, 2, "What is a liquid crystal?", new TimeSpan(0, 0, 10, 0, 0), 2, "A liquid crystal has some crystalline degrees of order and some disordered degrees of freedom." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 99, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 843, DateTimeKind.Utc).AddTicks(843), 2.5f, 2, "What limits the exciton condensation energy in the high temperature regime?", new TimeSpan(0, 0, 10, 0, 0), 2, "The temperature is limited by exciton ionization in the high-density regime. The prediction is that about 10% of the binding energy should be conceivable. You can get more details here https://arxiv.org/pdf/1707.07064.pdf" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 98, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 843, DateTimeKind.Utc).AddTicks(472), 2.5f, 2, "What is the typical binding energy of excitons in TMD monolayers?", new TimeSpan(0, 0, 10, 0, 0), 2, "0.5eV or so" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 97, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 843, DateTimeKind.Utc).AddTicks(121), 2.5f, 2, "What are some systems where exciton condensation has maybe been seen?", new TimeSpan(0, 0, 10, 0, 0), 2, "Exciton condensates have supposedly been observed in topological insulators, TiSe2 and in quantum Hall states of graphene." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 96, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 842, DateTimeKind.Utc).AddTicks(9777), 2.5f, 2, "Super-Poissonian and sub-Poissonian statistics", new TimeSpan(0, 0, 10, 0, 0), 2, "Super- and sub-Poissonian statistics refer to higher variance or lower variance than the Poisson distribution at equal mean, respectively. Photon anti-bunching has sub-Poissonian statistics while bunching has super-Poissonian statistics." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 95, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 842, DateTimeKind.Utc).AddTicks(9347), 2.5f, 2, "What are electrically generated excitons? Why might these be better for observing condensates?", new TimeSpan(0, 0, 10, 0, 0), 2, "Electrically generated excitons refer to spontaneously bound excitons in a heterostructure where the two layers are electrically doped (for instance via a global bias and a gate) so that there are free holes in one layer and free electrons in another. This is the origin of electroluminescence." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 94, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 842, DateTimeKind.Utc).AddTicks(8957), 2.5f, 2, "Explain why an exciton condensate should have very high binding temperatures", new TimeSpan(0, 0, 10, 0, 0), 2, "The BEC critical temperature scales with $1/m$ and excitons have a relatively small mass." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 93, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 842, DateTimeKind.Utc).AddTicks(8619), 2.5f, 2, "BEC critical temperautre", new TimeSpan(0, 0, 10, 0, 0), 2, "$T_c = \\left(\\frac{n}{\\zeta(3/2)}\\right)^{2/3} \\frac{2\\pi \\hbar^2}{m k_B}$ in terms of the density this is $T_c \\approx \\frac{\\hbar^2 n^{2/3}}{m k_B}$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 62, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 840, DateTimeKind.Utc).AddTicks(4067), 2.5f, 2, "Unit conversion: eV to nm", new TimeSpan(0, 0, 10, 0, 0), 2, "$\\hbar\\omega \\left[eV\\right] = \\frac{1239.84}{\\lambda\\left[nm\\right]}$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 120, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 843, DateTimeKind.Utc).AddTicks(9134), 2.5f, 2, "What is reciprocal relationship between FCC and BCC lattices?", new TimeSpan(0, 0, 10, 0, 0), 2, "The reciprocal lattice of the FCC is BCC and vice versa." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 61, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 840, DateTimeKind.Utc).AddTicks(3739), 2.5f, 2, "Optical properties in Sommerfeld theory", new TimeSpan(0, 0, 10, 0, 0), 2, "Different metals look different, but Sommerfeld theory would give the same optical response for all materials." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 59, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 840, DateTimeKind.Utc).AddTicks(3044), 2.5f, 2, "Bohr magneton", new TimeSpan(0, 0, 10, 0, 0), 2, "$\\mu_B \\equiv \\frac{e\\hbar}{2m}$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 27, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 839, DateTimeKind.Utc).AddTicks(1102), 2.5f, 2, "What is meant by a kinetic theory?", new TimeSpan(0, 0, 10, 0, 0), 2, "A kinetic theory consists of a classical or semiclassical treatment for the momentum or velocity of a particle or ensemble of particles. Typically, we achieve a rate equation by considering forces and scattering channels. This allows us to consider steady state solutions and derive typical quantities in a theory." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 26, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 839, DateTimeKind.Utc).AddTicks(758), 2.5f, 2, "Drude theory transport equation", new TimeSpan(0, 0, 10, 0, 0), 2, "$\\dot{\\textbf{p}} = \\textbf{F} - \\frac{\\textbf{P}}{\\tau}$ This comes from considering that an electron scatters with propability $\\tau$ in the interval t + dt, but otherwise it gains a momentum due to the Lorentz force." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 25, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 839, DateTimeKind.Utc).AddTicks(377), 2.5f, 2, "What are the underpinnings of Drude theory?", new TimeSpan(0, 0, 10, 0, 0), 2, "1. Treat electrons like a diffuse gas 2. Electrons scatter with scattering time $\\tau$. When they scatter they scatter to an average momentum of 0. 3. During intervals where they don't scatter, they interact with fields by Lorentz force." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 24, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 838, DateTimeKind.Utc).AddTicks(9974), 2.5f, 2, "How do metals fit into Debye theory?", new TimeSpan(0, 0, 10, 0, 0), 2, "Low temperature specific heat for a metal is $C ~ \\alpha T^3 + \\gamma T$ while Debye only givs the first term!" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 23, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 838, DateTimeKind.Utc).AddTicks(9609), 2.5f, 2, "What is the Bose factor? What are the high and low temperature limits?", new TimeSpan(0, 0, 10, 0, 0), 2, "$n_B \\equiv \\frac{1}{e^{\\beta\\hbar\\omega} - 1}$ At low temperature this is essentially equal to $e^{-\\beta\\hbar\\omega}$ At high temperature we can expand and it is approximately $\\frac{1}{1 + \\beta\\hbar\\omega - 1} = \\frac{1}{\\beta\\hbar\\omega}$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 22, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 838, DateTimeKind.Utc).AddTicks(9193), 2.5f, 2, "Why does Debye theory diverge from experiment?", new TimeSpan(0, 0, 10, 0, 0), 2, "It only counts the heat capacity from phonons, rather than including also the electrons. Additionally though, we assume an acoustic phonon dispersion for all phonons, which is inappropriate in general. To get better values we need to use the phonon band structure." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 21, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 838, DateTimeKind.Utc).AddTicks(8685), 2.5f, 2, "Where does the Debye frequency cutoff come from?", new TimeSpan(0, 0, 10, 0, 0), 2, "We integrate the density of states to a cutoff and set it equal to 3N, which we know is the largest allowable number of modes for a system of N particles with no internal degrees of freedom." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 20, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 838, DateTimeKind.Utc).AddTicks(8330), 2.5f, 2, "How does the energy as calculated in Debye theory scale?", new TimeSpan(0, 0, 10, 0, 0), 2, "Like in the case of the energy for photons in a box, we get $E \\propto N T^4$. The full expression is $E = 9N \\frac{\\left(k_B T\\right)^4}{(\\hbar\\omega_D)^2}\\frac{\\pi^4}{15}$. This only works at low temperature. At high temperature we need to impose a cutoff (at the Debye frequency, think about where this comes from) and this recovers the law of Dulong-Petit." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 19, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 838, DateTimeKind.Utc).AddTicks(7948), 2.5f, 2, "How do we resolve the zero point energy divergence in the Debye theory?", new TimeSpan(0, 0, 10, 0, 0), 2, "It doesn't matter because there is a frequency cutoff. Even if there weren't, like in the zero point energy for EM in the vacuum, we mostly deal with derivatives of the energy and here it vanishes." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 18, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 838, DateTimeKind.Utc).AddTicks(7576), 2.5f, 2, "What is the general pattern for calculating the statistical expectation of an operator O? What does this look like for the energy of a quantum harmonic oscillator at finite temperature?", new TimeSpan(0, 0, 10, 0, 0), 2, "You should write the operator in terms of the energy. Then, you can write the expectation as an integral against the density of states and the filling factor (as is appropriate for the particle's statistics) $\\left<O\\right> = \\int_0^\\infty d\\omega g(\\omega) O(\\omega) f(\\omega)$. To see this concretely, the expectation for the energy of an oscillator is $\\left<E\\right> = \\int_0^\\infty d\\omega g(\\omega) \\hbar\\omega\\left[n_B(\\beta\\hbar\\omega) + 1/2\\right]$." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 17, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 838, DateTimeKind.Utc).AddTicks(7058), 2.5f, 2, "Give a back of the envelope derivation of the Debye frequency", new TimeSpan(0, 0, 10, 0, 0), 2, "The debye frequency should increase linearly with the speed of sound and with the mean spacing between atoms. Coarsely you can imagine this is because an atom moving at the speed of sound would traverse sites at a frequency given by this. This tells us $\\omega_D^3 \\propto \\left(\\frac{N}{V}\\right)v^3$ The full derivation comes from the cutoff for the integral for the density of states that yields exactly 3N total states. When we do this we get $\\omega_D^3 = 6\\pi^2 \\left(\\frac{N}{V}\\right)v^3$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 16, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 838, DateTimeKind.Utc).AddTicks(5432), 2.5f, 2, "Dispersion relation for light in vacuum", new TimeSpan(0, 0, 10, 0, 0), 2, "$\\omega = ck$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 28, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 839, DateTimeKind.Utc).AddTicks(1424), 2.5f, 2, "EM conductivity relation", new TimeSpan(0, 0, 10, 0, 0), 2, "$\\mathbf{j} = \\boldsymbol{\\sigma}\\textbf{E}$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 15, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 838, DateTimeKind.Utc).AddTicks(5091), 2.5f, 2, "Dispersion relation for sound at low energy", new TimeSpan(0, 0, 10, 0, 0), 2, "$\\omega = vk$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 13, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 838, DateTimeKind.Utc).AddTicks(4426), 2.5f, 2, "Born-von Karman boundary conditions", new TimeSpan(0, 0, 10, 0, 0), 2, "Periodic boundary conditions (name)" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 12, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 838, DateTimeKind.Utc).AddTicks(4124), 2.5f, 2, "Transforming from wavenumber sums to integrals", new TimeSpan(0, 0, 10, 0, 0), 2, "$\\sum_k \\rightarrow \\frac{V}{\\left(2\\pi\\right)^n}\\int d^n k$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 11, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 838, DateTimeKind.Utc).AddTicks(3790), 2.5f, 2, "Polarizations for light vs sound", new TimeSpan(0, 0, 10, 0, 0), 2, "Light has only transverse polarizations. Sound has all three (transverse + longitudinal) polarizations. In general the speed of sound along the longitudinal polarization is slightly faster." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 10, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 838, DateTimeKind.Utc).AddTicks(3415), 2.5f, 2, "Energy of modes in a box with Bose occupation factor (discrete)", new TimeSpan(0, 0, 10, 0, 0), 2, "$\\left<E_\\text{tot}\\right> = \\sum_\\text{modes}\\hbar\\omega_\\text{mode}\\left(n_B\\left(\\beta\\hbar\\omega\\right)_\\text{mode}+ \\frac{1}{2}\\right)$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 9, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 838, DateTimeKind.Utc).AddTicks(2986), 2.5f, 2, "Einstein's prediction for heat capacity at low temperature", new TimeSpan(0, 0, 10, 0, 0), 2, "Heat capacity should decrease exponentially because if we consider the heat capacity of a single quantum mechanical oscillator we get an exponential falloff due to freezing into the ground state. This doesn't work well though since the experimental data at moderate temperature is closest to T3." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 8, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 838, DateTimeKind.Utc).AddTicks(2194), 2.5f, 2, "Issues with Law of Dulong-Petit", new TimeSpan(0, 0, 10, 0, 0), 2, "At low temperature the heat capacity decreases. This can be understood by considering the quantum mechanical freezing out of modes in the system. Debye theory attempts to solve this, but only captures the heat capacity due to phonons." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 7, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 835, DateTimeKind.Utc).AddTicks(1989), 2.5f, 2, "Law of Dulong-Petit", new TimeSpan(0, 0, 10, 0, 0), 2, "$\\frac{C}{N} = 3k_B$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 6, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 831, DateTimeKind.Utc).AddTicks(2064), 2.5f, 2, "This is a {{c1::cloze card}} with two {{c2::clozes}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 5, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 831, DateTimeKind.Utc).AddTicks(1604), 2.5f, 2, "This is a {{c1::cloze card}} with two {{c2::clozes}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 4, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 831, DateTimeKind.Utc).AddTicks(3653), 2.5f, 2, "This is a [completion card] %%completion card%%.", new TimeSpan(0, 0, 10, 0, 0), 3, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 3, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 831, DateTimeKind.Utc).AddTicks(2915), 2.5f, 2, @"//JavaScript

assert(2 == 3)", new TimeSpan(0, 0, 10, 0, 0), 4, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 2, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 831, DateTimeKind.Utc).AddTicks(2899), 2.5f, 1, @"# Python

assert(2 == 3)", new TimeSpan(0, 0, 10, 0, 0), 4, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 14, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 838, DateTimeKind.Utc).AddTicks(4768), 2.5f, 2, "Why are periodic boundary conditions acceptable?", new TimeSpan(0, 0, 10, 0, 0), 2, "Periodic boundary conditions are problematic if we are trying to measure a global or extensive property. In general we measure local properties so as long as the boundaries of the system are sufficiently far away they do not matter. Examples include the local density of states or the heat capacity per particle." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 29, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 839, DateTimeKind.Utc).AddTicks(1826), 2.5f, 2, "Drude theory decomposition of the electromagnetic field", new TimeSpan(0, 0, 10, 0, 0), 2, "$\\textbf{E} = \\frac{1}{ne}\\textbf{j}\\times \\mathbf{B} + \\frac{m}{n e^2 \\tau}\\textbf{j}$ The first term is called the Hall field and the second term the parallel field." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 30, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 839, DateTimeKind.Utc).AddTicks(2182), 2.5f, 2, "Drude theory zero magnetic field conductivity", new TimeSpan(0, 0, 10, 0, 0), 2, "$\\sigma = \\frac{n e^2 \\tau}{m}$ The most subtle bit here is that if the mass is small, the acceleration is larger so the electrical conductivity is larger. The rest comes from simple consideration of the scaling relationships." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 31, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 839, DateTimeKind.Utc).AddTicks(2557), 2.5f, 2, "Drude theory (B is not zero) $E_\\text{Hall}$", new TimeSpan(0, 0, 10, 0, 0), 2, "$\\textbf{E}_\\text{Hall} = R_H \\textbf{B}\\times\\textbf{j}$ where $R_H \\equiv \\frac{1}{n(-e)}$ and this is the basis of Hall effect sensors." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 58, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 840, DateTimeKind.Utc).AddTicks(2721), 2.5f, 2, "Paramagnetism in Sommerfeld theory", new TimeSpan(0, 0, 10, 0, 0), 2, "$\\textbf{M} \\equiv \\frac{\\chi}{\\mu_0}\\textbf{B}$ $H = \\frac{p^2}{2m} + \\tilde{g}\\mu_B \\textbf{B}\\cdot\\vec{\\sigma}$ We leave out the vector potential term because the coupling to the spins is more significant. The energies for different spins are therefore adjusted by $\\pm \\mu_B \\textbf{B}$ Some states will flip over, but not all of them because many states are already filled. Because the density of states is approximately constant in a small window around the Fermi level, this means that we move a number of spins proportional to the field, giving a paramagnetic response. $n_\\uparrow = \\int_0^{E_F -\\mu_B B} d\\epsilon \\frac{g(\\epsilon)}{2}$ and similarly for $n_\\downarrow$. Approximately $(n_\\downarrow - n_\\uparrow)\\approx \\frac{1}{2}g(\\epsilon_F)\\mu_B B$. Each electron carries one Bohr magneton of moment, and therefore $\\chi = \\mu_B^2\\mu_0 g(\\epsilon_F)$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 57, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 840, DateTimeKind.Utc).AddTicks(2236), 2.5f, 2, "Paramagnetism (definition of $\\chi$)", new TimeSpan(0, 0, 10, 0, 0), 2, "$\\textbf{M} \\equiv \\frac{\\chi}{\\mu_0}\\textbf{B}$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 56, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 840, DateTimeKind.Utc).AddTicks(1878), 2.5f, 2, "What is the Peltier coefficient in the Sommerfled theory? How does this compare to Drude theory?", new TimeSpan(0, 0, 10, 0, 0), 2, "Drude theory got this terribly wrong because the heat capacity was far too large. In the Sommerfeld theory $\\Pi = \\frac{c_v T}{3(-e)}$ which is much better." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 55, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 840, DateTimeKind.Utc).AddTicks(1538), 2.5f, 2, "Sommerfeld mean free path", new TimeSpan(0, 0, 10, 0, 0), 2, "Using the electron energy at the Fermi level, we get $\\lambda_\\text{room}$ is around 100 angstrom, and at low temperature it is comparable to a mm, which is a problem!" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 54, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 840, DateTimeKind.Utc).AddTicks(1185), 2.5f, 2, "How does the Sommerfeld theory fix the heat capacity problem from Debye theory?", new TimeSpan(0, 0, 10, 0, 0), 2, "Only electrons in a window with width $k_B T$ contribute to the relevant properties. Each absorbs on average $k_B T$ energy. Therefore the energy at finite temperature scales with $T^2$ and the heat capacity is T-linear, which is what Debye theory was missing." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 53, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 840, DateTimeKind.Utc).AddTicks(800), 2.5f, 2, "Give a coarse estimate and derivation for the heat capacity in the Sommerfled theory", new TimeSpan(0, 0, 10, 0, 0), 2, "We can approximate quantities by considering just the states at the Fermi level. A narrow window with width $k_B T$ defines the physics. There are $V g(\\epsilon_F) k_B T$ states. For the Sommerfeld theory, the density of states is $g(\\epsilon_F) = \\frac{3}{2}\\frac{n}{\\epsilon_F}$. Each of these states absorbs around $k_B T$ energy. This means that $E_\\text{total} = E(T=0) + \\frac{\\gamma}{2}Vg(\\epsilon_F)(k_B T)^2$ where $\\gamma$ is a dimensionless constant accounting for the fact that we did not carry through the exact computation. This gives a T-linear contribution to the heat capacity at low temperature! The full calculation gives $c_v = \\frac{\\pi^2}{3}(\\frac{3}{2}N k_B)\\left(\\frac{k_B T}{\\epsilon_F}\\right)$." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 52, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 840, DateTimeKind.Utc).AddTicks(166), 2.5f, 2, "Sommerfeld theory typical velocity (Fermi veocity)", new TimeSpan(0, 0, 10, 0, 0), 2, "$v_F \\equiv \\frac{\\hbar k_F}{m}$ Which is comparable to a reasonable fraction (1%) of the speed of light or larger!" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 51, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 839, DateTimeKind.Utc).AddTicks(9842), 2.5f, 2, "Typical Fermi energy (for Cu)", new TimeSpan(0, 0, 10, 0, 0), 2, "80,000 K is typical for Cu." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 50, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 839, DateTimeKind.Utc).AddTicks(9561), 2.5f, 2, "Fermi momentum and Fermi energy for gas of particles with density $n$", new TimeSpan(0, 0, 10, 0, 0), 2, "\"$k_F = \\left(3 \\pi ^2 n\\right)^{1/3}$ $E_F = \\frac{\\hbar ^2 k_F^2}{2 m} = \\frac{hbar^2}{2m}(3\\pi^2 n)^{2/3}$ which relates the energy and the density. Pluggin in a \"\"typical density\"\" (1 electron per atom) we get for Cu $E_F = 7 \\text{eV}$ and the Fermi temperature is 80,000 K which is extremely large! This is because there are a lot of electrons!\"" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 49, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 839, DateTimeKind.Utc).AddTicks(9125), 2.5f, 2, "Fermi sea and Fermi surface + calculation for number of particles", new TimeSpan(0, 0, 10, 0, 0), 2, "$N= \\frac{2 V}{\\left(2 \\pi\\right)^3} \\int^{|k| < k_F} d^3 k$ We call all the states with wavenumber less then $k_F$ (i.e. the filled states) the Fermi sea, and those at the Fermi momentum the Fermi surface." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 48, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 839, DateTimeKind.Utc).AddTicks(8760), 2.5f, 2, "Definition of the Fermi wavevector", new TimeSpan(0, 0, 10, 0, 0), 2, "For a quadratic band, we can define the Fermi wavevector through $\\frac{\\hbar^2 k_F^2}{2 m} \\equiv E_F$." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 47, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 839, DateTimeKind.Utc).AddTicks(8398), 2.5f, 2, "Fermi energy vs chemical potential", new TimeSpan(0, 0, 10, 0, 0), 2, "The Fermi energy is defined as the chemical potential at zero temperature. Just call it the chemical potential since this is always correct." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 46, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 839, DateTimeKind.Utc).AddTicks(8019), 2.5f, 2, "Fermi occupation factor", new TimeSpan(0, 0, 10, 0, 0), 2, "$n_F \\equiv \\frac{1}{\\exp{\\beta(\\epsilon - \\mu)} + 1}$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 45, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 839, DateTimeKind.Utc).AddTicks(7684), 2.5f, 2, "Basics of Sommerfeld theory (date + philosophical underpinnings)", new TimeSpan(0, 0, 10, 0, 0), 2, "1927 Treat metals with Fermi statistics. $n_F \\equiv \\frac{1}{e^{\\beta(\\epsilon -\\mu)} + 1}$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 44, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 839, DateTimeKind.Utc).AddTicks(7314), 2.5f, 2, "What does Drude theory do well and poorly?", new TimeSpan(0, 0, 10, 0, 0), 2, "Reproduces many transport properties. However, 1. $R_H$ can have wrong sign 2. $c_v \\ll \\frac{3}{2} k_B$ 3. $S$ is off by ~100 and can have sign wrong Not much progress was made for ~25 years until 1925 when Fermi statistics were roughly understood and Sommerfeld produced a better theory for metals." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 43, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 839, DateTimeKind.Utc).AddTicks(6955), 2.5f, 2, "Why do we get Wiedemann-Franz correct but the Seebeck coefficient wrong in the kinetic theory (Drude) for transport?", new TimeSpan(0, 0, 10, 0, 0), 2, "We make two errors: The thermal conductivity we assume is too large. Simultaneously we assume the kinetic energy is given by the kinetic value, when in fact it is much larger. These cancel differently in these two quantitites. Both problems are fixed by considering the statistics of the electron." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 42, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 839, DateTimeKind.Utc).AddTicks(6596), 2.5f, 2, "Kinetic theory Seebeck coefficient + discrepancy + reason for the discrepancy", new TimeSpan(0, 0, 10, 0, 0), 2, "We define the Seebeck coefficient through $S \\equiv \\frac{\\Pi }{T} = \\frac{k_B}{ 2(-e)}$. Unfortunately, for actual materials this is about 100 times too large! This is becuase we are using a value for $c_v$ that is much too large. The real heat capacity is much smaller than $\\frac{3}{2} k_B$. This is because we are treating the electrons incorrectly for their statistics in the kinetic theory." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 41, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 839, DateTimeKind.Utc).AddTicks(6182), 2.5f, 2, "Kinetic theory Peltier coefficient", new TimeSpan(0, 0, 10, 0, 0), 2, "$\\Pi = \\frac{c_v T}{3 (-e)}$ Plugging in the kinetic value for the coefficient of heat which is $c_v = \\frac{3}{2}k_B$ we get $\\Pi = \\frac{k_B T}{2 (-e)}$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 40, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 839, DateTimeKind.Utc).AddTicks(5842), 2.5f, 2, "Limits to Peltier coolers", new TimeSpan(0, 0, 10, 0, 0), 2, "Competition comes from Joule heating. This motivates the search for materials with small resistivity compared to the Peltier coefficient." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 39, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 839, DateTimeKind.Utc).AddTicks(5516), 2.5f, 2, "Definition of the Peltier coefficient", new TimeSpan(0, 0, 10, 0, 0), 2, "We can define the thermal transport via $\\textbf{j}_Q \\equiv \\Pi \\textbf{j}$ where the latter $\\textbf{j}$ is the standard electrical current." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 38, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 839, DateTimeKind.Utc).AddTicks(5142), 2.5f, 2, "Transport philosophy behind the Wiedemann-Franz law", new TimeSpan(0, 0, 10, 0, 0), 2, "Ideally, particle transport of electrons represents both heat and electrical transport." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 37, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 839, DateTimeKind.Utc).AddTicks(4724), 2.5f, 2, "Wiedemann-Franz law", new TimeSpan(0, 0, 10, 0, 0), 2, "$L \\equiv \\frac{\\kappa}{\\sigma T}= \\frac{4}{\\pi}\\left(\\frac{k_B}{e}\\right)^2$ This can be evaluated to give about $1\\cdot 10^{-8}\\frac{\\text{Watt}\\Omega}{K^2}$ The fact that this is the same (to within a factor of order unity) for all materials for all T (the Wiedemann-Franz law) was known from the mid 1800s." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 36, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 839, DateTimeKind.Utc).AddTicks(4348), 2.5f, 2, "Motivation for the Lorenz number (+ definition) in Drude theory", new TimeSpan(0, 0, 10, 0, 0), 2, "We want to take a quantity which does not depend on $\\tau$. In fact we can construct a quantity which only depends on fundamental quantities $L \\equiv \\frac{K}{T \\sigma}$ In the Drude theory this gives $L = \\frac{4}{\\pi}\\left(\\frac{k_B}{e}\\right)^2$ which gives the Wiedemann-Franz law." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 35, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 839, DateTimeKind.Utc).AddTicks(3982), 2.5f, 2, "Kinetic theory $\\left<v\\right>$", new TimeSpan(0, 0, 10, 0, 0), 2, "$\\left<v\\right> = \\sqrt{\\frac{8 k_B T}{\\pi m}}$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 34, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 839, DateTimeKind.Utc).AddTicks(3649), 2.5f, 2, "Derive the thermal conductivity from Drude theory", new TimeSpan(0, 0, 10, 0, 0), 2, "The core idea is $K \\equiv \\frac{1}{3} n c_v \\left< v\\right> \\lambda$ but also $\\lambda = \\left<v\\right>\\tau$. Plugging in the kinetic theory expression for $\\left<v\\right> = \\sqrt{\\frac{8 k_B T}{\\pi m}}$ At the end of the day this gives $K = \\frac{4}{\\pi} \\frac{n \\tau k_B ^2 T}{m}$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 33, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 839, DateTimeKind.Utc).AddTicks(3244), 2.5f, 2, "Drude theory sign of the Hall coefficient", new TimeSpan(0, 0, 10, 0, 0), 2, "This tells us about whether the dominant carriers are electron-like or hole-like. In particular, valence 1 atomic metals have Hall coefficient consistent with electron-like transport but valence 2 atomic metals can have Hall coefficient consistent with hole-like transport!" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 32, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 839, DateTimeKind.Utc).AddTicks(2912), 2.5f, 2, "What makes a good Hall effect sensor?", new TimeSpan(0, 0, 10, 0, 0), 2, "Make $R_H$ large and therefore a small density (make sure you know what $R_H$ is in terms of base quantities). Typically this means we use semiconductors $R_H \\equiv \\frac{1}{n(-e)}$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 60, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 840, DateTimeKind.Utc).AddTicks(3422), 2.5f, 2, "Successes and failures of free electron theories", new TimeSpan(0, 0, 10, 0, 0), 2, "We successfully predict $c_v, \\sigma, K, \\Pi, \\chi$ and a number of other properties. However the mean free path is unrealistically large. Also we assume that there is one valence electron per atom which is not accurate for most elements. Cannot reproduce any insulating behaviors such as in band insulators. The sign of the Hall coefficient can be negative which is mysterious." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 243, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(819), 2.5f, 2, "The process of {{c1::allowing the system to discover what features should be used in the representation}} is called {{c2::representation learning}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 121, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 843, DateTimeKind.Utc).AddTicks(9614), 2.5f, 2, "In what way is the reciprocal lattice the Fourier transform of the direct lattice? Derive this.", new TimeSpan(0, 0, 10, 0, 0), 2, "Define a delta function comb $\\rho(x) = \\sum_n \\delta (\\textbf{x} -\\textbf{x}_n)$ Fourier transforming $\\rho$ gives $\\text{FT}[\\rho] = \\int dx e^{ikx} \\rho(x)$ $\\text{FT}[\\rho] = \\sum_n e^{ik\\textbf{x}_n}$ This a delta comb exactly at the reciprocal lattice vectors and zero elsewhere, with a prefactor $\\frac{2\\pi}{a}$ The same idea basically holds in 3D. The prefactor is $\\frac{(2\\pi)^3}{V}$ where V is the primitive unit cell volume." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 123, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 844, DateTimeKind.Utc).AddTicks(407), 2.5f, 2, "What is a lattice plane?", new TimeSpan(0, 0, 10, 0, 0), 2, "A plane containing three non-collinear lattice points. A lattice plane therefore contains infinitely many lattice points." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 210, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 847, DateTimeKind.Utc).AddTicks(9544), 2.5f, 2, "$\\sum_{i=0}^n x^i$ = {{c1::$\\frac{1-x^{n+1} }{1-x}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 209, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 847, DateTimeKind.Utc).AddTicks(9013), 2.5f, 2, "$\\sum_{i=m}^n i$ = {{c1::$\\frac{(n-m+1)(n+m)}{2}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 208, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 847, DateTimeKind.Utc).AddTicks(8380), 2.5f, 2, "$\\sum_{i=0}^n i^3$ = {{c1::$\\left(\\frac{n(n+1)}{2}\\right)^2$}} = {{c2::$\\left[\\sum_{i=0}^ni\\right]^2$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 207, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 847, DateTimeKind.Utc).AddTicks(8327), 2.5f, 2, "$\\sum_{i=0}^n i^3$ = {{c1::$\\left(\\frac{n(n+1)}{2}\\right)^2$}} = {{c2::$\\left[\\sum_{i=0}^ni\\right]^2$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 206, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 847, DateTimeKind.Utc).AddTicks(7265), 2.5f, 2, "$\\sum_{i=0}^n i^2$ = {{c1::$\\frac{n(n+1)(2n+1)}{6}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 205, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 847, DateTimeKind.Utc).AddTicks(5933), 2.5f, 2, "What is the arithmetic statement of the pigeonhole principle? What is the sketch of the proof?", new TimeSpan(0, 0, 10, 0, 0), 2, "The max of a set of numbers is at least the mean. Proof by contradiction." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 204, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 847, DateTimeKind.Utc).AddTicks(5597), 2.5f, 2, "What is the general statement of the pigeonhole principle?", new TimeSpan(0, 0, 10, 0, 0), 2, "If m objects are placed into n buckets, at least one bucket contains ceil(m/n) objects." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 203, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 847, DateTimeKind.Utc).AddTicks(5281), 2.5f, 2, "What is the relationship between the principle of inclusion-exclusion and the sum rule of counting?", new TimeSpan(0, 0, 10, 0, 0), 2, "The sum rule is PIE in the case of n=2 and where the intersection is empty." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 202, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 847, DateTimeKind.Utc).AddTicks(4939), 2.5f, 2, "What is the product rule of counting?", new TimeSpan(0, 0, 10, 0, 0), 2, "The number of different outcomes of two non-interacting experiments is the product of their individual number of outcomes. This is because we can label all of the composite outcomes uniquely the outcomes of the individual experiments." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 201, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 847, DateTimeKind.Utc).AddTicks(4511), 2.5f, 2, "What is the sum rule of counting?", new TimeSpan(0, 0, 10, 0, 0), 2, "Essentially: Union of distinct outcomes." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 200, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 847, DateTimeKind.Utc).AddTicks(4172), 2.5f, 2, "What kind of database is Neo4J?", new TimeSpan(0, 0, 10, 0, 0), 2, "A graph-oriented database." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 199, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 847, DateTimeKind.Utc).AddTicks(3852), 2.5f, 2, "What tools might you use for key-value type data?", new TimeSpan(0, 0, 10, 0, 0), 2, "Redis, Riak, memcached, and others." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 211, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 848, DateTimeKind.Utc).AddTicks(145), 2.5f, 2, "$\\sum_{i=m}^n x^i$ = {{c1::$\\frac{x^m-x^{n+1} }{1-x}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 198, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 847, DateTimeKind.Utc).AddTicks(3561), 2.5f, 2, "What kind of database is CouchDB?", new TimeSpan(0, 0, 10, 0, 0), 2, "A document oriented database, i.e. NoSQL." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 196, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 847, DateTimeKind.Utc).AddTicks(2886), 2.5f, 2, "What is the difference between a merge, a concat, and a join in pandas?", new TimeSpan(0, 0, 10, 0, 0), 2, "At a high level, merge is used to combine DataFrames on the basis of values of common columns, while concatenations append. Joins are just merge but where we are merging on the value of the index (i.e. with left_index=True in the merge call) To see how a merge works, consider this example:" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 195, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 847, DateTimeKind.Utc).AddTicks(2515), 2.5f, 2, "How do you plot a quick scatterplot of two columns from a DataFrame?", new TimeSpan(0, 0, 10, 0, 0), 2, "1df.plot.scatter(x='c1', y='c2')" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 194, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 847, DateTimeKind.Utc).AddTicks(2181), 2.5f, 2, "How do you plot a quick histogram of a DataFrame?", new TimeSpan(0, 0, 10, 0, 0), 2, "1df.plot.hist()" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 193, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 847, DateTimeKind.Utc).AddTicks(1887), 2.5f, 2, "What is the signature for DataFrame.groupby? How much of split-apply-combine does it implement? Describe the function of the most critical kwargs.", new TimeSpan(0, 0, 10, 0, 0), 2, "1 2 3DataFrame.groupby(by=None, axis=0, level=None, as_index=True, sort=True, group_keys=True, observed=False, dropna=True) The result of this is a DataFrameGroupBy object, which represents the split groups before aggregation. At this stage, computation can be performed on the groups. The by kwarg can be a label or set of labels, or a function that assigns groups. If it is a function, the function is called on the values of the indices. The axis kwarg controls whether splitting happens along rows (default, axis=0) or columns (axis=1) as elsewhere in pandas." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 192, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 847, DateTimeKind.Utc).AddTicks(1479), 2.5f, 2, "What is the computational procedure underlying pd.groupby and similar (i.e. SQL's GROUP BY)?", new TimeSpan(0, 0, 10, 0, 0), 2, "pd.groupby implements a common computational paradigm: split-apply-combine. split: First, we split the data into groups based on some criterion apply: Then we apply a function to each group independently combine: Then we collect/combine the results into a data structure. The combine step can include aggregating, filtering, or otherwise modifying the data as well." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 191, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 847, DateTimeKind.Utc).AddTicks(1061), 2.5f, 2, "What are the most basic statistical primitives/summary functions available in pandas?", new TimeSpan(0, 0, 10, 0, 0), 2, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 190, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 847, DateTimeKind.Utc).AddTicks(759), 2.5f, 2, "How do you select multiple columns out of a DataFrame without using drop?", new TimeSpan(0, 0, 10, 0, 0), 2, "\"You can pass a list as the key for item access. As an example 1df[[\"\"a\"\", \"\"c\"\"]] would drop column \"\"b\"\" in a DataFrame that had columns \"\"a\"\", \"\"b\"\", and \"\"c\"\".\"" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 189, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 847, DateTimeKind.Utc).AddTicks(395), 2.5f, 2, "What are the logical operations supported by pandas? Remember to include also null checks, and containment.", new TimeSpan(0, 0, 10, 0, 0), 2, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 188, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 847, DateTimeKind.Utc).AddTicks(64), 2.5f, 2, "How do you get a random sample from a DataFrame?", new TimeSpan(0, 0, 10, 0, 0), 2, "1 2 3df.sample(n=30) # or, df.sample(frac=1e-4)" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 187, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 846, DateTimeKind.Utc).AddTicks(9730), 2.5f, 2, "How do you query a DataFrame against a column condition? As a concrete example, filter by rows where c1 is at least 5.", new TimeSpan(0, 0, 10, 0, 0), 2, "1df[df.c1 >= 5]" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 186, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 846, DateTimeKind.Utc).AddTicks(9343), 2.5f, 2, "How do you remove missing values from a DataFrame?", new TimeSpan(0, 0, 10, 0, 0), 2, "\"1 2 3df.dropna() # or to fill them, for instance df.fillna(0.) You can also specify whether to drop only completely null rows using the how=\"\"all\"\" kwarg.\"" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 185, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 846, DateTimeKind.Utc).AddTicks(9005), 2.5f, 2, "How do you remove columns from a DataFrame?", new TimeSpan(0, 0, 10, 0, 0), 2, "1df.drop(columns=['c1','c2']) You can also drop rows by using the index kwarg instead of the columns kwarg." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 197, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 847, DateTimeKind.Utc).AddTicks(3221), 2.5f, 2, "What are some tools you can consider using if you need to manage data with relationships?", new TimeSpan(0, 0, 10, 0, 0), 2, "pandas, SQL, HBase, and other relational data model tools all work well." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 212, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 848, DateTimeKind.Utc).AddTicks(640), 2.5f, 2, "$\\sum_{i=0}^n i2^i$ = {{c1::$2 + 2^{n+1}(n-1)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 213, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 848, DateTimeKind.Utc).AddTicks(1179), 2.5f, 2, "$\\sum_{i=0}^n \\frac{i}{2^i}$ = {{c1::$\\frac{2^{n+1} - n - 2}{2^n}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 214, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 848, DateTimeKind.Utc).AddTicks(1699), 2.5f, 2, "$e^x$ = {{c1::$\\sum_{n=0}^\\infty \\frac{x^n}{n!}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 241, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 849, DateTimeKind.Utc).AddTicks(142), 2.5f, 2, "Can you provide a few examples of systems where manually choosing features for a task is difficult? What does this say about the structure of ML problems?", new TimeSpan(0, 0, 10, 0, 0), 2, "Raw audio is composed of the wave amplitude as a function of time. If we want to detect a spoken word in a sample of audio, we might look for the presence of a particular arrangement of syllables, but it's hard to see how this maps onto the raw features. The same happens in algorithms that must work with images. Typically we want to answer high level questions, which are expressed in terms of concepts only just shallower. Projecting our data into, for instance, the 2D space of two selected pixels our data looks randomly arranged. This suggests that it is ideal for our systems to also learn the feature representation, although this has negative consequences too." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 240, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 848, DateTimeKind.Utc).AddTicks(9624), 2.5f, 2, "Machine learning algorithms depend heavily on the {{c1::representation of data}} they are given. The elements of individual pieces of data we give to a learning system are called {{c1::features}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 239, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 848, DateTimeKind.Utc).AddTicks(9602), 2.5f, 2, "Machine learning algorithms depend heavily on the {{c1::representation of data}} they are given. The elements of individual pieces of data we give to a learning system are called {{c1::features}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 238, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 848, DateTimeKind.Utc).AddTicks(9073), 2.5f, 2, "Knowledge base approaches to intelligence generally perform poorly because {{c1::it is difficult to specify in advance what the essential knowledge is}} and {{c1::what the relationships between pieces of knowledge are}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 237, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 848, DateTimeKind.Utc).AddTicks(8974), 2.5f, 2, "Knowledge base approaches to intelligence generally perform poorly because {{c1::it is difficult to specify in advance what the essential knowledge is}} and {{c1::what the relationships between pieces of knowledge are}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 236, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 848, DateTimeKind.Utc).AddTicks(8327), 2.5f, 2, "{{c1::Knowledge base}} approaches to artificial intelligence {{c2::reason about statements in a formal language using logical inference rules}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 235, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 848, DateTimeKind.Utc).AddTicks(8226), 2.5f, 2, "{{c1::Knowledge base}} approaches to artificial intelligence {{c2::reason about statements in a formal language using logical inference rules}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 234, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 848, DateTimeKind.Utc).AddTicks(7740), 2.5f, 2, "The three basic sets of machine learning tasks are {{c1::Supervised Learning}}, {{c2::Unsupervised Learning}}, and {{c3::Reinforcement Learning}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 233, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 848, DateTimeKind.Utc).AddTicks(7710), 2.5f, 2, "The three basic sets of machine learning tasks are {{c1::Supervised Learning}}, {{c2::Unsupervised Learning}}, and {{c3::Reinforcement Learning}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 232, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 848, DateTimeKind.Utc).AddTicks(7678), 2.5f, 2, "The three basic sets of machine learning tasks are {{c1::Supervised Learning}}, {{c2::Unsupervised Learning}}, and {{c3::Reinforcement Learning}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 231, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 848, DateTimeKind.Utc).AddTicks(7113), 2.5f, 2, "A computer program is said to {{c1::learn from experience E}} with respect to {{c2::some class of tasks T}} and {{c3::performance measure P}}, if its performance at tasks in T, as measured by P, improves with experience E.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 230, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 848, DateTimeKind.Utc).AddTicks(7083), 2.5f, 2, "A computer program is said to {{c1::learn from experience E}} with respect to {{c2::some class of tasks T}} and {{c3::performance measure P}}, if its performance at tasks in T, as measured by P, improves with experience E.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 229, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 848, DateTimeKind.Utc).AddTicks(7050), 2.5f, 2, "A computer program is said to {{c1::learn from experience E}} with respect to {{c2::some class of tasks T}} and {{c3::performance measure P}}, if its performance at tasks in T, as measured by P, improves with experience E.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 228, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 848, DateTimeKind.Utc).AddTicks(6541), 2.5f, 2, "The statement of {{c1::Bayes Theorem}} is {{c2::$P(F|E) = \\frac{P(E|F)P(F)}{P(E)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 227, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 848, DateTimeKind.Utc).AddTicks(6463), 2.5f, 2, "The statement of {{c1::Bayes Theorem}} is {{c2::$P(F|E) = \\frac{P(E|F)P(F)}{P(E)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 226, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 848, DateTimeKind.Utc).AddTicks(5969), 2.5f, 2, "{{c1::$P(E|F)$}} = {{c2::$\\frac{P(EF)}{P(F)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 225, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 848, DateTimeKind.Utc).AddTicks(5937), 2.5f, 2, "{{c1::$P(E|F)$}} = {{c2::$\\frac{P(EF)}{P(F)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 224, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 848, DateTimeKind.Utc).AddTicks(5469), 2.5f, 2, "$P(E^c)$ = {{c1::$1 - P(E)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 223, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 848, DateTimeKind.Utc).AddTicks(4969), 2.5f, 2, "An {{c1::Event space}} is {{c2::the subset of the sample space that we ascribe meaning (or a particular label) to}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 222, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 848, DateTimeKind.Utc).AddTicks(4877), 2.5f, 2, "An {{c1::Event space}} is {{c2::the subset of the sample space that we ascribe meaning (or a particular label) to}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 221, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 848, DateTimeKind.Utc).AddTicks(4403), 2.5f, 2, "A {{c1::Sample space}} is the {{c2::set of all possible outcomes of an experiment.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 220, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 848, DateTimeKind.Utc).AddTicks(4344), 2.5f, 2, "A {{c1::Sample space}} is the {{c2::set of all possible outcomes of an experiment.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 219, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 848, DateTimeKind.Utc).AddTicks(3836), 2.5f, 2, "What is the origin of balls and urns in as the stereotypical problem in probability?", new TimeSpan(0, 0, 10, 0, 0), 2, "Jacob Bernoulli was very interested in both voting and Rome, where voting was performed by dropping balls into clay urns." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 218, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 848, DateTimeKind.Utc).AddTicks(3483), 2.5f, 2, "What is a degenerate tree?", new TimeSpan(0, 0, 10, 0, 0), 2, "A degenerate tree is a tree where each node has exactly one child." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 217, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 848, DateTimeKind.Utc).AddTicks(3147), 2.5f, 2, "What is the definition of a binary search tree?", new TimeSpan(0, 0, 10, 0, 0), 2, "A binary search tree is a binary tree on ordered values with the property that a node is larger than all values on its left, and less than or equal all its values on the right." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 216, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 848, DateTimeKind.Utc).AddTicks(2792), 2.5f, 2, "$\\log\\left(\\prod_{i=1}^nf(i)\\right)$ = {{c1::$\\sum_{i=1}^n\\log f(i)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 215, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 848, DateTimeKind.Utc).AddTicks(2265), 2.5f, 2, "$n! \\approx $ {{c1::$\\sqrt{2\\pi n}\\left(\\frac{n}{e}\\right)^n$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 184, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 846, DateTimeKind.Utc).AddTicks(8623), 2.5f, 2, "How do you order rows of a DataFrame by the values in a column?", new TimeSpan(0, 0, 10, 0, 0), 2, "\"1df.sort_values(\"\"column_name\"\") You can control the sorting with the key kwarg, just like in most Python sorts.\"" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 122, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 844, DateTimeKind.Utc).AddTicks(22), 2.5f, 2, "How do we Fourier transform periodic functions and what is the structure factor?", new TimeSpan(0, 0, 10, 0, 0), 2, "The Fourier transform takes values only at the reciprocal lattice vectors, and they are weighted by the structure factor. You can derive this directly by doing the Fourier transform and changing the integration coordinate to $x = R + y$. $\\text{FT}[f] \\approx \\left(\\sum_\\textbf{G} \\delta(\\textbf{k} - \\textbf{G})\\right)\\left(\\int_{\\text{unit cell}} d^3\\textbf{y} e^{i\\textbf{k} \\cdot \\textbf{y}} f(\\textbf{y})\\right)$ The integral is referred to as the structure factor $S(\\textbf{k})$." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 183, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 846, DateTimeKind.Utc).AddTicks(8275), 2.5f, 2, "How do you concatenate along rows as opposed to columns in pandas?", new TimeSpan(0, 0, 10, 0, 0), 2, "By default you get row concatenation, but you can get column concatenation using the axis=1 kwarg for pd.concat." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 181, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 846, DateTimeKind.Utc).AddTicks(7395), 2.5f, 2, "What is the signature for DataFrame.pivot_table?", new TimeSpan(0, 0, 10, 0, 0), 2, "1 2 3 4pd.pivot_table(data, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False)" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 149, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 845, DateTimeKind.Utc).AddTicks(299), 2.5f, 2, "How is Wigner crystallization achieved in a 2D triangular moire?", new TimeSpan(0, 0, 10, 0, 0), 2, "At partial filling (low density) the electrons want to avoid not charges on the same moire unit cell, but also neighboring cells." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 148, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 844, DateTimeKind.Utc).AddTicks(9958), 2.5f, 2, "What is Wigner crystallization?", new TimeSpan(0, 0, 10, 0, 0), 2, "A 2D or 3D electron gas will crystallize if the density is sufficiently low. A generalized Wigner crystal refers to a crystal phase occurring in non-electronic systems in low density." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 147, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 844, DateTimeKind.Utc).AddTicks(9571), 2.5f, 2, "How does a geometric structure factor tell us about scattering from a BCC lattice? Consider it as a simple cubic with a basis.", new TimeSpan(0, 0, 10, 0, 0), 2, "BCC's inverse is FCC, so we should recover this in the end. Alternatively, we can consider the lattice as a primitive cubic with a two point basis, $(0,0,0), (a/2,a/2,a/2)$. The structure factor is then $S_\\textbf{K} = 1 + \\text{exp}(i\\textbf{K}\\cdot (\\textbf{x} + \\textbf{y} + \\textbf{z}) a/2)$ Meanwhile $\\textbf{K}$ can range through $\\textbf{K} = \\frac{2\\pi}{a}(n_1 \\textbf{x}, n_2 \\textbf{y}, n_3 \\textbf{z})$. The structure factor vanishes if the argument of the exponential is an odd multiple of $\\pi$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 146, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 844, DateTimeKind.Utc).AddTicks(9117), 2.5f, 2, "How does the scattering intensity depend on the structure factor?", new TimeSpan(0, 0, 10, 0, 0), 2, "Just like fields and intensities, through the square." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 145, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 844, DateTimeKind.Utc).AddTicks(8815), 2.5f, 2, "Explain the origin of the geometric structure factor for scattering from a lattice with a basis", new TimeSpan(0, 0, 10, 0, 0), 2, "If there are multiple atoms or scatterers inside a unit cell, they in general have a different phase. This phase coherence is what gives us Bragg peaks, so it is essential to consider. If there are two sites $\\textbf{d}_i, \\textbf{d}_j$ then the phase difference for change in wavevector $\\textbf{K}$ is $\\textbf{K}\\cdot (\\textbf{d}_i - \\textbf{d}_j)$. The net scattering is modulated by $S_\\textbf{K} = \\sum_{j=1}^{n} e^{i\\textbf{K}\\cdot \\textbf{d}_j}$ which is called the geometric structure factor." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 144, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 844, DateTimeKind.Utc).AddTicks(8334), 2.5f, 2, "Describe the Ewald construction and how it illustrates different x-ray scattering techniques.", new TimeSpan(0, 0, 10, 0, 0), 2, "1. Laue: consider two spheres due to different k vectors $k_0$ and $k_1$ defining the wavelength envelope of the light. All k vectors following in the offset narrow shell will be observed. 2. Rotating crystal: monochromatic beam, but the Ewald sphere is swept out around the origin. Observe peaks for all k-vectors up to twice the incident momentum. 3. Powder diffraction: like rotating crystal, but now two angles are swept." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 143, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 844, DateTimeKind.Utc).AddTicks(7856), 2.5f, 2, "In the Yankowitz paper on pressure tuning, the fan diagrams show oscillations only in a single direction for each carrier type away from CNP and which terminate at the next commensurate filling. What does this imply about the system?", new TimeSpan(0, 0, 10, 0, 0), 2, "Consistency with strong asymmetric renormalization of the effective mass across the minigaps." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 142, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 844, DateTimeKind.Utc).AddTicks(7493), 2.5f, 2, "How does quantum oscillation give information about the Fermi surface?", new TimeSpan(0, 0, 10, 0, 0), 2, "Low field oscillations provide detailed information about band structure: 1. Periodicity can be used to infer the areal size of the FS. 2. Degeneracy can be used to infer the available symmetries" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 141, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 844, DateTimeKind.Utc).AddTicks(7155), 2.5f, 2, "How are small gaps measured in transport?", new TimeSpan(0, 0, 10, 0, 0), 2, "Typically via thermal activation." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 140, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 844, DateTimeKind.Utc).AddTicks(6820), 2.5f, 2, "What isthe relationship between pressure and twist angle in twisted bilayer graphene?", new TimeSpan(0, 0, 10, 0, 0), 2, "\"The interlayer hopping (controlled through pressure) must be set to flatten the miniband that arises due to interlayer hybridization in twisted bilayer graphene. This allows achieving the \"\"magic angle\"\" condition across a large variety of angles.\"" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 139, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 844, DateTimeKind.Utc).AddTicks(6455), 2.5f, 2, "What is Fraunhofer interference in a superconductor? (Don't be quantitative)", new TimeSpan(0, 0, 10, 0, 0), 2, "A characteristic dependence in the critical current as a function of field with nodes at integer values of of threaded flux." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 138, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 844, DateTimeKind.Utc).AddTicks(6148), 2.5f, 2, "What is the value of the superconducting flux quantum?", new TimeSpan(0, 0, 10, 0, 0), 2, "$\\Phi_0 = h/2e$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 150, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 845, DateTimeKind.Utc).AddTicks(739), 2.5f, 2, "What is Schottky barrier?", new TimeSpan(0, 0, 10, 0, 0), 2, "A potential energy barrier for electrons that forms at metal-semiconductor junctions. A crude explanation for the barrier is that there is an energetic barrier between the semiconductor conduction band (including any band bending) at the chemical potential of the metal. To first order, the Schottky-Mott rule allows you to predict the barrier height via $\\Phi_B \\approx \\Phi_\\text{metal} - \\chi_\\text{semi}$ where $\\chi_\\text{semi}$ is the vacuum ionization energy of the semiconductor. In practice however, junctions will typically have metal-induced gap states or surface states due to the interface with vacuum. Because there will be a sufficiently large density of states, these extra states pin the bands to a fixed location relative to the chemical potential." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 137, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 844, DateTimeKind.Utc).AddTicks(5813), 2.5f, 2, "Various papers on SC in tBLG suggest a percolating superconductor network, why?", new TimeSpan(0, 0, 10, 0, 0), 2, "Differential resistance measurements as a function of current and field demonstrate Fraunhofer interference like effects. From this, an effective superconducting junction size can be estimated via $S = \\Phi_0 / \\Delta B$ where $\\Phi_0\\equiv h/2e$ is the superconducting flux quantum." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 135, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 844, DateTimeKind.Utc).AddTicks(5072), 2.5f, 2, "How do youmeasure charge carrier inhomogeneity in transport?", new TimeSpan(0, 0, 10, 0, 0), 2, "For instance by the full width at half maximum of the resistance peak at charge neutrality or another state with zero density of states and zero width. This does not work outside graphene though. Visualize this in terms of the density of states." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 134, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 844, DateTimeKind.Utc).AddTicks(4725), 2.5f, 2, "Why are devices often made with graphite gates? What about dual graphite gates?", new TimeSpan(0, 0, 10, 0, 0), 2, "Graphite gates allow better contact to samples and therefore lower charge inhomogeneity than in samples with deposited metal contacts. Dual gates allow independent tuning of the doping and displacement electric fields." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 133, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 844, DateTimeKind.Utc).AddTicks(4360), 2.5f, 2, "What does displacement field tuning allow the study of in multilayer devices?", new TimeSpan(0, 0, 10, 0, 0), 2, "Generically: layer imbalance." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 132, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 844, DateTimeKind.Utc).AddTicks(4040), 2.5f, 2, "Bernal stacking?", new TimeSpan(0, 0, 10, 0, 0), 2, "AB stacking where the A and B sites of a material such as bilayer graphene align along the c axis. In bilayer graphene, this means that sites are staggered, unlike in AA stacking where all carbons are above another carbon." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 131, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 844, DateTimeKind.Utc).AddTicks(3676), 2.5f, 2, "Does $(246)$ give a set of lattice planes? What if", new TimeSpan(0, 0, 10, 0, 0), 2, "This depends on whether we started with primitive lattice vectors. If we did then no, $(123)$ would be though. If we use the conventional unit cell (which has larger volume than the primitive unit cell), our vectors will in general be too short and our planes will be spaced too far apart." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 130, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 844, DateTimeKind.Utc).AddTicks(3305), 2.5f, 2, "What are the preferred cleavage directions for a cubic lattice?", new TimeSpan(0, 0, 10, 0, 0), 2, "Typically $(100),(110),(112)$ in decreasing order of likelihood." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 129, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 844, DateTimeKind.Utc).AddTicks(2959), 2.5f, 2, "What is the multiplicity of the set of indices ${123}$?", new TimeSpan(0, 0, 10, 0, 0), 2, "There's a factor of 6 from the permutations. Also theres $2^3$ due to the fact we could invert any index. This gives a total of 48 equivalent sets of indices." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 128, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 844, DateTimeKind.Utc).AddTicks(2487), 2.5f, 2, "What do bars mean in a Miller index?", new TimeSpan(0, 0, 10, 0, 0), 2, "They mean that coordinate is negative." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 127, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 844, DateTimeKind.Utc).AddTicks(2159), 2.5f, 2, "How does the method of intercepts for the Miller indices work?", new TimeSpan(0, 0, 10, 0, 0), 2, "Suppose the intercept along $\\textbf{a}_i$ occurs at a coordinate $y$, then $e^{i\\textbf{G} \\cdot y\\textbf{a}_i} = 1$ or $\\textbf{G} \\cdot y\\textbf{a}_i = 2\\pi n$. The dot product against $\\textbf{G}$ pulls out only $\\textbf{b}_i$ by construction $2\\pi y h_i = 2\\pi n$ where $h_i$ is the coordinate on $\\textbf{b}_i$ in $\\textbf{G}$. This means that the reciprocal of the intercept is the Miller index." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 126, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 844, DateTimeKind.Utc).AddTicks(1733), 2.5f, 2, "What is the correspondence between Miller indices, families of lattice points, and reciprocal lattice vectors?", new TimeSpan(0, 0, 10, 0, 0), 2, "Note that we can describe vectors in reciprocal space via a basis $\\textbf{b}_i$ and use the notation $(hkl) = h\\textbf{b}_1+k\\textbf{b}_2+l\\textbf{b}_3$ These don't have to be primitive! Often we will choose them to be orthogonal which is more convenient. The way we typically construct these is to choose direct space vectors $\\textbf{a}_i$ which may or may not be primitive. If the vectors we choose are primitive, then the vectors defined by $\\textbf{b}_j\\cdot\\textbf{a}_i$ = 2\\pi \\delta_{ij} are primitive vectors of the reciprocal lattice. This reciprocal lattice vector then defines a set of planes by $e^{i\\textbf{G}\\cdot \\textbf{x}} = 1$ where $G \\equiv h\\textbf{b}_1+k\\textbf{b}_2+l\\textbf{b}_3$. The spacing between planes is $\\frac{2\\pi}{|\\textbf{G}|}$." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 125, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 844, DateTimeKind.Utc).AddTicks(1225), 2.5f, 2, "At a high level, explain why a family of lattice planes is in correspondence with a reciprocal lattice vector.", new TimeSpan(0, 0, 10, 0, 0), 2, "The fundamental idea is that a family of lattice planes is perpendicular to a particular vector in the reciprocal lattice $\\textbf{g}$ and that the distance between neighbor planes is $d = \\frac{2\\pi}{|\\textbf{g}_\\text{min}|}$ where $\\textbf{g}_\\text{min}$ is the shortest reciprocal lattice vector in the direction specified by $\\textbf{g}$." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 124, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 844, DateTimeKind.Utc).AddTicks(786), 2.5f, 2, "What is a family of lattice planes?", new TimeSpan(0, 0, 10, 0, 0), 2, "An infinite set of lattice planes generated by a single translation that includes all lattice points." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 136, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 844, DateTimeKind.Utc).AddTicks(5411), 2.5f, 2, "In the Yankowitz paper on pressure tuning tBLG, how is it known that there is twist angle inhomogeneity?", new TimeSpan(0, 0, 10, 0, 0), 2, "Different pairs of contacts produce different doping values for full filling, indicating that the mBZ has different average volume between different contacts." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 151, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 845, DateTimeKind.Utc).AddTicks(1072), 2.5f, 2, "What is Fermi level pinning?", new TimeSpan(0, 0, 10, 0, 0), 2, "After contact, the band bending is changed depending on the creation of states due to the chemistry of the interface." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 152, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 845, DateTimeKind.Utc).AddTicks(1449), 2.5f, 2, "What is the idea behind ODRC (optically detected resistance and capacitance?)", new TimeSpan(0, 0, 10, 0, 0), 2, "Because contacts are bad, you can trust that your device is floated and use DC offset to set overall filling, and AC to modulate the carrier concentration by a small amount. The in sample resistance and capacitance can therefore be detected if there is an observable that couples to $\\Delta \\tilde{n}$, such as the reflectivity in a system with excitons." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 153, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 845, DateTimeKind.Utc).AddTicks(1851), 2.5f, 2, "What is ODRC sensitive to at low frequencies, at high frequencies?", new TimeSpan(0, 0, 10, 0, 0), 2, "At low frequencies you can assume charges rearrange fully, so you are measuring the quantum capacitance and therefore the density of states. At higher frequencies you measure a mix of the capacitance and the in plane resistance. Quantitatively, this is due to a dependence of an observable O by $O \\propto \\frac{1}{C_\\text{eff}^{-1} + i\\omega R}$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 180, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 846, DateTimeKind.Utc).AddTicks(7059), 2.5f, 2, "What is the difference between pd.pivot and pd.pivot_table?", new TimeSpan(0, 0, 10, 0, 0), 2, "In the case where there are non-unique column-value pairs, pivot_table will perform an aggregate, which is not possible when using pd.pivot." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 179, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 846, DateTimeKind.Utc).AddTicks(6713), 2.5f, 2, "What is the purpose of DataFrame.pivot? What is the signature for DataFrame.pivot?", new TimeSpan(0, 0, 10, 0, 0), 2, "\"The signature is 1pd.pivot(data, index=None, columns=None, values=None) which reshapes a DataFrame so that it is based on column values. Unique values from \"\"index\"\" form the axes of the resultant frame. Unlike pd.pivot_table, pd.pivot cannot handle duplicate values for index/column pairs. The columns and values arguments allow you to specify what the columns and content of the resultant frame should be.\"" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 178, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 846, DateTimeKind.Utc).AddTicks(6300), 2.5f, 2, "What is the purpose and syntax for pd.melt? What is the signature?", new TimeSpan(0, 0, 10, 0, 0), 2, "The signature is 1 2 3pd.melt(frame, id_vars=None, value_vars=None, var_name=None, value_name='value', col_level=None, ignore_index=True) melting allows unpivoting a DataFrame from a wide to a long format. Essentially produces a list of key-value pairs for an index column against a value column." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 177, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 846, DateTimeKind.Utc).AddTicks(5935), 2.5f, 2, "Creating a DataFrame: Column oriented with a MultiIndex", new TimeSpan(0, 0, 10, 0, 0), 2, "\"You'll have to make the index with pd.MultiIndex.from_tuples 1 2 3 4 5 6 7df = pd.DataFrame({ \"\"a\"\" : [4 ,5, 6], \"\"b\"\" : [7, 8, 9], \"\"c\"\" : [10, 11, 12]}, index=pd.MultiIndex.from_tuples( [('d',1),('d',2),('e',2)], names=['n','v'])) which creates\"" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 176, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 846, DateTimeKind.Utc).AddTicks(5523), 2.5f, 2, "Creating a DataFrame: Row oriented syntax", new TimeSpan(0, 0, 10, 0, 0), 2, "1 2 3 4 5 6df = pd.DataFrame( [[4, 7, 10], [5, 8, 11], [6, 9, 12]], index=[1, 2, 3], columns=['a', 'b', 'c'])" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 175, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 846, DateTimeKind.Utc).AddTicks(5151), 2.5f, 2, "Creating a DataFrame: Column oriented syntax", new TimeSpan(0, 0, 10, 0, 0), 2, "\"1 2 3 4 5df = pd.DataFrame({ \"\"a\"\" : [4 ,5, 6], \"\"b\"\" : [7, 8, 9], \"\"c\"\" : [10, 11, 12]}, index = [1, 2, 3])\"" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 174, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 846, DateTimeKind.Utc).AddTicks(4734), 2.5f, 2, "Describe the Series abstraction in pandas", new TimeSpan(0, 0, 10, 0, 0), 2, "A Series is a list-like container with an index, a dtype, and a name. A Series represents a column of data, or equivalently a set of scalar observations." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 173, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 846, DateTimeKind.Utc).AddTicks(117), 2.5f, 2, "Describe the critical elements of the DataFrame abstraction", new TimeSpan(0, 0, 10, 0, 0), 2, "Variables are saved in their own columns, called a Series in pandas, and observations are stored in individual rows. A DataFrame is many Series or variables together." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 172, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 845, DateTimeKind.Utc).AddTicks(9795), 2.5f, 2, "Starting a Django webserver", new TimeSpan(0, 0, 10, 0, 0), 2, "python manage.py runserver" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 171, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 845, DateTimeKind.Utc).AddTicks(9485), 2.5f, 2, "Lucena position on the edge with insufficient space Draw K7/P2k4/8/8/8/8/r7/2R5 w - - 0 1", new TimeSpan(0, 0, 10, 0, 0), 2, "There's not enough room here to mount an attack on the rook" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 170, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 845, DateTimeKind.Utc).AddTicks(9123), 2.5f, 2, "Lucena posiiton on the edge winning for white [FEN “K7/P3k3/8/8/8/8/r7/3R4 w – -“]", new TimeSpan(0, 0, 10, 0, 0), 2, "Principle is to again find protection for the king temporarily by moving rook to the B file. Then, you can gain space by threatening the rook as it delivers side checks." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 169, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 845, DateTimeKind.Utc).AddTicks(8777), 2.5f, 2, "Lucena in the center K7/P3k3/8/8/8/8/r7/3R4 w – -", new TimeSpan(0, 0, 10, 0, 0), 2, "Critical principle is to build a bridge whereby you can isolate the enemy king and pull your king behind your rook." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 168, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 845, DateTimeKind.Utc).AddTicks(8439), 2.5f, 2, "Why do van Hove singularities result in divergences of the slope of the density of states?", new TimeSpan(0, 0, 10, 0, 0), 2, "In 3D, the singularities in $|\\nabla \\epsilon|$ are always integrable, so there are discontinuities of slope. The situation is more complicated for 2 and 1D materials!" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 167, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 845, DateTimeKind.Utc).AddTicks(8024), 2.5f, 2, "Explain how the density of states in the free electron theory at a particular energy can be expressed as a surface integral.", new TimeSpan(0, 0, 10, 0, 0), 2, "$g_n(\\epsilon) d\\epsilon$ = \\int_{S_n(\\epsilon)} \\frac{dS}{4\\pi^3}\\delta k(\\textbf{k}) as is demonstrated in this diagram Because $\\delta k(\\textbf{k}) = \\frac{d\\epsilon}{|\\nabla \\epsilon_n(\\textbf{k})|}$ this can be written $g_n(\\epsilon) = \\int_{S_n(\\epsilon)} \\frac{dS}{4\\pi^3}\\frac{1}{|\\nabla \\epsilon_n(\\textbf{k})|}$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 166, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 845, DateTimeKind.Utc).AddTicks(6872), 2.5f, 2, "What is a Fermi surface branch?", new TimeSpan(0, 0, 10, 0, 0), 2, "The portion of the Fermi surface made constituted by a particular, single band." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 165, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 845, DateTimeKind.Utc).AddTicks(6463), 2.5f, 2, "What is a striking conclusion of the Bloch band velocity by comparison to Drude theory?", new TimeSpan(0, 0, 10, 0, 0), 2, "We assumed that electrons struck other electrons or ions with a periodicity $\\tau$. In fact, in a perfect crystal they can move through the lattice without any collisions." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 164, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 845, DateTimeKind.Utc).AddTicks(6091), 2.5f, 2, "What is the velocity of the Bloch state with band index $n$ and crystal wavevector $k$?", new TimeSpan(0, 0, 10, 0, 0), 2, "$\\textbf{v}_n(\\textbf{k}) = \\frac{1}{\\hbar}\\nabla_{\\textbf{k}}\\epsilon_n(\\textbf{k})$ which tells us that the derivative of the band gives the electron velocity. This is why we call bands piercing the Fermi surface left or right movers depending on the sign of their derivative in 1D." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 163, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 845, DateTimeKind.Utc).AddTicks(5695), 2.5f, 2, "Mathematically, how can we see that the crystal momentum for a Bloch wave is not the electron momentum?", new TimeSpan(0, 0, 10, 0, 0), 2, "Just apply $\\frac{\\hbar}{i}\\nabla$ which represents the momentum operator. $\\frac{\\hbar}{i}\\nabla \\psi_{n\\textbf{k}} = \\frac{\\hbar}{i}\\nabla(e^{i\\textbf{k}\\cdot\\textbf{r}} u_{n\\textbf{k}}(\\textbf{r}))$ By the chain rule we pick up also the $r$ dependence in the basis wave $u_{n\\textbf{k}}$ $\\hbar\\textbf{k}\\psi_{n\\textbf{k}} + e^{i\\textbf{k}\\cdot\\textbf{r}}\\frac{\\hbar}{i}\\nabla u_{n\\textbf{k}}(\\textbf{r})$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 162, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 845, DateTimeKind.Utc).AddTicks(5269), 2.5f, 2, "What is Schrodinger's equation for a periodic potential in momentum?", new TimeSpan(0, 0, 10, 0, 0), 2, "$(\\frac{\\hbar^2 q^2}{2m} - \\epsilon)c_q + \\sum_{K'}U_{K'}c_{q-K'} = 0$ which shows that the problem decouples over the different crystal momenta in the first Brillouin zone. With a change of variables we can make it clear that there is a momentum $\\textbf{k}$ in in the first Brillouin zone by substituting $q = k - K$ and $K' \\rightarrow K' - K$ above." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 161, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 845, DateTimeKind.Utc).AddTicks(4852), 2.5f, 2, "How are crystalline symmetries reflected in the Fourier transform of the potential?", new TimeSpan(0, 0, 10, 0, 0), 2, "You can explicitly calculate these from the Fourier transform. Note for instance that if there is inversion symmetry $U_{-\\textbf{k}} = U_{\\textbf{k}} = U_\\textbf{k}^*$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 160, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 845, DateTimeKind.Utc).AddTicks(4471), 2.5f, 2, "Explain how to get the eigenvalues of the translation operators in the proof of Bloch's theorem.", new TimeSpan(0, 0, 10, 0, 0), 2, "For a primitive lattice vector $a_i$ we can write $c(a_i) = e^{2\\pi i x_i}$ because the state is translationally invariant. Additionally though $T_R T_{R'} = T_{R+R'}$ which generates the full behavior as $c(\\textbf{R}) = e^{i\\textbf{k}\\cdot\\textbf{R}}$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 159, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 845, DateTimeKind.Utc).AddTicks(4104), 2.5f, 2, "What is the statement of Bloch's theorem?", new TimeSpan(0, 0, 10, 0, 0), 2, "The eigenstates $\\psi$ of a single particle Hamiltonian with a periodic potential $U$ satisfy the property that they can be written as $\\psi_{n\\textbf{k}}(\\textbf{r}) = e^{i\\textbf{k}\\cdot\\textbf{r}}u_{n\\textbf{k}}(\\textbf{r})$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 158, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 845, DateTimeKind.Utc).AddTicks(3734), 2.5f, 2, "What is the core idea behind Bloch's theorem?", new TimeSpan(0, 0, 10, 0, 0), 2, "It's a manifestation of a very useful idea: A collection of diagonalizable are simultaneously diagonalizable if and only if they all commute. In this case, we can consider the two operators $T_{\\textbf{a}}, H$ which possess some simultaneous eigenbasis, this eigenbasis is exactly the Bloch wavefunctions." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 157, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 845, DateTimeKind.Utc).AddTicks(3342), 2.5f, 2, "Schrodinger equation", new TimeSpan(0, 0, 10, 0, 0), 2, "$H\\psi = \\left(-\\frac{\\hbar^2}{2m}\\nabla^2 + U(\\textbf{r})\\right)\\psi = \\epsilon \\psi$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 156, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 845, DateTimeKind.Utc).AddTicks(3006), 2.5f, 2, "What are some realistic considerations that break perfect crystalline symmetry?", new TimeSpan(0, 0, 10, 0, 0), 2, "Impurities break symmetry. Additionally, there is a temperature dependent porbability of lattice defects/ionic misplacements. Finally, there are thermal fluctuations of the atomic positions due to the acoustic phonon branches." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 155, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 845, DateTimeKind.Utc).AddTicks(2645), 2.5f, 2, "Why is it necessary to use quantum mechanics to treat the electron motion?", new TimeSpan(0, 0, 10, 0, 0), 2, "The corrugations of the potential (the interatomic spacing) is comparable to the de Broglie wavelength of the electron. If the de Broglie wavelength were much shorter we could get away with avoiding a quantum mechanical description." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 154, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 845, DateTimeKind.Utc).AddTicks(2287), 2.5f, 2, "What is the functional form for a thermally activated gap's resistance?", new TimeSpan(0, 0, 10, 0, 0), 2, "$R \\propto \\text{exp}\\left(-\\Delta/(2k_B T)\\right)$ You might find it useful to use that 1 meV is 11.6K in estimating quantities." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 182, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 846, DateTimeKind.Utc).AddTicks(7920), 2.5f, 2, "How do you concatenate data in pandas? What is the signature?", new TimeSpan(0, 0, 10, 0, 0), 2, "\"The signature for pd.concat is 1 2 3pd.concat(objs, axis=0, join=\"\"outer\"\", ignore_index=False, keys=None, levels=None, names=None, verify_integrity=False, sort=False, copy=True) This concatenates a number of objects along a particular axis. The important things to know are that the join kwarg controls how to handle the presence of additional columns. Outer joins will include populate with null values when some of the objects are missing columns, inner joins drop all but common columns. The ignore_index kwarg allows dropping and rebuilding an index when set to ignore.\"" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 487, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(8314), 2.5f, 2, "In {{c1::density estimation or PMF estimation}}, a system {{c2::models/learns the PDF/PMF responsible for the observed data}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 488, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(8981), 2.5f, 2, "Four different performance measures that we might use to assess how well our model is performing might be: 1. {{c1::the accuracy, i.e. the proportion of samples for which the correct output is produced}} 2. {{c2::receiver operating characteristic or precision-recall curves}} 3. {{c3::a loss function, especially for regression-like problems}} 4. {{c4::comparison to human performance}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 489, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(9050), 2.5f, 2, "Four different performance measures that we might use to assess how well our model is performing might be: 1. {{c1::the accuracy, i.e. the proportion of samples for which the correct output is produced}} 2. {{c2::receiver operating characteristic or precision-recall curves}} 3. {{c3::a loss function, especially for regression-like problems}} 4. {{c4::comparison to human performance}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 821, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(4355), 2.5f, 2, "Symbol-to-number differentiation is used by {{c1::Torch and Caffe}} whereas symbol-to-symbol differentiation is used in {{c2::Theano and TensorFlow}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 820, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(3742), 2.5f, 2, "{{c1::Symbol-to-number}} diffentiation differs from {{c1::Symbol-to-symbol}} differentiation because the latter {{c2::takes the approach of formally building the computational graph that carries out each derivative and therefore can be used to calculate higher derivatives as well}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 819, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(3539), 2.5f, 2, "{{c1::Symbol-to-number}} diffentiation differs from {{c1::Symbol-to-symbol}} differentiation because the latter {{c2::takes the approach of formally building the computational graph that carries out each derivative and therefore can be used to calculate higher derivatives as well}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 818, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(3512), 2.5f, 2, "{{c1::Symbol-to-number}} diffentiation differs from {{c1::Symbol-to-symbol}} differentiation because the latter {{c2::takes the approach of formally building the computational graph that carries out each derivative and therefore can be used to calculate higher derivatives as well}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 817, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(3031), 2.5f, 2, "Written tensorially, the chain rule for calculus is {{c1::$\\nabla_{\\mathbf{X} } z=\\sum_{j}\\left(\\nabla_{\\mathbf{X} } Y_{j}\\right) \\frac{\\partial z}{\\partial Y_{j} }$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 816, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(2305), 2.5f, 2, "The {{c1::vector chain rule of calculus}} states {{c2::$\\frac{\\partial z}{\\partial x_{i} }=\\sum_{j} \\frac{\\partial z}{\\partial y_{j} } \\frac{\\partial y_{j} }{\\partial x_{i} }$}} or equivalently in vector notation {{c2::$\\nabla_{\\boldsymbol{x} } z=\\left(\\frac{\\partial \\boldsymbol{y} }{\\partial \\boldsymbol{x} }\\right)^{\\top} \\nabla_{\\boldsymbol{y} } z$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 815, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(2168), 2.5f, 2, "The {{c1::vector chain rule of calculus}} states {{c2::$\\frac{\\partial z}{\\partial x_{i} }=\\sum_{j} \\frac{\\partial z}{\\partial y_{j} } \\frac{\\partial y_{j} }{\\partial x_{i} }$}} or equivalently in vector notation {{c2::$\\nabla_{\\boldsymbol{x} } z=\\left(\\frac{\\partial \\boldsymbol{y} }{\\partial \\boldsymbol{x} }\\right)^{\\top} \\nabla_{\\boldsymbol{y} } z$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 814, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(2037), 2.5f, 2, "The {{c1::vector chain rule of calculus}} states {{c2::$\\frac{\\partial z}{\\partial x_{i} }=\\sum_{j} \\frac{\\partial z}{\\partial y_{j} } \\frac{\\partial y_{j} }{\\partial x_{i} }$}} or equivalently in vector notation {{c2::$\\nabla_{\\boldsymbol{x} } z=\\left(\\frac{\\partial \\boldsymbol{y} }{\\partial \\boldsymbol{x} }\\right)^{\\top} \\nabla_{\\boldsymbol{y} } z$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 813, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(1451), 2.5f, 2, "Backpropagation is not merely useful for optimizing the model, we can also use backprop to 1. {{c1::Find activations for which a given part or unit of the network has high affinity}} 2. {{c2::Find adversarial examples for the network}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 812, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(1401), 2.5f, 2, "Backpropagation is not merely useful for optimizing the model, we can also use backprop to 1. {{c1::Find activations for which a given part or unit of the network has high affinity}} 2. {{c2::Find adversarial examples for the network}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 811, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(782), 2.5f, 2, "We can {{c2::incentivize feature and gradient flow sometimes}} by adding {{c1::skip connections}} which {{c1::put edges between non-adjacent layers in the model}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 810, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(687), 2.5f, 2, "We can {{c2::incentivize feature and gradient flow sometimes}} by adding {{c1::skip connections}} which {{c1::put edges between non-adjacent layers in the model}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 822, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(4389), 2.5f, 2, "Symbol-to-number differentiation is used by {{c1::Torch and Caffe}} whereas symbol-to-symbol differentiation is used in {{c2::Theano and TensorFlow}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 809, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(661), 2.5f, 2, "We can {{c2::incentivize feature and gradient flow sometimes}} by adding {{c1::skip connections}} which {{c1::put edges between non-adjacent layers in the model}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 807, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(9781), 2.5f, 2, "A geometric way to think about {{c1::absolute value rectification}} is that it {{c2::creates a fold in the input feature space where values at mirror equivalent locations have equal outputs, the number of regions created by sequential folds can be exponential and this helps guide intuition for why deep networks work well}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 806, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(9263), 2.5f, 2, "Universal approximation is not actionable because we can design pathological test cases: in the case of a shallow network where we aim to predict binary functions {{c1::there are $2^{2^n}$ such functions so we may need $2^n$ nodes}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 805, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(8619), 2.5f, 2, "Despite the universal approximation theorm we can still fail to find a good model because: 1. {{c1::Our model can have inappropriate capacity, i.e. we did not actually follow the letter of the law in the theorem}} 2. {{c2::Overfitting}} 3. {{c3::No free lunch, our model might have inappropriate inductive biases}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 804, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(8547), 2.5f, 2, "Despite the universal approximation theorm we can still fail to find a good model because: 1. {{c1::Our model can have inappropriate capacity, i.e. we did not actually follow the letter of the law in the theorem}} 2. {{c2::Overfitting}} 3. {{c3::No free lunch, our model might have inappropriate inductive biases}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 803, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(8488), 2.5f, 2, "Despite the universal approximation theorm we can still fail to find a good model because: 1. {{c1::Our model can have inappropriate capacity, i.e. we did not actually follow the letter of the law in the theorem}} 2. {{c2::Overfitting}} 3. {{c3::No free lunch, our model might have inappropriate inductive biases}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 802, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(7786), 2.5f, 2, "Intuitively, we can think of {{c1::Borel measurability}} for functions as being a weak form of {{c2::continuity}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 801, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(7765), 2.5f, 2, "Intuitively, we can think of {{c1::Borel measurability}} for functions as being a weak form of {{c2::continuity}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 800, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(7259), 2.5f, 2, "A {{c1::Borel measurable function}} is a {{c2::measurable function between Borel spaces}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 799, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(7210), 2.5f, 2, "A {{c1::Borel measurable function}} is a {{c2::measurable function between Borel spaces}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 798, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(6729), 2.5f, 2, "The universal approximation theorem does not explain {{c1::why empirically deep networks work so much better than shallow ones do}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 797, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(6124), 2.5f, 2, "A {{c1::measurable function}} is a function that {{c2::preserves the measure structure on a space}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 796, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(6073), 2.5f, 2, "A {{c1::measurable function}} is a function that {{c2::preserves the measure structure on a space}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 808, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(109), 2.5f, 2, "A geometric way to think about {{c1::absolute value rectification}} is that it {{c2::creates a fold in the input feature space where values at mirror equivalent locations have equal outputs, the number of regions created by sequential folds can be exponential and this helps guide intuition for why deep networks work well}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 823, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(4990), 2.5f, 2, "If $z(w) = f(y) = f(f(x)) = f(f(f(w)))$ then the symbol-to-symbol differentiation graph looks like {{c1::}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 824, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(6080), 2.5f, 2, "At a high level, the backprop algorithm can be understood as follows. Let $\\mathbb{T},\\mathcal{G},z$ be the target set of variables whose gradients we need, the computational graph, and the variable to be differentiated respectively. Let $\\mathcal{G'}$ be $\\mathcal{G}$ pruned to contain only nodes that are ancestors of $z$ and descendants of nodes in $\\mathbb{T}$. 1. {{c1::Initialize $\\text{grad\\_table}$, a data structure associating tensors to their gradients}} 2. {{c2::$\\text{grad\\_table}[z]\\leftarrow 1$}} 3. for $\\mathsf{V}\\in\\mathbb{T}$ do 3i. {{c3::$\\text{build\\_grad}(\\mathsf{V},\\mathcal{G},\\mathcal{G'},\\text{grad\\_table})$}} 4. {{c4::return $\\text{grad\\_table}$ restricted to $\\mathbb{T}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 825, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(6127), 2.5f, 2, "At a high level, the backprop algorithm can be understood as follows. Let $\\mathbb{T},\\mathcal{G},z$ be the target set of variables whose gradients we need, the computational graph, and the variable to be differentiated respectively. Let $\\mathcal{G'}$ be $\\mathcal{G}$ pruned to contain only nodes that are ancestors of $z$ and descendants of nodes in $\\mathbb{T}$. 1. {{c1::Initialize $\\text{grad\\_table}$, a data structure associating tensors to their gradients}} 2. {{c2::$\\text{grad\\_table}[z]\\leftarrow 1$}} 3. for $\\mathsf{V}\\in\\mathbb{T}$ do 3i. {{c3::$\\text{build\\_grad}(\\mathsf{V},\\mathcal{G},\\mathcal{G'},\\text{grad\\_table})$}} 4. {{c4::return $\\text{grad\\_table}$ restricted to $\\mathbb{T}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 852, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(4028), 2.5f, 2, "A {{c1::parameter norm penalty}} refers to a regularization term of the form {{c2::$\\alpha \\Omega(\\boldsymbol{\\theta}$ which penalizes large weights}} We typically do not {{c2::place any penalty on bias terms}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 851, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(3988), 2.5f, 2, "A {{c1::parameter norm penalty}} refers to a regularization term of the form {{c2::$\\alpha \\Omega(\\boldsymbol{\\theta}$ which penalizes large weights}} We typically do not {{c2::place any penalty on bias terms}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 850, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(3912), 2.5f, 2, "A {{c1::parameter norm penalty}} refers to a regularization term of the form {{c2::$\\alpha \\Omega(\\boldsymbol{\\theta}$ which penalizes large weights}} We typically do not {{c2::place any penalty on bias terms}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 849, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(3109), 2.5f, 2, "Ensemble methods can be considered a form of {{c1::regularization}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 848, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(2618), 2.5f, 2, "In deep learning, the use of regularization lets us make a tradeoff between {{c1::increased bias}} and {{c1::reduced variance}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 847, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(2592), 2.5f, 2, "In deep learning, the use of regularization lets us make a tradeoff between {{c1::increased bias}} and {{c1::reduced variance}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 846, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(2103), 2.5f, 2, "Using ReLU for deep networks was first proposed by {{c1::Jarrett et al. (2009)}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 845, 4, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(1605), 2.5f, 2, "The major contributions to the rise of deep learning (leaving aside serendipity) were 1. {{c1::Faster CPUs and especially GPUs which made it feasible to train larger networks}} 2. {{c2::Larger and more complicated datasets where these methods have the room to more seriously outperform other methods}} Additionally though there were minor algorithmic and statistical factors like: 1. {{c3::A more principled statistical approach to loss functions and the use of cross-entropy losses}} 2. {{c4::The use of piecewise linear activation functions}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 844, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(1550), 2.5f, 2, "The major contributions to the rise of deep learning (leaving aside serendipity) were 1. {{c1::Faster CPUs and especially GPUs which made it feasible to train larger networks}} 2. {{c2::Larger and more complicated datasets where these methods have the room to more seriously outperform other methods}} Additionally though there were minor algorithmic and statistical factors like: 1. {{c3::A more principled statistical approach to loss functions and the use of cross-entropy losses}} 2. {{c4::The use of piecewise linear activation functions}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 843, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(1452), 2.5f, 2, "The major contributions to the rise of deep learning (leaving aside serendipity) were 1. {{c1::Faster CPUs and especially GPUs which made it feasible to train larger networks}} 2. {{c2::Larger and more complicated datasets where these methods have the room to more seriously outperform other methods}} Additionally though there were minor algorithmic and statistical factors like: 1. {{c3::A more principled statistical approach to loss functions and the use of cross-entropy losses}} 2. {{c4::The use of piecewise linear activation functions}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 842, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(1331), 2.5f, 2, "The major contributions to the rise of deep learning (leaving aside serendipity) were 1. {{c1::Faster CPUs and especially GPUs which made it feasible to train larger networks}} 2. {{c2::Larger and more complicated datasets where these methods have the room to more seriously outperform other methods}} Additionally though there were minor algorithmic and statistical factors like: 1. {{c3::A more principled statistical approach to loss functions and the use of cross-entropy losses}} 2. {{c4::The use of piecewise linear activation functions}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 841, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(555), 2.5f, 2, "{{c1::Krylov methods}} provide {{c2::iterative approches for approximating one or a few of the eigenvectors of a large sparse matrix}} and therefore can be advantageous to use with {{c3::scenarios where access to the Hessian is desirable but storage of the full Hessian is impractical}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 840, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(451), 2.5f, 2, "{{c1::Krylov methods}} provide {{c2::iterative approches for approximating one or a few of the eigenvectors of a large sparse matrix}} and therefore can be advantageous to use with {{c3::scenarios where access to the Hessian is desirable but storage of the full Hessian is impractical}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 839, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(312), 2.5f, 2, "{{c1::Krylov methods}} provide {{c2::iterative approches for approximating one or a few of the eigenvectors of a large sparse matrix}} and therefore can be advantageous to use with {{c3::scenarios where access to the Hessian is desirable but storage of the full Hessian is impractical}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 838, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(9820), 2.5f, 2, "You can think of the performance difference between reverse and forward mode accumulation as being driven in part by {{c1::the cost of finding the least expensive associative order to peform a sequence of matrix multiplications in}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 837, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(8995), 2.5f, 2, "Although backprop tells us a way to relatively efficiently take derivatives on a graph, it does not {{c1::find the optimal order of operations to take in order to do this}}. It is an example of one class of algorithms called {{c2::reverse mode accumulation algorithms}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 836, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(8948), 2.5f, 2, "Although backprop tells us a way to relatively efficiently take derivatives on a graph, it does not {{c1::find the optimal order of operations to take in order to do this}}. It is an example of one class of algorithms called {{c2::reverse mode accumulation algorithms}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 835, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(8328), 2.5f, 2, "Backprop can be viewed as the process of applying {{c1::dynamic programming}} to the problem of {{c2::calculating the gradient of a function which composes as a sequence of computations on a graph}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 834, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(8225), 2.5f, 2, "Backprop can be viewed as the process of applying {{c1::dynamic programming}} to the problem of {{c2::calculating the gradient of a function which composes as a sequence of computations on a graph}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 833, 6, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(7676), 2.5f, 2, "When we gave a high level description of the backprop algorithm, we did not specify how to calculate a gradient at each node: $\\text{build\\_grad}(\\mathsf{V},\\mathcal{G},\\mathcal{G'},\\text{gradtable})$. This is how that works. Let $\\mathsf{V},\\mathcal{G},\\mathcal{G'},\\text{gradtable}$ be the variable whose gradient should be added to the graph and gradient table, G the graph to modify, G' the restriction of G to nodes that participate in the gradient, and the gradient table respectively 1. {{c1::If the result was already cached in the gradient table, return it}} 2. for i enumerating {{c2::$\\mathsf{C}\\in\\text{getconsumers}(\\mathsf{V},\\mathcal{G'})$}} do {{c3::$\\text{op}\\leftarrow\\text{get\\_operation}(\\mathsf{C})$}}{{c4::$\\mathsf{D}\\leftarrow\\text{buildgrad}(\\mathsf{C},\\mathcal{G},\\mathcal{G'},\\text{gradtable})$}}{{c5::$\\mathsf{G}^{(i)}\\leftarrow \\text{op.bprop}(\\text{get\\_inputs}(\\mathsf{C},\\mathcal{G'}),\\mathsf{V},\\mathsf{D})$}} 3. {{c6::$\\text{gradtable}[\\mathsf{V}]\\leftarrow \\sum_i\\mathsf{G}^{(i)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 832, 5, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(7575), 2.5f, 2, "When we gave a high level description of the backprop algorithm, we did not specify how to calculate a gradient at each node: $\\text{build\\_grad}(\\mathsf{V},\\mathcal{G},\\mathcal{G'},\\text{gradtable})$. This is how that works. Let $\\mathsf{V},\\mathcal{G},\\mathcal{G'},\\text{gradtable}$ be the variable whose gradient should be added to the graph and gradient table, G the graph to modify, G' the restriction of G to nodes that participate in the gradient, and the gradient table respectively 1. {{c1::If the result was already cached in the gradient table, return it}} 2. for i enumerating {{c2::$\\mathsf{C}\\in\\text{getconsumers}(\\mathsf{V},\\mathcal{G'})$}} do {{c3::$\\text{op}\\leftarrow\\text{get\\_operation}(\\mathsf{C})$}}{{c4::$\\mathsf{D}\\leftarrow\\text{buildgrad}(\\mathsf{C},\\mathcal{G},\\mathcal{G'},\\text{gradtable})$}}{{c5::$\\mathsf{G}^{(i)}\\leftarrow \\text{op.bprop}(\\text{get\\_inputs}(\\mathsf{C},\\mathcal{G'}),\\mathsf{V},\\mathsf{D})$}} 3. {{c6::$\\text{gradtable}[\\mathsf{V}]\\leftarrow \\sum_i\\mathsf{G}^{(i)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 831, 4, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(7458), 2.5f, 2, "When we gave a high level description of the backprop algorithm, we did not specify how to calculate a gradient at each node: $\\text{build\\_grad}(\\mathsf{V},\\mathcal{G},\\mathcal{G'},\\text{gradtable})$. This is how that works. Let $\\mathsf{V},\\mathcal{G},\\mathcal{G'},\\text{gradtable}$ be the variable whose gradient should be added to the graph and gradient table, G the graph to modify, G' the restriction of G to nodes that participate in the gradient, and the gradient table respectively 1. {{c1::If the result was already cached in the gradient table, return it}} 2. for i enumerating {{c2::$\\mathsf{C}\\in\\text{getconsumers}(\\mathsf{V},\\mathcal{G'})$}} do {{c3::$\\text{op}\\leftarrow\\text{get\\_operation}(\\mathsf{C})$}}{{c4::$\\mathsf{D}\\leftarrow\\text{buildgrad}(\\mathsf{C},\\mathcal{G},\\mathcal{G'},\\text{gradtable})$}}{{c5::$\\mathsf{G}^{(i)}\\leftarrow \\text{op.bprop}(\\text{get\\_inputs}(\\mathsf{C},\\mathcal{G'}),\\mathsf{V},\\mathsf{D})$}} 3. {{c6::$\\text{gradtable}[\\mathsf{V}]\\leftarrow \\sum_i\\mathsf{G}^{(i)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 830, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(7360), 2.5f, 2, "When we gave a high level description of the backprop algorithm, we did not specify how to calculate a gradient at each node: $\\text{build\\_grad}(\\mathsf{V},\\mathcal{G},\\mathcal{G'},\\text{gradtable})$. This is how that works. Let $\\mathsf{V},\\mathcal{G},\\mathcal{G'},\\text{gradtable}$ be the variable whose gradient should be added to the graph and gradient table, G the graph to modify, G' the restriction of G to nodes that participate in the gradient, and the gradient table respectively 1. {{c1::If the result was already cached in the gradient table, return it}} 2. for i enumerating {{c2::$\\mathsf{C}\\in\\text{getconsumers}(\\mathsf{V},\\mathcal{G'})$}} do {{c3::$\\text{op}\\leftarrow\\text{get\\_operation}(\\mathsf{C})$}}{{c4::$\\mathsf{D}\\leftarrow\\text{buildgrad}(\\mathsf{C},\\mathcal{G},\\mathcal{G'},\\text{gradtable})$}}{{c5::$\\mathsf{G}^{(i)}\\leftarrow \\text{op.bprop}(\\text{get\\_inputs}(\\mathsf{C},\\mathcal{G'}),\\mathsf{V},\\mathsf{D})$}} 3. {{c6::$\\text{gradtable}[\\mathsf{V}]\\leftarrow \\sum_i\\mathsf{G}^{(i)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 829, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(7299), 2.5f, 2, "When we gave a high level description of the backprop algorithm, we did not specify how to calculate a gradient at each node: $\\text{build\\_grad}(\\mathsf{V},\\mathcal{G},\\mathcal{G'},\\text{gradtable})$. This is how that works. Let $\\mathsf{V},\\mathcal{G},\\mathcal{G'},\\text{gradtable}$ be the variable whose gradient should be added to the graph and gradient table, G the graph to modify, G' the restriction of G to nodes that participate in the gradient, and the gradient table respectively 1. {{c1::If the result was already cached in the gradient table, return it}} 2. for i enumerating {{c2::$\\mathsf{C}\\in\\text{getconsumers}(\\mathsf{V},\\mathcal{G'})$}} do {{c3::$\\text{op}\\leftarrow\\text{get\\_operation}(\\mathsf{C})$}}{{c4::$\\mathsf{D}\\leftarrow\\text{buildgrad}(\\mathsf{C},\\mathcal{G},\\mathcal{G'},\\text{gradtable})$}}{{c5::$\\mathsf{G}^{(i)}\\leftarrow \\text{op.bprop}(\\text{get\\_inputs}(\\mathsf{C},\\mathcal{G'}),\\mathsf{V},\\mathsf{D})$}} 3. {{c6::$\\text{gradtable}[\\mathsf{V}]\\leftarrow \\sum_i\\mathsf{G}^{(i)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 828, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(7230), 2.5f, 2, "When we gave a high level description of the backprop algorithm, we did not specify how to calculate a gradient at each node: $\\text{build\\_grad}(\\mathsf{V},\\mathcal{G},\\mathcal{G'},\\text{gradtable})$. This is how that works. Let $\\mathsf{V},\\mathcal{G},\\mathcal{G'},\\text{gradtable}$ be the variable whose gradient should be added to the graph and gradient table, G the graph to modify, G' the restriction of G to nodes that participate in the gradient, and the gradient table respectively 1. {{c1::If the result was already cached in the gradient table, return it}} 2. for i enumerating {{c2::$\\mathsf{C}\\in\\text{getconsumers}(\\mathsf{V},\\mathcal{G'})$}} do {{c3::$\\text{op}\\leftarrow\\text{get\\_operation}(\\mathsf{C})$}}{{c4::$\\mathsf{D}\\leftarrow\\text{buildgrad}(\\mathsf{C},\\mathcal{G},\\mathcal{G'},\\text{gradtable})$}}{{c5::$\\mathsf{G}^{(i)}\\leftarrow \\text{op.bprop}(\\text{get\\_inputs}(\\mathsf{C},\\mathcal{G'}),\\mathsf{V},\\mathsf{D})$}} 3. {{c6::$\\text{gradtable}[\\mathsf{V}]\\leftarrow \\sum_i\\mathsf{G}^{(i)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 827, 4, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(6269), 2.5f, 2, "At a high level, the backprop algorithm can be understood as follows. Let $\\mathbb{T},\\mathcal{G},z$ be the target set of variables whose gradients we need, the computational graph, and the variable to be differentiated respectively. Let $\\mathcal{G'}$ be $\\mathcal{G}$ pruned to contain only nodes that are ancestors of $z$ and descendants of nodes in $\\mathbb{T}$. 1. {{c1::Initialize $\\text{grad\\_table}$, a data structure associating tensors to their gradients}} 2. {{c2::$\\text{grad\\_table}[z]\\leftarrow 1$}} 3. for $\\mathsf{V}\\in\\mathbb{T}$ do 3i. {{c3::$\\text{build\\_grad}(\\mathsf{V},\\mathcal{G},\\mathcal{G'},\\text{grad\\_table})$}} 4. {{c4::return $\\text{grad\\_table}$ restricted to $\\mathbb{T}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 826, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 866, DateTimeKind.Utc).AddTicks(6209), 2.5f, 2, "At a high level, the backprop algorithm can be understood as follows. Let $\\mathbb{T},\\mathcal{G},z$ be the target set of variables whose gradients we need, the computational graph, and the variable to be differentiated respectively. Let $\\mathcal{G'}$ be $\\mathcal{G}$ pruned to contain only nodes that are ancestors of $z$ and descendants of nodes in $\\mathbb{T}$. 1. {{c1::Initialize $\\text{grad\\_table}$, a data structure associating tensors to their gradients}} 2. {{c2::$\\text{grad\\_table}[z]\\leftarrow 1$}} 3. for $\\mathsf{V}\\in\\mathbb{T}$ do 3i. {{c3::$\\text{build\\_grad}(\\mathsf{V},\\mathcal{G},\\mathcal{G'},\\text{grad\\_table})$}} 4. {{c4::return $\\text{grad\\_table}$ restricted to $\\mathbb{T}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 795, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(5554), 2.5f, 2, "\"The {{c1::universal approximation theorem}} by {{c1::Hornik et al. 1989 and Cybenko 1989}} states that {{c2::an FNN with linear output and at least one hidden layer with any \"\"squashing\"\" activation function can approximate any Borel measurable function from a finite dimensional space to aother with any desired level of accuracy}}.\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 853, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(4494), 2.5f, 2, "We do not place parameter norm penalties on {{c1::biases}} because {{c1::empirically this causes too much underfitting}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 794, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(5333), 2.5f, 2, "\"The {{c1::universal approximation theorem}} by {{c1::Hornik et al. 1989 and Cybenko 1989}} states that {{c2::an FNN with linear output and at least one hidden layer with any \"\"squashing\"\" activation function can approximate any Borel measurable function from a finite dimensional space to aother with any desired level of accuracy}}.\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 792, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(4689), 2.5f, 2, "A more unconventional type of activation function is the {{c1::maxout unit}} which {{c2::splits the input vector into groups of k values and takes the max over each group}}. An intuition here is that you can consider {{c3::each max as summarizing a group of k features}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 760, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 864, DateTimeKind.Utc).AddTicks(5418), 2.5f, 2, "The {{c1::softmax}} allows modeling a {{c2::multioulli distribution}} in the output of a FNN.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 759, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 864, DateTimeKind.Utc).AddTicks(5385), 2.5f, 2, "The {{c1::softmax}} allows modeling a {{c2::multioulli distribution}} in the output of a FNN.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 758, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 864, DateTimeKind.Utc).AddTicks(4916), 2.5f, 2, "[All/not all] {{c1::Not all}} saturations of the output of a neural network pose an optimization problem because {{c1::if the output is correctly classified it is not as bad if the gradient saturates}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 757, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 864, DateTimeKind.Utc).AddTicks(4825), 2.5f, 2, "[All/not all] {{c1::Not all}} saturations of the output of a neural network pose an optimization problem because {{c1::if the output is correctly classified it is not as bad if the gradient saturates}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 756, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 864, DateTimeKind.Utc).AddTicks(4333), 2.5f, 2, "For a model that needs to make a binary prediction it is reasonble to use {{c1::a logistic sigmoid activation: $\\hat{y}=\\sigma\\left(\\boldsymbol{w}^{\\top} \\boldsymbol{h}+b\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 755, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 864, DateTimeKind.Utc).AddTicks(3650), 2.5f, 2, "By optimizing the {{c1::$L^1$ distance}} instead of the {{c1::$L^2$ distance}} we are choosing to take the {{c2::posterior mean}} instead of the {{c2::posterior mode}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 754, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 864, DateTimeKind.Utc).AddTicks(3627), 2.5f, 2, "By optimizing the {{c1::$L^1$ distance}} instead of the {{c1::$L^2$ distance}} we are choosing to take the {{c2::posterior mean}} instead of the {{c2::posterior mode}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 753, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 864, DateTimeKind.Utc).AddTicks(3574), 2.5f, 2, "By optimizing the {{c1::$L^1$ distance}} instead of the {{c1::$L^2$ distance}} we are choosing to take the {{c2::posterior mean}} instead of the {{c2::posterior mode}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 752, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 864, DateTimeKind.Utc).AddTicks(3549), 2.5f, 2, "By optimizing the {{c1::$L^1$ distance}} instead of the {{c1::$L^2$ distance}} we are choosing to take the {{c2::posterior mean}} instead of the {{c2::posterior mode}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 751, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 864, DateTimeKind.Utc).AddTicks(3033), 2.5f, 2, "By optimizing the NLL instead of the likelihood for FNNs we {{c1::avoid one cause of the vanishing gradient problem cauesd by saturation in network outputs through, for instance, a softmax}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 750, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 864, DateTimeKind.Utc).AddTicks(2340), 2.5f, 2, "The {{c1::vanishing gradient problem}} for feedforward neural networks refers to over the course of {{c2::several layers the gradient scale can decrease. This is exacerbated by the saturation in the activation function.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 749, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 864, DateTimeKind.Utc).AddTicks(2220), 2.5f, 2, "The {{c1::vanishing gradient problem}} for feedforward neural networks refers to over the course of {{c2::several layers the gradient scale can decrease. This is exacerbated by the saturation in the activation function.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 761, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 864, DateTimeKind.Utc).AddTicks(6119), 2.5f, 2, "Softmax is defined through {{c1::$\\operatorname{softmax}(\\boldsymbol{z})_{i}=\\frac{\\exp \\left(z_{i}\\right)}{\\sum_{j} \\exp \\left(z_{j}\\right)}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 748, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 864, DateTimeKind.Utc).AddTicks(1688), 2.5f, 2, "Typically in the initialization of a deep neural network we choose to set the weights to {{c1::small random values that set an appropriate magnitude for the activation and gradient flows}} and the biases to {{c2::zero or a small positive number for ReLU}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 746, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 864, DateTimeKind.Utc).AddTicks(995), 2.5f, 2, "When it comes to optimizing deep neural networks, the dynamics of the optimization are very sensitive to: 1. [model parameters] {{c1::The initial values and their magnitude}} 2. [hyperparameters] {{c1::The hyperparameters of the model and optimizer such as the number of layers and the network structure, the learning rate, momentum used, etc.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 745, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 864, DateTimeKind.Utc).AddTicks(848), 2.5f, 2, "When it comes to optimizing deep neural networks, the dynamics of the optimization are very sensitive to: 1. [model parameters] {{c1::The initial values and their magnitude}} 2. [hyperparameters] {{c1::The hyperparameters of the model and optimizer such as the number of layers and the network structure, the learning rate, momentum used, etc.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 744, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 864, DateTimeKind.Utc).AddTicks(116), 2.5f, 2, "In practice, neural networks do not achieve {{c1::globally optimal}} parameters due to {{c1::the non-convexity of their cost functions}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 743, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 864, DateTimeKind.Utc).AddTicks(65), 2.5f, 2, "In practice, neural networks do not achieve {{c1::globally optimal}} parameters due to {{c1::the non-convexity of their cost functions}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 742, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(9592), 2.5f, 2, "The modern default choice for the activation function is the {{c1::rectified linear unit, or ReLU}} which is defined as {{c2::$g(z)=\\max(0,z)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 741, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(9566), 2.5f, 2, "The modern default choice for the activation function is the {{c1::rectified linear unit, or ReLU}} which is defined as {{c2::$g(z)=\\max(0,z)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 740, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(9044), 2.5f, 2, "To the extent that dependencies in the computational graph of a neural network factor into groups, we define {{c1::layers}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 739, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(8582), 2.5f, 2, "When we believe the data manifold is very low dimensional it makes sense to {{c1::represent the data on the manifold coordinates rather than the input coordinates}}. This connects directly to {{c1::representation learning, where the representation is projection onto the manifold}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 738, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(8490), 2.5f, 2, "When we believe the data manifold is very low dimensional it makes sense to {{c1::represent the data on the manifold coordinates rather than the input coordinates}}. This connects directly to {{c1::representation learning, where the representation is projection onto the manifold}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 737, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(7703), 2.5f, 2, "We can visualize the neighborhoods of the {{c1::data manifold}} by considering that samples remain realistic if we (in the case of images): 1. Add {{c1::a bit of noise}} 2. {{c1::zoom, rescale, or crop the image}} 3. {{c1::remove objects and infill the background (typically)}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 736, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(7645), 2.5f, 2, "We can visualize the neighborhoods of the {{c1::data manifold}} by considering that samples remain realistic if we (in the case of images): 1. Add {{c1::a bit of noise}} 2. {{c1::zoom, rescale, or crop the image}} 3. {{c1::remove objects and infill the background (typically)}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 735, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(7605), 2.5f, 2, "We can visualize the neighborhoods of the {{c1::data manifold}} by considering that samples remain realistic if we (in the case of images): 1. Add {{c1::a bit of noise}} 2. {{c1::zoom, rescale, or crop the image}} 3. {{c1::remove objects and infill the background (typically)}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 747, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 864, DateTimeKind.Utc).AddTicks(1638), 2.5f, 2, "Typically in the initialization of a deep neural network we choose to set the weights to {{c1::small random values that set an appropriate magnitude for the activation and gradient flows}} and the biases to {{c2::zero or a small positive number for ReLU}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 762, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 864, DateTimeKind.Utc).AddTicks(6646), 2.5f, 2, "We {{c1::do not have saturation problems}} with optimizing the NLL on a softmax because {{c2::the numerator contributes a term that gives unit gradient}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 763, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 864, DateTimeKind.Utc).AddTicks(6713), 2.5f, 2, "We {{c1::do not have saturation problems}} with optimizing the NLL on a softmax because {{c2::the numerator contributes a term that gives unit gradient}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 764, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 864, DateTimeKind.Utc).AddTicks(7400), 2.5f, 2, "We can numerically stabilize the softmax by realizing {{c1::$\\operatorname{softmax}(\\boldsymbol{z})=\\operatorname{softmax}\\left(\\boldsymbol{z}-\\max _{i} z_{i}\\right)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 791, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(4636), 2.5f, 2, "A more unconventional type of activation function is the {{c1::maxout unit}} which {{c2::splits the input vector into groups of k values and takes the max over each group}}. An intuition here is that you can consider {{c3::each max as summarizing a group of k features}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 790, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(4548), 2.5f, 2, "A more unconventional type of activation function is the {{c1::maxout unit}} which {{c2::splits the input vector into groups of k values and takes the max over each group}}. An intuition here is that you can consider {{c3::each max as summarizing a group of k features}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 789, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(4057), 2.5f, 2, "{{c1::Catastrophic forgetting}} refers to a phenomenon {{c2::where a neural network forgets how to accurately make inferences which it was previously able to handle}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 788, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(3948), 2.5f, 2, "{{c1::Catastrophic forgetting}} refers to a phenomenon {{c2::where a neural network forgets how to accurately make inferences which it was previously able to handle}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 787, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(3440), 2.5f, 2, "It is unpopular to use activation functions that are {{c1::sigmoidal like the hyperbolic tangent or logistic function}} because they are {{c2::more expensive to compute and are both-sides saturating}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 786, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(3376), 2.5f, 2, "It is unpopular to use activation functions that are {{c1::sigmoidal like the hyperbolic tangent or logistic function}} because they are {{c2::more expensive to compute and are both-sides saturating}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 785, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(2805), 2.5f, 2, "When we {{c1::learn the coefficient on leaky ReLU}} we call the result {{c2::parametric ReLU or PReLU}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 784, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(2769), 2.5f, 2, "When we {{c1::learn the coefficient on leaky ReLU}} we call the result {{c2::parametric ReLU or PReLU}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 783, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(2096), 2.5f, 2, "{{c1::Leaky ReLU}} attempts to solve the {{c2::dying ReLU}} problem by defining instead the activation {{c3::$\\operatorname{ReLU}(z) = \\operatorname{max}(\\alpha z,z)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 782, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(2000), 2.5f, 2, "{{c1::Leaky ReLU}} attempts to solve the {{c2::dying ReLU}} problem by defining instead the activation {{c3::$\\operatorname{ReLU}(z) = \\operatorname{max}(\\alpha z,z)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 781, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(1978), 2.5f, 2, "{{c1::Leaky ReLU}} attempts to solve the {{c2::dying ReLU}} problem by defining instead the activation {{c3::$\\operatorname{ReLU}(z) = \\operatorname{max}(\\alpha z,z)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 780, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(1466), 2.5f, 2, "{{c2::Absolute rectification}} refers to using {{c1::the absolute value function}} as a network activation function. This has uses in some {{c3::object recognition tasks}} where you want extracted features to be invariant under {{c3::some approximate $Z_2$ symmetry like a lighting transformation}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 779, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(1397), 2.5f, 2, "{{c2::Absolute rectification}} refers to using {{c1::the absolute value function}} as a network activation function. This has uses in some {{c3::object recognition tasks}} where you want extracted features to be invariant under {{c3::some approximate $Z_2$ symmetry like a lighting transformation}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 778, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(1365), 2.5f, 2, "{{c2::Absolute rectification}} refers to using {{c1::the absolute value function}} as a network activation function. This has uses in some {{c3::object recognition tasks}} where you want extracted features to be invariant under {{c3::some approximate $Z_2$ symmetry like a lighting transformation}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 777, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(1328), 2.5f, 2, "{{c2::Absolute rectification}} refers to using {{c1::the absolute value function}} as a network activation function. This has uses in some {{c3::object recognition tasks}} where you want extracted features to be invariant under {{c3::some approximate $Z_2$ symmetry like a lighting transformation}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 776, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(771), 2.5f, 2, "{{c2::Mixture density networks}} can be effective models of {{c1::generative models of speech}} and {{c1::the movements of physical objects}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 775, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(731), 2.5f, 2, "{{c2::Mixture density networks}} can be effective models of {{c1::generative models of speech}} and {{c1::the movements of physical objects}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 774, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(694), 2.5f, 2, "{{c2::Mixture density networks}} can be effective models of {{c1::generative models of speech}} and {{c1::the movements of physical objects}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 773, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(172), 2.5f, 2, "As a caveat for optimizing mixture density networks, we {{c1::update only the parameters of the network which correspond to the component that actually produced the observation}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 772, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 864, DateTimeKind.Utc).AddTicks(9494), 2.5f, 2, "A mixture density network predicts: 1. {{c1::A categorical label for the desired mixture component, $p(c=i\\mid\\textbf{x})$}} 2. {{c2::A vector of the means of the different distributions}} 3. {{c3::The covariances of the models, but this is typically chosen to be diagonal}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 771, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 864, DateTimeKind.Utc).AddTicks(9413), 2.5f, 2, "A mixture density network predicts: 1. {{c1::A categorical label for the desired mixture component, $p(c=i\\mid\\textbf{x})$}} 2. {{c2::A vector of the means of the different distributions}} 3. {{c3::The covariances of the models, but this is typically chosen to be diagonal}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 770, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 864, DateTimeKind.Utc).AddTicks(9351), 2.5f, 2, "A mixture density network predicts: 1. {{c1::A categorical label for the desired mixture component, $p(c=i\\mid\\textbf{x})$}} 2. {{c2::A vector of the means of the different distributions}} 3. {{c3::The covariances of the models, but this is typically chosen to be diagonal}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 769, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 864, DateTimeKind.Utc).AddTicks(8666), 2.5f, 2, "A neural network that makes a prediction of the parameters of multiple Gaussians is called a {{c1::mixture density network}} and can be used for modeling {{c2::probability densities which are not unimodal}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 768, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 864, DateTimeKind.Utc).AddTicks(8612), 2.5f, 2, "A neural network that makes a prediction of the parameters of multiple Gaussians is called a {{c1::mixture density network}} and can be used for modeling {{c2::probability densities which are not unimodal}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 767, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 864, DateTimeKind.Utc).AddTicks(8076), 2.5f, 2, "A model is called {{c1::heteroscedastic}} when we ask it also to provide an estimate of {{c2::a statistic of one of its own outputs, such as an estimate of the variance of the predicted distribution}}. This is often used as a means to {{c2::let a model make a prediction of its own confidence}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 766, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 864, DateTimeKind.Utc).AddTicks(8018), 2.5f, 2, "A model is called {{c1::heteroscedastic}} when we ask it also to provide an estimate of {{c2::a statistic of one of its own outputs, such as an estimate of the variance of the predicted distribution}}. This is often used as a means to {{c2::let a model make a prediction of its own confidence}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 765, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 864, DateTimeKind.Utc).AddTicks(7905), 2.5f, 2, "A model is called {{c1::heteroscedastic}} when we ask it also to provide an estimate of {{c2::a statistic of one of its own outputs, such as an estimate of the variance of the predicted distribution}}. This is often used as a means to {{c2::let a model make a prediction of its own confidence}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 793, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 865, DateTimeKind.Utc).AddTicks(5287), 2.5f, 2, "\"The {{c1::universal approximation theorem}} by {{c1::Hornik et al. 1989 and Cybenko 1989}} states that {{c2::an FNN with linear output and at least one hidden layer with any \"\"squashing\"\" activation function can approximate any Borel measurable function from a finite dimensional space to aother with any desired level of accuracy}}.\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 734, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(7580), 2.5f, 2, "We can visualize the neighborhoods of the {{c1::data manifold}} by considering that samples remain realistic if we (in the case of images): 1. Add {{c1::a bit of noise}} 2. {{c1::zoom, rescale, or crop the image}} 3. {{c1::remove objects and infill the background (typically)}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 854, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(4549), 2.5f, 2, "We do not place parameter norm penalties on {{c1::biases}} because {{c1::empirically this causes too much underfitting}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 856, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(5090), 2.5f, 2, "{{c1::Weight decay}} is also referred to as {{c2::$L^2$ parameter regularization}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 943, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(4994), 2.5f, 2, "In bagging, we resample {{c1::k times from our dataset to train different models}} and peform {{c1::model averaging}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 942, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(4406), 2.5f, 2, "We can numerically show that bagging works by considering that each model makes an error $\\epsilon_i$ with $\\mathbb{E}[\\epsilon_i^2]=v$ and $\\mathbb{E}[\\epsilon_i\\epsilon_j]=c$ then {{c1::$\\begin{aligned}\\mathbb{E}\\left[\\left(\\frac{1}{k} \\sum_{i} \\epsilon_{i}\\right)^{2}\\right] &=\\frac{1}{k^{2} } \\mathbb{E}\\left[\\sum_{i}\\left(\\epsilon_{i}^{2}+\\sum_{j \\neq i} \\epsilon_{i} \\epsilon_{j}\\right)\\right] \\\\&=\\frac{1}{k} v+\\frac{k-1}{k} c\\end{aligned}$}} From this we can see that if {{c2::errors in models are correlated then model averaging doesn't help, but if they are uncorrelated it helps a lot}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 941, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(4258), 2.5f, 2, "We can numerically show that bagging works by considering that each model makes an error $\\epsilon_i$ with $\\mathbb{E}[\\epsilon_i^2]=v$ and $\\mathbb{E}[\\epsilon_i\\epsilon_j]=c$ then {{c1::$\\begin{aligned}\\mathbb{E}\\left[\\left(\\frac{1}{k} \\sum_{i} \\epsilon_{i}\\right)^{2}\\right] &=\\frac{1}{k^{2} } \\mathbb{E}\\left[\\sum_{i}\\left(\\epsilon_{i}^{2}+\\sum_{j \\neq i} \\epsilon_{i} \\epsilon_{j}\\right)\\right] \\\\&=\\frac{1}{k} v+\\frac{k-1}{k} c\\end{aligned}$}} From this we can see that if {{c2::errors in models are correlated then model averaging doesn't help, but if they are uncorrelated it helps a lot}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 940, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(3202), 2.5f, 2, "Model averaging works well because frequently {{c1::different models make different kinds of error}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 939, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(2632), 2.5f, 2, "In bagging, models are {{c1::trained separately}} and then {{c2::allowed to vote on the correct answer at inference time}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 938, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(2531), 2.5f, 2, "In bagging, models are {{c1::trained separately}} and then {{c2::allowed to vote on the correct answer at inference time}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 937, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(1999), 2.5f, 2, "{{c1::Bagging}} or {{c1::bootstrap aggregating}} attempts to {{c2::reduce generalization error}} by {{c2::combining models}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 936, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(1975), 2.5f, 2, "{{c1::Bagging}} or {{c1::bootstrap aggregating}} attempts to {{c2::reduce generalization error}} by {{c2::combining models}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 935, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(1940), 2.5f, 2, "{{c1::Bagging}} or {{c1::bootstrap aggregating}} attempts to {{c2::reduce generalization error}} by {{c2::combining models}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 934, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(1908), 2.5f, 2, "{{c1::Bagging}} or {{c1::bootstrap aggregating}} attempts to {{c2::reduce generalization error}} by {{c2::combining models}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 933, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(1447), 2.5f, 2, "Orthogonal matching pursuit, sometimes called {{c1::OMP-$k$}} allows specifying {{c2::the number of nonzero features learned}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 932, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(1399), 2.5f, 2, "Orthogonal matching pursuit, sometimes called {{c1::OMP-$k$}} allows specifying {{c2::the number of nonzero features learned}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 944, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(5020), 2.5f, 2, "In bagging, we resample {{c1::k times from our dataset to train different models}} and peform {{c1::model averaging}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 931, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(895), 2.5f, 2, "{{c1::Orthogonal matching pursuit}} is a way of {{c2::enforcing sparsity}} that tries to solve {{c2::$\\underset{\\boldsymbol{h},\\|\\boldsymbol{h}\\|_{0}<k}{\\arg \\min }\\|\\boldsymbol{x}-\\boldsymbol{W} \\boldsymbol{h}\\|^{2}$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 929, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(707), 2.5f, 2, "{{c1::Orthogonal matching pursuit}} is a way of {{c2::enforcing sparsity}} that tries to solve {{c2::$\\underset{\\boldsymbol{h},\\|\\boldsymbol{h}\\|_{0}<k}{\\arg \\min }\\|\\boldsymbol{x}-\\boldsymbol{W} \\boldsymbol{h}\\|^{2}$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 928, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(193), 2.5f, 2, "The prototypical example of parameter sharing is in {{c1::CNNs where the exact same weights are used over every application of the kernel across an image}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 927, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 869, DateTimeKind.Utc).AddTicks(9532), 2.5f, 2, "A common regularization term for {{c1::parameter tying}} is {{c2::$\\Omega\\left(\\boldsymbol{w}^{(A)}, \\boldsymbol{w}^{(B)}\\right)=\\left\\|\\boldsymbol{w}^{(A)}-\\boldsymbol{w}^{(B)}\\right\\|_{2}^{2}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 926, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 869, DateTimeKind.Utc).AddTicks(9397), 2.5f, 2, "A common regularization term for {{c1::parameter tying}} is {{c2::$\\Omega\\left(\\boldsymbol{w}^{(A)}, \\boldsymbol{w}^{(B)}\\right)=\\left\\|\\boldsymbol{w}^{(A)}-\\boldsymbol{w}^{(B)}\\right\\|_{2}^{2}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 925, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 869, DateTimeKind.Utc).AddTicks(8886), 2.5f, 2, "If weight norm penalties incentivize weights to stay close to zero, {{c1::weight sharing}} incentivizes {{c2::keeping some set of weights close to the values of another set}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 924, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 869, DateTimeKind.Utc).AddTicks(8812), 2.5f, 2, "If weight norm penalties incentivize weights to stay close to zero, {{c1::weight sharing}} incentivizes {{c2::keeping some set of weights close to the values of another set}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 923, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 869, DateTimeKind.Utc).AddTicks(8047), 2.5f, 2, "If we view early stopping as a form of Tikhonov regularization, then early stopping has the advantage of {{c1::effectively setting the weight-decay hyperparameter to a good value automatically}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 922, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 869, DateTimeKind.Utc).AddTicks(7402), 2.5f, 2, "A picture that connects the {{c1::KKT, the Tikhonov regularization, and early stopping}} is {{c2::}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 921, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 869, DateTimeKind.Utc).AddTicks(7358), 2.5f, 2, "A picture that connects the {{c1::KKT, the Tikhonov regularization, and early stopping}} is {{c2::}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 920, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 869, DateTimeKind.Utc).AddTicks(6791), 2.5f, 2, "In some cases early stopping can be thought of as equivalent to {{c1::$L^2$}} regularization, because {{c2::it, together with the learning rate and the gradient noise scale, sets a maximum distance that the parameters can traverse in parameter space}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 919, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 869, DateTimeKind.Utc).AddTicks(6644), 2.5f, 2, "In some cases early stopping can be thought of as equivalent to {{c1::$L^2$}} regularization, because {{c2::it, together with the learning rate and the gradient noise scale, sets a maximum distance that the parameters can traverse in parameter space}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 918, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 869, DateTimeKind.Utc).AddTicks(6120), 2.5f, 2, "If we wish to make use of the validation data after early stopping we can {{c1::fine tune with the validation data as well}} however, {{c1::in this case we are flying blind because we can no way of monitoring whether we will be overfitting}}. In practice, we can {{c1::train for the same number of epochs}} or {{c1::train until the loss falls below the training loss obtained at the early stopping point}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 930, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(736), 2.5f, 2, "{{c1::Orthogonal matching pursuit}} is a way of {{c2::enforcing sparsity}} that tries to solve {{c2::$\\underset{\\boldsymbol{h},\\|\\boldsymbol{h}\\|_{0}<k}{\\arg \\min }\\|\\boldsymbol{x}-\\boldsymbol{W} \\boldsymbol{h}\\|^{2}$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 945, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(5549), 2.5f, 2, "For deep neural networks we can perform bagging {{c1::without resampling from our data}} because empirically {{c2::networks initialized with different parameters converge to different final parameters}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 946, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(5642), 2.5f, 2, "For deep neural networks we can perform bagging {{c1::without resampling from our data}} because empirically {{c2::networks initialized with different parameters converge to different final parameters}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 947, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(6171), 2.5f, 2, "In practice model averaging {{c1::works extremely well}} and is {{c1::used universally in industry applications}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 974, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 871, DateTimeKind.Utc).AddTicks(3459), 2.5f, 2, "At the level of the feature representation, dropout forces {{c1::our model to learn a robust set of features that are effective in many contexts, i.e. when other features may be missing}}. It can also force our model to {{c2::learn redudant features}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 973, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 871, DateTimeKind.Utc).AddTicks(3425), 2.5f, 2, "At the level of the feature representation, dropout forces {{c1::our model to learn a robust set of features that are effective in many contexts, i.e. when other features may be missing}}. It can also force our model to {{c2::learn redudant features}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 972, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 871, DateTimeKind.Utc).AddTicks(2678), 2.5f, 2, "We can convince ourselves that dropout is not just regularization but really should be seen as a form of model averaging because {{c1::dropout boosting exists}}. Also from a statistical standpoint, the the regularizing effects of ensembles {{c2::only occur when the model errors are uncorrelated}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 971, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 871, DateTimeKind.Utc).AddTicks(2620), 2.5f, 2, "We can convince ourselves that dropout is not just regularization but really should be seen as a form of model averaging because {{c1::dropout boosting exists}}. Also from a statistical standpoint, the the regularizing effects of ensembles {{c2::only occur when the model errors are uncorrelated}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 970, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 871, DateTimeKind.Utc).AddTicks(2107), 2.5f, 2, "In the case of linear regression, {{c1::dropout}} is formally equivalent to {{c2::using a different weight decay parameter for each input feature}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 969, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 871, DateTimeKind.Utc).AddTicks(2033), 2.5f, 2, "In the case of linear regression, {{c1::dropout}} is formally equivalent to {{c2::using a different weight decay parameter for each input feature}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 968, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 871, DateTimeKind.Utc).AddTicks(1563), 2.5f, 2, "Dropout is less effective when {{c1::there are few labeled training examples}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 967, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 871, DateTimeKind.Utc).AddTicks(1012), 2.5f, 2, "Compared to other regularization techniques, {{c1::dropout is extremely and nearly universally effective}} and can even {{c2::be combined with these other techinques}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 966, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 871, DateTimeKind.Utc).AddTicks(908), 2.5f, 2, "Compared to other regularization techniques, {{c1::dropout is extremely and nearly universally effective}} and can even {{c2::be combined with these other techinques}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 965, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 871, DateTimeKind.Utc).AddTicks(337), 2.5f, 2, "{{c1::Weight scaling inference}} refers to {{c2::normalizing the weights after training with dropout so that the full network topology is used for inference}}. In certain very restrictive contexts this method {{c2::is exact}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 964, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 871, DateTimeKind.Utc).AddTicks(320), 2.5f, 2, "{{c1::Weight scaling inference}} refers to {{c2::normalizing the weights after training with dropout so that the full network topology is used for inference}}. In certain very restrictive contexts this method {{c2::is exact}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 963, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 871, DateTimeKind.Utc).AddTicks(204), 2.5f, 2, "{{c1::Weight scaling inference}} refers to {{c2::normalizing the weights after training with dropout so that the full network topology is used for inference}}. In certain very restrictive contexts this method {{c2::is exact}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 962, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(9568), 2.5f, 2, "When making predictions with dropout we could: 1. {{c1::Make a Monte Carlo estimate of the output by sampling over masks}} 2. {{c2::Using weight scaling inference}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 961, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(9529), 2.5f, 2, "When making predictions with dropout we could: 1. {{c1::Make a Monte Carlo estimate of the output by sampling over masks}} 2. {{c2::Using weight scaling inference}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 960, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(8944), 2.5f, 2, "In dropout, we typically drop {{c1::50 to 80%}} of the weights.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 959, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(8447), 2.5f, 2, "Algorithmically, training with dropout we use {{c1::SGD with a small learning rate}} and then for each minibatch {{c2::we sample a binary mask $\\boldsymbol{\\mu}\\sim\\text{Ber}(\\theta)^{n}$}} now the optimization problem consists in minimizing {{c2::$\\mathbb{E}_{\\boldsymbol{\\mu} } J(\\boldsymbol{\\theta}, \\boldsymbol{\\mu})$}} which is handled appropximately by {{c2::sampling the mask}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 958, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(8422), 2.5f, 2, "Algorithmically, training with dropout we use {{c1::SGD with a small learning rate}} and then for each minibatch {{c2::we sample a binary mask $\\boldsymbol{\\mu}\\sim\\text{Ber}(\\theta)^{n}$}} now the optimization problem consists in minimizing {{c2::$\\mathbb{E}_{\\boldsymbol{\\mu} } J(\\boldsymbol{\\theta}, \\boldsymbol{\\mu})$}} which is handled appropximately by {{c2::sampling the mask}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 957, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(8341), 2.5f, 2, "Algorithmically, training with dropout we use {{c1::SGD with a small learning rate}} and then for each minibatch {{c2::we sample a binary mask $\\boldsymbol{\\mu}\\sim\\text{Ber}(\\theta)^{n}$}} now the optimization problem consists in minimizing {{c2::$\\mathbb{E}_{\\boldsymbol{\\mu} } J(\\boldsymbol{\\theta}, \\boldsymbol{\\mu})$}} which is handled appropximately by {{c2::sampling the mask}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 956, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(8227), 2.5f, 2, "Algorithmically, training with dropout we use {{c1::SGD with a small learning rate}} and then for each minibatch {{c2::we sample a binary mask $\\boldsymbol{\\mu}\\sim\\text{Ber}(\\theta)^{n}$}} now the optimization problem consists in minimizing {{c2::$\\mathbb{E}_{\\boldsymbol{\\mu} } J(\\boldsymbol{\\theta}, \\boldsymbol{\\mu})$}} which is handled appropximately by {{c2::sampling the mask}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 955, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(7631), 2.5f, 2, "{{c1::Dropout}} developed by {{c2::Srivastava et al. 2014}} is a general regularization technique. To first approximation, you can think of it as {{c2::making bagging practical for ensembles of a functionally infinite number of neural networks}}. Training with {{c1::dropout}} consists of {{c2::randomly removing nodes from the network on each minibatch or single sample}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 954, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(7550), 2.5f, 2, "{{c1::Dropout}} developed by {{c2::Srivastava et al. 2014}} is a general regularization technique. To first approximation, you can think of it as {{c2::making bagging practical for ensembles of a functionally infinite number of neural networks}}. Training with {{c1::dropout}} consists of {{c2::randomly removing nodes from the network on each minibatch or single sample}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 953, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(7534), 2.5f, 2, "{{c1::Dropout}} developed by {{c2::Srivastava et al. 2014}} is a general regularization technique. To first approximation, you can think of it as {{c2::making bagging practical for ensembles of a functionally infinite number of neural networks}}. Training with {{c1::dropout}} consists of {{c2::randomly removing nodes from the network on each minibatch or single sample}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 952, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(7437), 2.5f, 2, "{{c1::Dropout}} developed by {{c2::Srivastava et al. 2014}} is a general regularization technique. To first approximation, you can think of it as {{c2::making bagging practical for ensembles of a functionally infinite number of neural networks}}. Training with {{c1::dropout}} consists of {{c2::randomly removing nodes from the network on each minibatch or single sample}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 951, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(7404), 2.5f, 2, "{{c1::Dropout}} developed by {{c2::Srivastava et al. 2014}} is a general regularization technique. To first approximation, you can think of it as {{c2::making bagging practical for ensembles of a functionally infinite number of neural networks}}. Training with {{c1::dropout}} consists of {{c2::randomly removing nodes from the network on each minibatch or single sample}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 950, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(6788), 2.5f, 2, "Not all model ensembles are intended to regularize. For example, {{c1::boosting}} combines {{c2::many weak learning models in order to achieve a model with much higher capacity}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 949, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(6701), 2.5f, 2, "Not all model ensembles are intended to regularize. For example, {{c1::boosting}} combines {{c2::many weak learning models in order to achieve a model with much higher capacity}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 948, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 870, DateTimeKind.Utc).AddTicks(6221), 2.5f, 2, "In practice model averaging {{c1::works extremely well}} and is {{c1::used universally in industry applications}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 917, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 869, DateTimeKind.Utc).AddTicks(6029), 2.5f, 2, "If we wish to make use of the validation data after early stopping we can {{c1::fine tune with the validation data as well}} however, {{c1::in this case we are flying blind because we can no way of monitoring whether we will be overfitting}}. In practice, we can {{c1::train for the same number of epochs}} or {{c1::train until the loss falls below the training loss obtained at the early stopping point}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 855, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(5049), 2.5f, 2, "{{c1::Weight decay}} is also referred to as {{c2::$L^2$ parameter regularization}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 916, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 869, DateTimeKind.Utc).AddTicks(5986), 2.5f, 2, "If we wish to make use of the validation data after early stopping we can {{c1::fine tune with the validation data as well}} however, {{c1::in this case we are flying blind because we can no way of monitoring whether we will be overfitting}}. In practice, we can {{c1::train for the same number of epochs}} or {{c1::train until the loss falls below the training loss obtained at the early stopping point}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 914, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 869, DateTimeKind.Utc).AddTicks(5181), 2.5f, 2, "{{c1::Early stopping}} refers to {{c2::monitoring the validation loss during training, typically on each epoch, and stopping once the validation loss has stopped moving down}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 882, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 868, DateTimeKind.Utc).AddTicks(4086), 2.5f, 2, "{{c1::Dataset augmentation}} is an approach that allows us to use {{c2::invariants of our data in order to invent more of it}}. In computer vision, you can use this by: 1. {{c2::cropping datasets}} 2. {{c2::flipping or rotating images as appropriate}} 3. {{c2::zooming or rescaling images}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 881, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 868, DateTimeKind.Utc).AddTicks(4021), 2.5f, 2, "{{c1::Dataset augmentation}} is an approach that allows us to use {{c2::invariants of our data in order to invent more of it}}. In computer vision, you can use this by: 1. {{c2::cropping datasets}} 2. {{c2::flipping or rotating images as appropriate}} 3. {{c2::zooming or rescaling images}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 880, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 868, DateTimeKind.Utc).AddTicks(3385), 2.5f, 2, "Even logistic regression can be undetermined: {{c1::if a logistic classifier achieves perfect classification, then so does $\\alpha\\boldsymbol{w}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 879, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 868, DateTimeKind.Utc).AddTicks(2653), 2.5f, 2, "In addition to providing bias-variance tradeoff, {{c1::regularization}} can also be used to take an undetermined problem and {{c2::make it determined}}, as in the case of {{c2::PCA or linear regression where the variance matrix $\\bold{X}^\\intercal\\bold{X}$ is singular}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 878, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 868, DateTimeKind.Utc).AddTicks(2553), 2.5f, 2, "In addition to providing bias-variance tradeoff, {{c1::regularization}} can also be used to take an undetermined problem and {{c2::make it determined}}, as in the case of {{c2::PCA or linear regression where the variance matrix $\\bold{X}^\\intercal\\bold{X}$ is singular}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 877, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 868, DateTimeKind.Utc).AddTicks(2517), 2.5f, 2, "In addition to providing bias-variance tradeoff, {{c1::regularization}} can also be used to take an undetermined problem and {{c2::make it determined}}, as in the case of {{c2::PCA or linear regression where the variance matrix $\\bold{X}^\\intercal\\bold{X}$ is singular}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 876, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 868, DateTimeKind.Utc).AddTicks(1943), 2.5f, 2, "One explicit constraint that is used fairly frequently is {{c1::imposing a fixed column norm on the weight matrices}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 875, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 868, DateTimeKind.Utc).AddTicks(1198), 2.5f, 2, "There is a deep connection between norm penalties and constrained optimization. This can be seen by formulating {{c1::the Karush-Kuhn-Tucker Lagrangian}} which mathematically looks like {{c1::$\\mathcal{L}(\\boldsymbol{\\theta}, \\alpha ; \\boldsymbol{X}, \\boldsymbol{y})=J(\\boldsymbol{\\theta} ; \\boldsymbol{X}, \\boldsymbol{y})+\\alpha(\\Omega(\\boldsymbol{\\theta})-k)$}} here $\\alpha$ controls {{c1::the optimal parameters to lie within some ball $k(\\alpha)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 874, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 868, DateTimeKind.Utc).AddTicks(1131), 2.5f, 2, "There is a deep connection between norm penalties and constrained optimization. This can be seen by formulating {{c1::the Karush-Kuhn-Tucker Lagrangian}} which mathematically looks like {{c1::$\\mathcal{L}(\\boldsymbol{\\theta}, \\alpha ; \\boldsymbol{X}, \\boldsymbol{y})=J(\\boldsymbol{\\theta} ; \\boldsymbol{X}, \\boldsymbol{y})+\\alpha(\\Omega(\\boldsymbol{\\theta})-k)$}} here $\\alpha$ controls {{c1::the optimal parameters to lie within some ball $k(\\alpha)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 873, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 868, DateTimeKind.Utc).AddTicks(950), 2.5f, 2, "There is a deep connection between norm penalties and constrained optimization. This can be seen by formulating {{c1::the Karush-Kuhn-Tucker Lagrangian}} which mathematically looks like {{c1::$\\mathcal{L}(\\boldsymbol{\\theta}, \\alpha ; \\boldsymbol{X}, \\boldsymbol{y})=J(\\boldsymbol{\\theta} ; \\boldsymbol{X}, \\boldsymbol{y})+\\alpha(\\Omega(\\boldsymbol{\\theta})-k)$}} here $\\alpha$ controls {{c1::the optimal parameters to lie within some ball $k(\\alpha)$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 872, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 868, DateTimeKind.Utc).AddTicks(347), 2.5f, 2, "If we want to impose explicit hard constraints on our model instead of the soft constraints we can {{c1::project the weights onto the feasible space after each step}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 871, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(9699), 2.5f, 2, "$L^2$ and $L^1$ are interpretable as imposing priors over the weights. Respectively they correspond to MAP inference with {{c1::Gaussian prior}} and {{c1::an isotropic Laplace prior}} respectively. This can be seen by {{c1::taking the log of these probability distributions}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 883, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 868, DateTimeKind.Utc).AddTicks(4112), 2.5f, 2, "{{c1::Dataset augmentation}} is an approach that allows us to use {{c2::invariants of our data in order to invent more of it}}. In computer vision, you can use this by: 1. {{c2::cropping datasets}} 2. {{c2::flipping or rotating images as appropriate}} 3. {{c2::zooming or rescaling images}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 870, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(9643), 2.5f, 2, "$L^2$ and $L^1$ are interpretable as imposing priors over the weights. Respectively they correspond to MAP inference with {{c1::Gaussian prior}} and {{c1::an isotropic Laplace prior}} respectively. This can be seen by {{c1::taking the log of these probability distributions}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 868, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(9013), 2.5f, 2, "$L^1$ regularization encourages {{c1::sparsity}} and can therefore be understood as forcing the model to perform {{c2::feature selection}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 867, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(8983), 2.5f, 2, "$L^1$ regularization encourages {{c1::sparsity}} and can therefore be understood as forcing the model to perform {{c2::feature selection}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 866, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(8408), 2.5f, 2, "By looking at linear regression, we can think of Tikhonov regularization as {{c1::artificially increasing the variance of the data}}. This also allows us to make the connection with {{c2::the Penrose-Moore pseudoinverse}} because our optimal $w$ changes from {{c2::$\\boldsymbol{w}=\\left(\\boldsymbol{X}^{\\top} \\boldsymbol{X}\\right)^{-1} \\boldsymbol{X}^{\\top} \\boldsymbol{y}$}} to {{c2::$\\boldsymbol{w}=\\left(\\boldsymbol{X}^{\\top} \\boldsymbol{X}+\\alpha \\boldsymbol{I}\\right)^{-1} \\boldsymbol{X}^{\\top} \\boldsymbol{y}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 865, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(8272), 2.5f, 2, "By looking at linear regression, we can think of Tikhonov regularization as {{c1::artificially increasing the variance of the data}}. This also allows us to make the connection with {{c2::the Penrose-Moore pseudoinverse}} because our optimal $w$ changes from {{c2::$\\boldsymbol{w}=\\left(\\boldsymbol{X}^{\\top} \\boldsymbol{X}\\right)^{-1} \\boldsymbol{X}^{\\top} \\boldsymbol{y}$}} to {{c2::$\\boldsymbol{w}=\\left(\\boldsymbol{X}^{\\top} \\boldsymbol{X}+\\alpha \\boldsymbol{I}\\right)^{-1} \\boldsymbol{X}^{\\top} \\boldsymbol{y}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 864, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(8157), 2.5f, 2, "By looking at linear regression, we can think of Tikhonov regularization as {{c1::artificially increasing the variance of the data}}. This also allows us to make the connection with {{c2::the Penrose-Moore pseudoinverse}} because our optimal $w$ changes from {{c2::$\\boldsymbol{w}=\\left(\\boldsymbol{X}^{\\top} \\boldsymbol{X}\\right)^{-1} \\boldsymbol{X}^{\\top} \\boldsymbol{y}$}} to {{c2::$\\boldsymbol{w}=\\left(\\boldsymbol{X}^{\\top} \\boldsymbol{X}+\\alpha \\boldsymbol{I}\\right)^{-1} \\boldsymbol{X}^{\\top} \\boldsymbol{y}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 863, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(8114), 2.5f, 2, "By looking at linear regression, we can think of Tikhonov regularization as {{c1::artificially increasing the variance of the data}}. This also allows us to make the connection with {{c2::the Penrose-Moore pseudoinverse}} because our optimal $w$ changes from {{c2::$\\boldsymbol{w}=\\left(\\boldsymbol{X}^{\\top} \\boldsymbol{X}\\right)^{-1} \\boldsymbol{X}^{\\top} \\boldsymbol{y}$}} to {{c2::$\\boldsymbol{w}=\\left(\\boldsymbol{X}^{\\top} \\boldsymbol{X}+\\alpha \\boldsymbol{I}\\right)^{-1} \\boldsymbol{X}^{\\top} \\boldsymbol{y}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 862, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(7279), 2.5f, 2, "From the perspective of the Hessian, the effect of weight decay is to {{c1::rescale the eigenvalues of the Hessian according to $\\frac{\\lambda_i}{\\lambda_i+\\alpha}$}}. This gives us the interpretation of {{c1::decreasing elements of $w$ along which the cost function is not rapidly increasing}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 861, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(7188), 2.5f, 2, "From the perspective of the Hessian, the effect of weight decay is to {{c1::rescale the eigenvalues of the Hessian according to $\\frac{\\lambda_i}{\\lambda_i+\\alpha}$}}. This gives us the interpretation of {{c1::decreasing elements of $w$ along which the cost function is not rapidly increasing}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 860, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(6522), 2.5f, 2, "Other communities refer to weight decay as {{c1::ridge regression}} or {{c2::Tikhonov regularization}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 859, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(6489), 2.5f, 2, "Other communities refer to weight decay as {{c1::ridge regression}} or {{c2::Tikhonov regularization}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 858, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(5986), 2.5f, 2, "The effect of adding weight decay on the SGD update rule is to {{c1::exponentially decay the parameter towards the origin}}. Mathematically this is {{c1::$\\boldsymbol{w} \\leftarrow(1-\\epsilon \\alpha) \\boldsymbol{w}-\\epsilon \\nabla_{\\boldsymbol{w} } J(\\boldsymbol{w} ; \\boldsymbol{X}, \\boldsymbol{y})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 857, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(5833), 2.5f, 2, "The effect of adding weight decay on the SGD update rule is to {{c1::exponentially decay the parameter towards the origin}}. Mathematically this is {{c1::$\\boldsymbol{w} \\leftarrow(1-\\epsilon \\alpha) \\boldsymbol{w}-\\epsilon \\nabla_{\\boldsymbol{w} } J(\\boldsymbol{w} ; \\boldsymbol{X}, \\boldsymbol{y})$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 869, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 867, DateTimeKind.Utc).AddTicks(9605), 2.5f, 2, "$L^2$ and $L^1$ are interpretable as imposing priors over the weights. Respectively they correspond to MAP inference with {{c1::Gaussian prior}} and {{c1::an isotropic Laplace prior}} respectively. This can be seen by {{c1::taking the log of these probability distributions}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 884, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 868, DateTimeKind.Utc).AddTicks(4161), 2.5f, 2, "{{c1::Dataset augmentation}} is an approach that allows us to use {{c2::invariants of our data in order to invent more of it}}. In computer vision, you can use this by: 1. {{c2::cropping datasets}} 2. {{c2::flipping or rotating images as appropriate}} 3. {{c2::zooming or rescaling images}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 885, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 868, DateTimeKind.Utc).AddTicks(4197), 2.5f, 2, "{{c1::Dataset augmentation}} is an approach that allows us to use {{c2::invariants of our data in order to invent more of it}}. In computer vision, you can use this by: 1. {{c2::cropping datasets}} 2. {{c2::flipping or rotating images as appropriate}} 3. {{c2::zooming or rescaling images}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 886, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 868, DateTimeKind.Utc).AddTicks(5022), 2.5f, 2, "A form of data augmentation that is very simple and often works on a wide variety of problems is just to {{c1::inject noise into the system}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 913, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 869, DateTimeKind.Utc).AddTicks(5039), 2.5f, 2, "{{c1::Early stopping}} refers to {{c2::monitoring the validation loss during training, typically on each epoch, and stopping once the validation loss has stopped moving down}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 912, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 869, DateTimeKind.Utc).AddTicks(4532), 2.5f, 2, "An {{c1::epoch}} refers to {{c2::a full pass over the dataset}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 911, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 869, DateTimeKind.Utc).AddTicks(4494), 2.5f, 2, "An {{c1::epoch}} refers to {{c2::a full pass over the dataset}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 910, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 869, DateTimeKind.Utc).AddTicks(4040), 2.5f, 2, "If we are concerned in multi-task learning with only one task ultimately, we can {{c1::split off the other tasks and perform fine-tuning of the model}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 909, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 869, DateTimeKind.Utc).AddTicks(3414), 2.5f, 2, "Multi-task learning is only well motivated if the different tasks {{c1::are related and share a common feature representation or do so approximately}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 908, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 869, DateTimeKind.Utc).AddTicks(2805), 2.5f, 2, "Graphically, multi-task learning with two supervised and one unsupervised output can be depicted as {{c1::}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 907, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 869, DateTimeKind.Utc).AddTicks(2179), 2.5f, 2, "In {{c1::multi-task learning}} we make part {{c2::of the model, typically representing some sort of feature embedding, be shared across several output tasks}} so that it {{c2::has more exposure to data and can be conditioned to generalize well}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 906, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 869, DateTimeKind.Utc).AddTicks(2106), 2.5f, 2, "In {{c1::multi-task learning}} we make part {{c2::of the model, typically representing some sort of feature embedding, be shared across several output tasks}} so that it {{c2::has more exposure to data and can be conditioned to generalize well}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 905, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 869, DateTimeKind.Utc).AddTicks(1993), 2.5f, 2, "In {{c1::multi-task learning}} we make part {{c2::of the model, typically representing some sort of feature embedding, be shared across several output tasks}} so that it {{c2::has more exposure to data and can be conditioned to generalize well}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 904, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 869, DateTimeKind.Utc).AddTicks(1474), 2.5f, 2, "In a semi-supervised context, the utility of having unlabeled samples is that they can still be used {{c1::to learn the feature representation}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 903, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 869, DateTimeKind.Utc).AddTicks(836), 2.5f, 2, "In {{c1::semi-supervised learning}} we use both {{c2::unlabeled examples $\\sim P(\\bold{x})$}} and {{c2::labeled examples $\\sim P(\\bold{x},\\bold{y})$}} to estimate {{c2::the conditional probability $P(\\bold{y}\\mid\\bold{x})$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 902, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 869, DateTimeKind.Utc).AddTicks(777), 2.5f, 2, "In {{c1::semi-supervised learning}} we use both {{c2::unlabeled examples $\\sim P(\\bold{x})$}} and {{c2::labeled examples $\\sim P(\\bold{x},\\bold{y})$}} to estimate {{c2::the conditional probability $P(\\bold{y}\\mid\\bold{x})$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 901, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 869, DateTimeKind.Utc).AddTicks(726), 2.5f, 2, "In {{c1::semi-supervised learning}} we use both {{c2::unlabeled examples $\\sim P(\\bold{x})$}} and {{c2::labeled examples $\\sim P(\\bold{x},\\bold{y})$}} to estimate {{c2::the conditional probability $P(\\bold{y}\\mid\\bold{x})$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 900, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 869, DateTimeKind.Utc).AddTicks(678), 2.5f, 2, "In {{c1::semi-supervised learning}} we use both {{c2::unlabeled examples $\\sim P(\\bold{x})$}} and {{c2::labeled examples $\\sim P(\\bold{x},\\bold{y})$}} to estimate {{c2::the conditional probability $P(\\bold{y}\\mid\\bold{x})$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 899, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 868, DateTimeKind.Utc).AddTicks(9860), 2.5f, 2, "{{c1::Label smoothing}} refers to an interesting form of regularization which consists of {{c2::replacing the classification targets or regression targets by slightly averaged/or smoothed copies}}. In the case of a softmax classifier we {{c2::change the regression targets 0, 1 to $\\frac{\\epsilon}{k-1}$ and $1-\\epsilon$}} and include {{c2::weight decay}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 898, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 868, DateTimeKind.Utc).AddTicks(9840), 2.5f, 2, "{{c1::Label smoothing}} refers to an interesting form of regularization which consists of {{c2::replacing the classification targets or regression targets by slightly averaged/or smoothed copies}}. In the case of a softmax classifier we {{c2::change the regression targets 0, 1 to $\\frac{\\epsilon}{k-1}$ and $1-\\epsilon$}} and include {{c2::weight decay}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 897, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 868, DateTimeKind.Utc).AddTicks(9580), 2.5f, 2, "{{c1::Label smoothing}} refers to an interesting form of regularization which consists of {{c2::replacing the classification targets or regression targets by slightly averaged/or smoothed copies}}. In the case of a softmax classifier we {{c2::change the regression targets 0, 1 to $\\frac{\\epsilon}{k-1}$ and $1-\\epsilon$}} and include {{c2::weight decay}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 896, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 868, DateTimeKind.Utc).AddTicks(9413), 2.5f, 2, "{{c1::Label smoothing}} refers to an interesting form of regularization which consists of {{c2::replacing the classification targets or regression targets by slightly averaged/or smoothed copies}}. In the case of a softmax classifier we {{c2::change the regression targets 0, 1 to $\\frac{\\epsilon}{k-1}$ and $1-\\epsilon$}} and include {{c2::weight decay}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 895, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 868, DateTimeKind.Utc).AddTicks(8043), 2.5f, 2, "From the perspective of regularizing the cost function {{c1::adding a normally distributed random error to the weights}} can be viewed as regularizing the cost with a term {{c2:: $\\eta \\mathbb{E}_{p(\\boldsymbol{x}, y)}[\\|\\nabla_{\\boldsymbol{W} } \\hat{y}(\\boldsymbol{x})\\|^{2}]$}} which encourages {{c2::the model to arrive at values of the parameters where the cost function is flat in an extended region}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 894, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 868, DateTimeKind.Utc).AddTicks(7937), 2.5f, 2, "From the perspective of regularizing the cost function {{c1::adding a normally distributed random error to the weights}} can be viewed as regularizing the cost with a term {{c2:: $\\eta \\mathbb{E}_{p(\\boldsymbol{x}, y)}[\\|\\nabla_{\\boldsymbol{W} } \\hat{y}(\\boldsymbol{x})\\|^{2}]$}} which encourages {{c2::the model to arrive at values of the parameters where the cost function is flat in an extended region}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 893, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 868, DateTimeKind.Utc).AddTicks(7818), 2.5f, 2, "From the perspective of regularizing the cost function {{c1::adding a normally distributed random error to the weights}} can be viewed as regularizing the cost with a term {{c2:: $\\eta \\mathbb{E}_{p(\\boldsymbol{x}, y)}[\\|\\nabla_{\\boldsymbol{W} } \\hat{y}(\\boldsymbol{x})\\|^{2}]$}} which encourages {{c2::the model to arrive at values of the parameters where the cost function is flat in an extended region}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 892, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 868, DateTimeKind.Utc).AddTicks(7116), 2.5f, 2, "In RNNs, it has been suggested to {{c1::add noise to the weights}} which can be thought of as a hammer approach to {{c2::Bayesian inference on what are appropriately stochastic parameters}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 891, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 868, DateTimeKind.Utc).AddTicks(7036), 2.5f, 2, "In RNNs, it has been suggested to {{c1::add noise to the weights}} which can be thought of as a hammer approach to {{c2::Bayesian inference on what are appropriately stochastic parameters}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 890, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 868, DateTimeKind.Utc).AddTicks(6469), 2.5f, 2, "For some models, there is an equivalence between {{c1::weight norm penalties}} and {{c2::injecting noise}}. Intuitively this makes sense because {{c1::large weight values will be less robust to perturbation by noise}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 889, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 868, DateTimeKind.Utc).AddTicks(6399), 2.5f, 2, "For some models, there is an equivalence between {{c1::weight norm penalties}} and {{c2::injecting noise}}. Intuitively this makes sense because {{c1::large weight values will be less robust to perturbation by noise}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 888, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 868, DateTimeKind.Utc).AddTicks(6371), 2.5f, 2, "For some models, there is an equivalence between {{c1::weight norm penalties}} and {{c2::injecting noise}}. Intuitively this makes sense because {{c1::large weight values will be less robust to perturbation by noise}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 887, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 868, DateTimeKind.Utc).AddTicks(5736), 2.5f, 2, "When comparing between models you must be careful to control for {{c1::data augmenation approaches, optimization choices, and whatever else is not part of the model explicitly}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 915, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 869, DateTimeKind.Utc).AddTicks(5878), 2.5f, 2, "If we wish to make use of the validation data after early stopping we can {{c1::fine tune with the validation data as well}} however, {{c1::in this case we are flying blind because we can no way of monitoring whether we will be overfitting}}. In practice, we can {{c1::train for the same number of epochs}} or {{c1::train until the loss falls below the training loss obtained at the early stopping point}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 733, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(7096), 2.5f, 2, "\"Evidence for the manifold hypotheis includes: 1. Probability distribution over {{c1::images, text, and sound}} are {{c1::highly concentrated away from \"\"noise\"\"}}\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 732, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(7047), 2.5f, 2, "\"Evidence for the manifold hypotheis includes: 1. Probability distribution over {{c1::images, text, and sound}} are {{c1::highly concentrated away from \"\"noise\"\"}}\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 731, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(6540), 2.5f, 2, "The {{c1::manifold hypothesis}} states that {{c2::data lies along a low-dimensional manifold, at least coarsely speaking}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 576, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(1027), 2.5f, 2, "{{c1::Weight decay}} is a particularly common regularization scheme that {{c2::penalizes large parameter sizes}}. The regularizer looks like {{c3::$\\lambda \\boldsymbol{w}^{\\top} \\boldsymbol{w}$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 575, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(543), 2.5f, 2, "Many forms of {{c1::regularization}} can be thought of as {{c2::setting an appropriate prior over the hypothesis space}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 574, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(479), 2.5f, 2, "Many forms of {{c1::regularization}} can be thought of as {{c2::setting an appropriate prior over the hypothesis space}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 573, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(9981), 2.5f, 2, "In order to design our algorithms to function wel on particular tasks, we give them {{c1::preferences}} or {{c2::inductive biases}}. By doing so, we adjust {{c3::a prior weighting over the hypothesis space}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 572, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(9931), 2.5f, 2, "In order to design our algorithms to function wel on particular tasks, we give them {{c1::preferences}} or {{c2::inductive biases}}. By doing so, we adjust {{c3::a prior weighting over the hypothesis space}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 571, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(9904), 2.5f, 2, "In order to design our algorithms to function wel on particular tasks, we give them {{c1::preferences}} or {{c2::inductive biases}}. By doing so, we adjust {{c3::a prior weighting over the hypothesis space}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 570, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(9404), 2.5f, 2, "A natural consequence of the {{c1::no free lunch theorem}} is that in order to achieve good performance, we must endow our models with {{c2::appropriate inductive biases to the data}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 569, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(9323), 2.5f, 2, "A natural consequence of the {{c1::no free lunch theorem}} is that in order to achieve good performance, we must endow our models with {{c2::appropriate inductive biases to the data}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 568, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(8776), 2.5f, 2, "Very generally, the {{c1::no free lunch theorem}} states that {{c2::averaging over all possible data generating distributions, every classification algorithm has the same generalization error}}, which is the same as {{c2::the classifier that always guesses the first label}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 567, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(8719), 2.5f, 2, "Very generally, the {{c1::no free lunch theorem}} states that {{c2::averaging over all possible data generating distributions, every classification algorithm has the same generalization error}}, which is the same as {{c2::the classifier that always guesses the first label}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 566, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(8589), 2.5f, 2, "Very generally, the {{c1::no free lunch theorem}} states that {{c2::averaging over all possible data generating distributions, every classification algorithm has the same generalization error}}, which is the same as {{c2::the classifier that always guesses the first label}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 565, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(8052), 2.5f, 2, "Because of the problem of induction, we {{c1::cannot aim to determine a priori which beliefs are rational}} only to {{c2::describe how to modify our beliefs when confronted by evidence}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 577, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(1072), 2.5f, 2, "{{c1::Weight decay}} is a particularly common regularization scheme that {{c2::penalizes large parameter sizes}}. The regularizer looks like {{c3::$\\lambda \\boldsymbol{w}^{\\top} \\boldsymbol{w}$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 564, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(7981), 2.5f, 2, "Because of the problem of induction, we {{c1::cannot aim to determine a priori which beliefs are rational}} only to {{c2::describe how to modify our beliefs when confronted by evidence}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 562, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(6895), 2.5f, 2, "\"Inductive reasoning is {{c1::fundamentally unsound}}. We can remember the pithy statement: {{c2::\"\"When someone dies, it's never me.\"\"}}.\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 561, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(6846), 2.5f, 2, "\"Inductive reasoning is {{c1::fundamentally unsound}}. We can remember the pithy statement: {{c2::\"\"When someone dies, it's never me.\"\"}}.\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 560, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(6217), 2.5f, 2, "The error incurred by a {{c1::perfect oracle}} is called the {{c2::Bayes error}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 559, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(6195), 2.5f, 2, "The error incurred by a {{c1::perfect oracle}} is called the {{c2::Bayes error}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 558, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(5716), 2.5f, 2, "Even if we had an oracle that knew exactly the data generating distribution we would not necessarily expect {{c1::zero generalization error}}. This is because (mathematically) {{c1::$p(\\textbf{y}\\mid x)$ may still be stochastic}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 557, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(5607), 2.5f, 2, "Even if we had an oracle that knew exactly the data generating distribution we would not necessarily expect {{c1::zero generalization error}}. This is because (mathematically) {{c1::$p(\\textbf{y}\\mid x)$ may still be stochastic}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 556, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(5072), 2.5f, 2, "A {{c1::non-parametric}} model does not have {{c2::bounded size}}. The prototypical example is {{c3::k nearest neighbors classification/regression}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 555, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(5020), 2.5f, 2, "A {{c1::non-parametric}} model does not have {{c2::bounded size}}. The prototypical example is {{c3::k nearest neighbors classification/regression}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 554, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(4997), 2.5f, 2, "A {{c1::non-parametric}} model does not have {{c2::bounded size}}. The prototypical example is {{c3::k nearest neighbors classification/regression}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 553, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(4504), 2.5f, 2, "It is very difficult to determine {{c1::the effective or actual capacity}} of a deep learning model. One reason is that {{c2::deep learning models rarely operate at parameter values close to the true optimum}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 552, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(4414), 2.5f, 2, "It is very difficult to determine {{c1::the effective or actual capacity}} of a deep learning model. One reason is that {{c2::deep learning models rarely operate at parameter values close to the true optimum}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 551, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(3901), 2.5f, 2, "Although there are theorems about the gap between {{c1::training and generalization errors}} these are not useful in practice because {{c2::in most cases of practical interest the bounds are very loose}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 563, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(7369), 2.5f, 2, "The issues of inductive reasoning were pointed out by {{c1::The Pyrrhonists}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 578, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(1159), 2.5f, 2, "{{c1::Weight decay}} is a particularly common regularization scheme that {{c2::penalizes large parameter sizes}}. The regularizer looks like {{c3::$\\lambda \\boldsymbol{w}^{\\top} \\boldsymbol{w}$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 579, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(1702), 2.5f, 2, "We usually denote {{c1::a regularizer to a cost function}} with the symbol {{c2::$\\Omega(\\theta)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 580, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(1730), 2.5f, 2, "We usually denote {{c1::a regularizer to a cost function}} with the symbol {{c2::$\\Omega(\\theta)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 607, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(9312), 2.5f, 2, "An {{c1::estimator}} is a {{c2::rule for calculating an estimate of a quantity of interest, like a parameter}} from observed data. They are classified into {{c1::point estimators}} and {{c1::interval estimators}}. Examples of the former are {{c1::the estimate of the mean}} and two of the latter: {{c1::confidence intervals and credible intervals}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 606, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(9286), 2.5f, 2, "An {{c1::estimator}} is a {{c2::rule for calculating an estimate of a quantity of interest, like a parameter}} from observed data. They are classified into {{c1::point estimators}} and {{c1::interval estimators}}. Examples of the former are {{c1::the estimate of the mean}} and two of the latter: {{c1::confidence intervals and credible intervals}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 605, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(9261), 2.5f, 2, "An {{c1::estimator}} is a {{c2::rule for calculating an estimate of a quantity of interest, like a parameter}} from observed data. They are classified into {{c1::point estimators}} and {{c1::interval estimators}}. Examples of the former are {{c1::the estimate of the mean}} and two of the latter: {{c1::confidence intervals and credible intervals}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 604, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(9176), 2.5f, 2, "An {{c1::estimator}} is a {{c2::rule for calculating an estimate of a quantity of interest, like a parameter}} from observed data. They are classified into {{c1::point estimators}} and {{c1::interval estimators}}. Examples of the former are {{c1::the estimate of the mean}} and two of the latter: {{c1::confidence intervals and credible intervals}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 603, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(8656), 2.5f, 2, "In {{c1::k-fold cross validation or just cross validation}} we {{c2::split our dataset into k folds or subsets of equal size and take the mean results over training on holding each of the k folds out in turn}}. In general it is difficult to {{c2::produce unbiased}} estimators {{c2::of the variance in the accuracy predicted this way because the training datasets are highly correlated}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 602, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(8550), 2.5f, 2, "In {{c1::k-fold cross validation or just cross validation}} we {{c2::split our dataset into k folds or subsets of equal size and take the mean results over training on holding each of the k folds out in turn}}. In general it is difficult to {{c2::produce unbiased}} estimators {{c2::of the variance in the accuracy predicted this way because the training datasets are highly correlated}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 601, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(8525), 2.5f, 2, "In {{c1::k-fold cross validation or just cross validation}} we {{c2::split our dataset into k folds or subsets of equal size and take the mean results over training on holding each of the k folds out in turn}}. In general it is difficult to {{c2::produce unbiased}} estimators {{c2::of the variance in the accuracy predicted this way because the training datasets are highly correlated}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 600, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(8379), 2.5f, 2, "In {{c1::k-fold cross validation or just cross validation}} we {{c2::split our dataset into k folds or subsets of equal size and take the mean results over training on holding each of the k folds out in turn}}. In general it is difficult to {{c2::produce unbiased}} estimators {{c2::of the variance in the accuracy predicted this way because the training datasets are highly correlated}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 599, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(7645), 2.5f, 2, "The generalization error {{c1::cannot}} be smaller than the Bayes error.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 598, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(7205), 2.5f, 2, "The training error {{c1::can}} be smaller than the Bayes error.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 597, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(6750), 2.5f, 2, "We choose hyperparameters appropriately by {{c1::intuition or past experience}} and {{c1::the proper use of a validation set sufficiently large to compare hyperparameter and model choices}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 596, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(6645), 2.5f, 2, "We choose hyperparameters appropriately by {{c1::intuition or past experience}} and {{c1::the proper use of a validation set sufficiently large to compare hyperparameter and model choices}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 595, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(6147), 2.5f, 2, "Learning a {{c1::capacity hyperparameter}} is inappropriate because our model will always be {{c2::driven towards higher capacity and overfitting}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 594, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(6091), 2.5f, 2, "Learning a {{c1::capacity hyperparameter}} is inappropriate because our model will always be {{c2::driven towards higher capacity and overfitting}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 593, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(5576), 2.5f, 2, "For parameters, sometimes we {{c1::promote them to hyperparameters}} because {{c2::it is inconvenient to learn them}} or {{c2::it is inappropriate to let them be a function of the data, as in the case of capacity hyperparameters}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 592, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(5471), 2.5f, 2, "For parameters, sometimes we {{c1::promote them to hyperparameters}} because {{c2::it is inconvenient to learn them}} or {{c2::it is inappropriate to let them be a function of the data, as in the case of capacity hyperparameters}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 591, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(5429), 2.5f, 2, "For parameters, sometimes we {{c1::promote them to hyperparameters}} because {{c2::it is inconvenient to learn them}} or {{c2::it is inappropriate to let them be a function of the data, as in the case of capacity hyperparameters}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 590, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(4887), 2.5f, 2, "A {{c1::capacity hyperparameter}} is a hyperparameter that {{c2::sets the representational capacity of a model}}. One example in the case of polynomial fitting is {{c2::the maximum allowed degree of polynomial}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 589, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(4837), 2.5f, 2, "A {{c1::capacity hyperparameter}} is a hyperparameter that {{c2::sets the representational capacity of a model}}. One example in the case of polynomial fitting is {{c2::the maximum allowed degree of polynomial}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 588, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(4734), 2.5f, 2, "A {{c1::capacity hyperparameter}} is a hyperparameter that {{c2::sets the representational capacity of a model}}. One example in the case of polynomial fitting is {{c2::the maximum allowed degree of polynomial}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 587, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(4229), 2.5f, 2, "A {{c1::hyperparameter}} is a {{c2::parameter of the model, algorithm, or learning system}} that we {{c2::do not explicitly optimize}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 586, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(4195), 2.5f, 2, "A {{c1::hyperparameter}} is a {{c2::parameter of the model, algorithm, or learning system}} that we {{c2::do not explicitly optimize}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 585, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(4132), 2.5f, 2, "A {{c1::hyperparameter}} is a {{c2::parameter of the model, algorithm, or learning system}} that we {{c2::do not explicitly optimize}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 584, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(3606), 2.5f, 2, "A philosphical bias in deep learning regarding regularization is that, {{c1::a wide variety of tasks may be solved very effectively using models with extremely high representational capacity that are appropriately regularized}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 583, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(2662), 2.5f, 2, "Can regularizing a model reduce the training error?", new TimeSpan(0, 0, 10, 0, 0), 2, "Typically it will not, and it is guaranteed not to if we actually find the optimal parameters. However, due to the optimization dynamics it's not insane to have scenarios where regularization actually improves training error by, for instance, pushing the parameters to a region where the SGD is better behaved." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 582, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(2277), 2.5f, 2, "We undertake regularization in an effort to {{c1::reduce generalization error}} at the expense of {{c2::increasing the training error}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 581, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(2238), 2.5f, 2, "We undertake regularization in an effort to {{c1::reduce generalization error}} at the expense of {{c2::increasing the training error}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 550, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(3830), 2.5f, 2, "Although there are theorems about the gap between {{c1::training and generalization errors}} these are not useful in practice because {{c2::in most cases of practical interest the bounds are very loose}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 608, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(9376), 2.5f, 2, "An {{c1::estimator}} is a {{c2::rule for calculating an estimate of a quantity of interest, like a parameter}} from observed data. They are classified into {{c1::point estimators}} and {{c1::interval estimators}}. Examples of the former are {{c1::the estimate of the mean}} and two of the latter: {{c1::confidence intervals and credible intervals}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 549, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(3217), 2.5f, 2, "A binary classifier is said to be capable of {{c1::shattering a dataset}} if {{c2::for any assignment of labels, there are parameters for the classifier which can achieve perfect accuracy}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 547, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(2616), 2.5f, 2, "The {{c1::Vapnik-Chervonenkis or VC dimension}} is a means of {{c2::quantifying the capacity of a binary model}}. It is defined to be {{c2::the largest possible number of example points which the model can shatter}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 515, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(5453), 2.5f, 2, "If the shape of a matrix is {{c1::$m\\times n$}} then the matrix has {{c2::m}} rows and {{c2::n}} columns. As we change the first index we are changing the {{c2::row}} that we refer to.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 514, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(5441), 2.5f, 2, "If the shape of a matrix is {{c1::$m\\times n$}} then the matrix has {{c2::m}} rows and {{c2::n}} columns. As we change the first index we are changing the {{c2::row}} that we refer to.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 513, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(4946), 2.5f, 2, "In a {{c1::design matrix}} the dataset is organized into a {{c2::matrix with one row for each example in the dataset}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 512, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(4886), 2.5f, 2, "In a {{c1::design matrix}} the dataset is organized into a {{c2::matrix with one row for each example in the dataset}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 511, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(4376), 2.5f, 2, "In {{c1::multi-instance learning}}, an {{c2::entire collection of examples is labeled as containing or not containing an example of a class but individual members are not labeled}}. A salient example would be for {{c2::batch COVID testing}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 510, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(4349), 2.5f, 2, "In {{c1::multi-instance learning}}, an {{c2::entire collection of examples is labeled as containing or not containing an example of a class but individual members are not labeled}}. A salient example would be for {{c2::batch COVID testing}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 509, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(4208), 2.5f, 2, "In {{c1::multi-instance learning}}, an {{c2::entire collection of examples is labeled as containing or not containing an example of a class but individual members are not labeled}}. A salient example would be for {{c2::batch COVID testing}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 508, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(3694), 2.5f, 2, "In {{c1::semi-supervised learning}} some examples {{c2::are supervised and others are not}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 507, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(3621), 2.5f, 2, "In {{c1::semi-supervised learning}} some examples {{c2::are supervised and others are not}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 506, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(3091), 2.5f, 2, "In {{c1::reinforcement learning}} algorithms {{c2::interact with an environment so there is a feedback loop between the system and its experience}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 505, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(2989), 2.5f, 2, "In {{c1::reinforcement learning}} algorithms {{c2::interact with an environment so there is a feedback loop between the system and its experience}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 504, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(2288), 2.5f, 2, "There is not so hard a boundary between {{c1::supervised and unsupervised learning}} because of {{c2::the chain rule of probability}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 516, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(5462), 2.5f, 2, "If the shape of a matrix is {{c1::$m\\times n$}} then the matrix has {{c2::m}} rows and {{c2::n}} columns. As we change the first index we are changing the {{c2::row}} that we refer to.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 503, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(2250), 2.5f, 2, "There is not so hard a boundary between {{c1::supervised and unsupervised learning}} because of {{c2::the chain rule of probability}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 501, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(1645), 2.5f, 2, "In {{c1::supervised learning problems}}, our system experiences a dataset containing both {{c2::features and labels}}. From a statistics standpoint, we can think of {{c1::supervised learning}} as aiming to learn {{c3::$p(\\textbf{y}\\mid\\textbf{x})$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 500, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(1618), 2.5f, 2, "In {{c1::supervised learning problems}}, our system experiences a dataset containing both {{c2::features and labels}}. From a statistics standpoint, we can think of {{c1::supervised learning}} as aiming to learn {{c3::$p(\\textbf{y}\\mid\\textbf{x})$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 499, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(1586), 2.5f, 2, "In {{c1::supervised learning problems}}, our system experiences a dataset containing both {{c2::features and labels}}. From a statistics standpoint, we can think of {{c1::supervised learning}} as aiming to learn {{c3::$p(\\textbf{y}\\mid\\textbf{x})$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 498, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(1038), 2.5f, 2, "In {{c1::unsupervised learning}} we experience a dataset containing many features and aim to {{c2::learn useful propreties of the sructure of the dataset, for instance the generating probability distribution $p(\\textbf{x})$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 497, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(901), 2.5f, 2, "In {{c1::unsupervised learning}} we experience a dataset containing many features and aim to {{c2::learn useful propreties of the sructure of the dataset, for instance the generating probability distribution $p(\\textbf{x})$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 496, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(356), 2.5f, 2, "A {{c1::dataset}} is a collection of {{c2::examples}} or {{c2::data points}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 495, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(338), 2.5f, 2, "A {{c1::dataset}} is a collection of {{c2::examples}} or {{c2::data points}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 494, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(319), 2.5f, 2, "A {{c1::dataset}} is a collection of {{c2::examples}} or {{c2::data points}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 493, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(9862), 2.5f, 2, "When designing a {{c2::loss function or performance measure for a model with complicated output}} we need to consider the tradeoff between penalizing {{c1::coarse versus fine-grained errors}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 492, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(9818), 2.5f, 2, "When designing a {{c2::loss function or performance measure for a model with complicated output}} we need to consider the tradeoff between penalizing {{c1::coarse versus fine-grained errors}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 491, 4, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(9150), 2.5f, 2, "Four different performance measures that we might use to assess how well our model is performing might be: 1. {{c1::the accuracy, i.e. the proportion of samples for which the correct output is produced}} 2. {{c2::receiver operating characteristic or precision-recall curves}} 3. {{c3::a loss function, especially for regression-like problems}} 4. {{c4::comparison to human performance}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 490, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 856, DateTimeKind.Utc).AddTicks(9112), 2.5f, 2, "Four different performance measures that we might use to assess how well our model is performing might be: 1. {{c1::the accuracy, i.e. the proportion of samples for which the correct output is produced}} 2. {{c2::receiver operating characteristic or precision-recall curves}} 3. {{c3::a loss function, especially for regression-like problems}} 4. {{c4::comparison to human performance}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 502, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(1681), 2.5f, 2, "In {{c1::supervised learning problems}}, our system experiences a dataset containing both {{c2::features and labels}}. From a statistics standpoint, we can think of {{c1::supervised learning}} as aiming to learn {{c3::$p(\\textbf{y}\\mid\\textbf{x})$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 517, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(5520), 2.5f, 2, "If the shape of a matrix is {{c1::$m\\times n$}} then the matrix has {{c2::m}} rows and {{c2::n}} columns. As we change the first index we are changing the {{c2::row}} that we refer to.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 518, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(6010), 2.5f, 2, "{{c1::Generalization}}, the central challenge of machine learning is to perform well on {{c1::unseen inputs}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 519, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(6035), 2.5f, 2, "{{c1::Generalization}}, the central challenge of machine learning is to perform well on {{c1::unseen inputs}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 546, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(2538), 2.5f, 2, "The {{c1::Vapnik-Chervonenkis or VC dimension}} is a means of {{c2::quantifying the capacity of a binary model}}. It is defined to be {{c2::the largest possible number of example points which the model can shatter}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 545, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(2486), 2.5f, 2, "The {{c1::Vapnik-Chervonenkis or VC dimension}} is a means of {{c2::quantifying the capacity of a binary model}}. It is defined to be {{c2::the largest possible number of example points which the model can shatter}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 544, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(1935), 2.5f, 2, "The {{c1::principle of parsimony}} or {{c1::Occam's razor}} says that {{c2::among competing hypotheses, we should choose the simplest one}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 543, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(1867), 2.5f, 2, "The {{c1::principle of parsimony}} or {{c1::Occam's razor}} says that {{c2::among competing hypotheses, we should choose the simplest one}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 542, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(1844), 2.5f, 2, "The {{c1::principle of parsimony}} or {{c1::Occam's razor}} says that {{c2::among competing hypotheses, we should choose the simplest one}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 541, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(1333), 2.5f, 2, "The {{c1::representational capacity}} is another way of talking about {{c2::the hypothesis space of models}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 540, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(1293), 2.5f, 2, "The {{c1::representational capacity}} is another way of talking about {{c2::the hypothesis space of models}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 539, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(763), 2.5f, 2, "Models with {{c1::high capacity}} can {{c2::overfit by memorizing specific properties of the training dataset}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 538, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(656), 2.5f, 2, "Models with {{c1::high capacity}} can {{c2::overfit by memorizing specific properties of the training dataset}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 537, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(165), 2.5f, 2, "Models with {{c1::low capacity}} struggle {{c2::to express all the relationships among the data}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 536, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(109), 2.5f, 2, "Models with {{c1::low capacity}} struggle {{c2::to express all the relationships among the data}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 535, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(9615), 2.5f, 2, "The expected {{c1::training and test}} error of a random model are {{c2::equal}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 534, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(9599), 2.5f, 2, "The expected {{c1::training and test}} error of a random model are {{c2::equal}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 533, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(9089), 2.5f, 2, "Colloquially, {{c1::independent}} random variables are {{c2::non-interacting}}, knowledge of one {{c2::does not provide knowledge of another}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 532, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(9045), 2.5f, 2, "Colloquially, {{c1::independent}} random variables are {{c2::non-interacting}}, knowledge of one {{c2::does not provide knowledge of another}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 531, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(9018), 2.5f, 2, "Colloquially, {{c1::independent}} random variables are {{c2::non-interacting}}, knowledge of one {{c2::does not provide knowledge of another}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 530, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(8469), 2.5f, 2, "{{c1::iid}} = {{c2::independent and indentically distributed}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 529, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(8420), 2.5f, 2, "{{c1::iid}} = {{c2::independent and indentically distributed}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 528, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(7920), 2.5f, 2, "The {{c1::data generating process}} can be thought of as a {{c2::probability distribution generating our training and test data}}. Typically our data are {{c2::iid}} in which case the {{c1::data generating process}} can be considered to be one {{c3::data generating distribution}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 527, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(7850), 2.5f, 2, "The {{c1::data generating process}} can be thought of as a {{c2::probability distribution generating our training and test data}}. Typically our data are {{c2::iid}} in which case the {{c1::data generating process}} can be considered to be one {{c3::data generating distribution}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 526, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(7820), 2.5f, 2, "The {{c1::data generating process}} can be thought of as a {{c2::probability distribution generating our training and test data}}. Typically our data are {{c2::iid}} in which case the {{c1::data generating process}} can be considered to be one {{c3::data generating distribution}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 525, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(7808), 2.5f, 2, "The {{c1::data generating process}} can be thought of as a {{c2::probability distribution generating our training and test data}}. Typically our data are {{c2::iid}} in which case the {{c1::data generating process}} can be considered to be one {{c3::data generating distribution}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 524, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(7737), 2.5f, 2, "The {{c1::data generating process}} can be thought of as a {{c2::probability distribution generating our training and test data}}. Typically our data are {{c2::iid}} in which case the {{c1::data generating process}} can be considered to be one {{c3::data generating distribution}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 523, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(7200), 2.5f, 2, "We {{c1::estimate the generalization error}} by {{c2::measuring the performance on a test set of examples held aside from the training data}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 522, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(7103), 2.5f, 2, "We {{c1::estimate the generalization error}} by {{c2::measuring the performance on a test set of examples held aside from the training data}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 521, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(6582), 2.5f, 2, "{{c1::Generalization}} is the expected error on {{c2::the test set or the real data used in operando}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 520, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 857, DateTimeKind.Utc).AddTicks(6526), 2.5f, 2, "{{c1::Generalization}} is the expected error on {{c2::the test set or the real data used in operando}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 548, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 858, DateTimeKind.Utc).AddTicks(3105), 2.5f, 2, "A binary classifier is said to be capable of {{c1::shattering a dataset}} if {{c2::for any assignment of labels, there are parameters for the classifier which can achieve perfect accuracy}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 609, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(9427), 2.5f, 2, "An {{c1::estimator}} is a {{c2::rule for calculating an estimate of a quantity of interest, like a parameter}} from observed data. They are classified into {{c1::point estimators}} and {{c1::interval estimators}}. Examples of the former are {{c1::the estimate of the mean}} and two of the latter: {{c1::confidence intervals and credible intervals}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 610, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(9940), 2.5f, 2, "A {{c1::point estimator}} is also called a {{c2::statistic}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 611, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 859, DateTimeKind.Utc).AddTicks(9960), 2.5f, 2, "A {{c1::point estimator}} is also called a {{c2::statistic}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 699, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(9180), 2.5f, 2, "The principal components identified by PCA are the {{c1::right singular vectors}} of the {{c1::design matrix}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 698, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(9156), 2.5f, 2, "The principal components identified by PCA are the {{c1::right singular vectors}} of the {{c1::design matrix}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 697, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(8660), 2.5f, 2, "From the standpoint of variance, PCA attempts to {{c1::diagonalize the variance of the design matix}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 696, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(8121), 2.5f, 2, "{{c1::Principal component analysis}} aims to {{c2::learn a lower dimensional feature representation with no linear relationship between the learned features}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 695, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(8009), 2.5f, 2, "{{c1::Principal component analysis}} aims to {{c2::learn a lower dimensional feature representation with no linear relationship between the learned features}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 694, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(7457), 2.5f, 2, "An {{c1::independent representation}} is one which {{c2::attempts to disentangle the sources of variation in a data distribution so that the dimensions of the representation are statistically independent}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 693, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(7304), 2.5f, 2, "An {{c1::independent representation}} is one which {{c2::attempts to disentangle the sources of variation in a data distribution so that the dimensions of the representation are statistically independent}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 692, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(6765), 2.5f, 2, "\"In supervised learning we often aim to find the \"\"best representation\"\" of some data. By best we often mean simple which includes: 1. {{c1::low dimensionality}} 2. {{c2::sparse representation}} 3. {{c3::an independent representation}}\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 691, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(6727), 2.5f, 2, "\"In supervised learning we often aim to find the \"\"best representation\"\" of some data. By best we often mean simple which includes: 1. {{c1::low dimensionality}} 2. {{c2::sparse representation}} 3. {{c3::an independent representation}}\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 690, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(6652), 2.5f, 2, "\"In supervised learning we often aim to find the \"\"best representation\"\" of some data. By best we often mean simple which includes: 1. {{c1::low dimensionality}} 2. {{c2::sparse representation}} 3. {{c3::an independent representation}}\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 689, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(6160), 2.5f, 2, "A glaring weakness of KNN apart from not being parametric is that KNN {{c1::cannot learn that a particular feature is more important than any other. Each feature is treated with equal significance in the distance function}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 688, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(5406), 2.5f, 2, "In K-nearest neighbors classification or regression we use the {{c1::average of the k-nearest neighbors to form a prediction}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 700, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(9676), 2.5f, 2, "{{c1::K-means clustering}} consists of the following algorithm procedure: 1. Initialize {{c2::k centroid locations, possibly randomly}} 2. {{c2::Make new cluster assignments by assigning all points to the nearest cluster}} 3. {{c2::Assign all clusters to be the centroids of the assigned points}} 4. Repeat until convergence", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 687, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(4855), 2.5f, 2, "{{c1::MNIST}} is a database of {{c2::60k + 10k images of handwritten digits}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 685, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(4344), 2.5f, 2, "Support vector machines were considered the very best models for many tasks until {{c1::Hinton et al. demonstrated in 2006 that a neural network could outperform RBF kernel-SVM on MNIST}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 684, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(3683), 2.5f, 2, "A performance drawback of kernel machines is that by design we must {{c1::perform a sum against the entire training set at evaluation time}}. To mitigate this {{c1::we often try to learn the coefficient vector which is sparse}}. The vectors with nonzero weight are called {{c1::support vectors which gives support vector machines their name}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 683, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(3614), 2.5f, 2, "A performance drawback of kernel machines is that by design we must {{c1::perform a sum against the entire training set at evaluation time}}. To mitigate this {{c1::we often try to learn the coefficient vector which is sparse}}. The vectors with nonzero weight are called {{c1::support vectors which gives support vector machines their name}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 682, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(3545), 2.5f, 2, "A performance drawback of kernel machines is that by design we must {{c1::perform a sum against the entire training set at evaluation time}}. To mitigate this {{c1::we often try to learn the coefficient vector which is sparse}}. The vectors with nonzero weight are called {{c1::support vectors which gives support vector machines their name}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 681, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(2924), 2.5f, 2, "Algorithms making use of the kernel trick are called {{c1::kernel machines}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 680, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(2417), 2.5f, 2, "As a coarse intuition, you can think of kernels as defining an approximate {{c1::similarity measure between example data}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 679, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(1869), 2.5f, 2, "For kernel machines, Gaussian kernels can be thought of as performing {{c1::template matching}}, where {{c1::a training example $u$ elicits a large response from other points close by}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 678, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(1785), 2.5f, 2, "For kernel machines, Gaussian kernels can be thought of as performing {{c1::template matching}}, where {{c1::a training example $u$ elicits a large response from other points close by}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 677, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(1223), 2.5f, 2, "The feature embedding associated to the Gaussian kernel can be considered to be all {{c1::monomials over the input vector}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 676, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(707), 2.5f, 2, "The {{c1::Gaussian kernel}} is otherwise known as a {{c2::radial basis function kernel}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 675, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(667), 2.5f, 2, "The {{c1::Gaussian kernel}} is otherwise known as a {{c2::radial basis function kernel}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 674, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(166), 2.5f, 2, "The {{c1::Gaussian kernel}} is defined by {{c2::$k(\\boldsymbol{u}, \\boldsymbol{v})=\\mathcal{N}\\left(\\boldsymbol{u}-\\boldsymbol{v} ; 0, \\sigma^{2} \\boldsymbol{I}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 686, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(4806), 2.5f, 2, "{{c1::MNIST}} is a database of {{c2::60k + 10k images of handwritten digits}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 701, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(9726), 2.5f, 2, "{{c1::K-means clustering}} consists of the following algorithm procedure: 1. Initialize {{c2::k centroid locations, possibly randomly}} 2. {{c2::Make new cluster assignments by assigning all points to the nearest cluster}} 3. {{c2::Assign all clusters to be the centroids of the assigned points}} 4. Repeat until convergence", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 702, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(9807), 2.5f, 2, "{{c1::K-means clustering}} consists of the following algorithm procedure: 1. Initialize {{c2::k centroid locations, possibly randomly}} 2. {{c2::Make new cluster assignments by assigning all points to the nearest cluster}} 3. {{c2::Assign all clusters to be the centroids of the assigned points}} 4. Repeat until convergence", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 703, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(9910), 2.5f, 2, "{{c1::K-means clustering}} consists of the following algorithm procedure: 1. Initialize {{c2::k centroid locations, possibly randomly}} 2. {{c2::Make new cluster assignments by assigning all points to the nearest cluster}} 3. {{c2::Assign all clusters to be the centroids of the assigned points}} 4. Repeat until convergence", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 730, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(6460), 2.5f, 2, "The {{c1::manifold hypothesis}} states that {{c2::data lies along a low-dimensional manifold, at least coarsely speaking}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 729, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(5913), 2.5f, 2, "A {{c1::manifold}} is a {{c2::region that locally appears to be Euclidean}}. In machine learning people use this term to refer to {{c2::connected sets of points with the same class or behavior that can be approximated as effectively lower dimensional}}. A critical example (for instance in computer vision) is {{c2::that the set of all realistic images is a very small subset of all possible images}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 728, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(5825), 2.5f, 2, "A {{c1::manifold}} is a {{c2::region that locally appears to be Euclidean}}. In machine learning people use this term to refer to {{c2::connected sets of points with the same class or behavior that can be approximated as effectively lower dimensional}}. A critical example (for instance in computer vision) is {{c2::that the set of all realistic images is a very small subset of all possible images}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 727, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(5707), 2.5f, 2, "A {{c1::manifold}} is a {{c2::region that locally appears to be Euclidean}}. In machine learning people use this term to refer to {{c2::connected sets of points with the same class or behavior that can be approximated as effectively lower dimensional}}. A critical example (for instance in computer vision) is {{c2::that the set of all realistic images is a very small subset of all possible images}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 726, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(5654), 2.5f, 2, "A {{c1::manifold}} is a {{c2::region that locally appears to be Euclidean}}. In machine learning people use this term to refer to {{c2::connected sets of points with the same class or behavior that can be approximated as effectively lower dimensional}}. A critical example (for instance in computer vision) is {{c2::that the set of all realistic images is a very small subset of all possible images}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 725, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(5111), 2.5f, 2, "The example of a checkerboard can be used to examine the problem of {{c1::the local constant prior}}. On a checkerboard {{c2::neighbors are not indicative of one another}}, but {{c2::there is a definite and predictable structure}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 724, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(5059), 2.5f, 2, "The example of a checkerboard can be used to examine the problem of {{c1::the local constant prior}}. On a checkerboard {{c2::neighbors are not indicative of one another}}, but {{c2::there is a definite and predictable structure}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 723, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(5004), 2.5f, 2, "The example of a checkerboard can be used to examine the problem of {{c1::the local constant prior}}. On a checkerboard {{c2::neighbors are not indicative of one another}}, but {{c2::there is a definite and predictable structure}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 722, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(4384), 2.5f, 2, "A common implicit prior in many traditional machine learning models is {{c1::the smoothness prior}} or {{c1::the local constancy prior}}. This prior suggests that {{c1::nearby points are reprsentative of the behavior of their neighbors}}. In kernel machines it is popular to use {{c2::local kernels which embed this inductive bias}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 721, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(4332), 2.5f, 2, "A common implicit prior in many traditional machine learning models is {{c1::the smoothness prior}} or {{c1::the local constancy prior}}. This prior suggests that {{c1::nearby points are reprsentative of the behavior of their neighbors}}. In kernel machines it is popular to use {{c2::local kernels which embed this inductive bias}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 720, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(4259), 2.5f, 2, "A common implicit prior in many traditional machine learning models is {{c1::the smoothness prior}} or {{c1::the local constancy prior}}. This prior suggests that {{c1::nearby points are reprsentative of the behavior of their neighbors}}. In kernel machines it is popular to use {{c2::local kernels which embed this inductive bias}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 719, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(4224), 2.5f, 2, "A common implicit prior in many traditional machine learning models is {{c1::the smoothness prior}} or {{c1::the local constancy prior}}. This prior suggests that {{c1::nearby points are reprsentative of the behavior of their neighbors}}. In kernel machines it is popular to use {{c2::local kernels which embed this inductive bias}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 718, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(3693), 2.5f, 2, "The {{c1::curse of dimensionality}} refers to how {{c2::the geometry of high dimensional space conspires to make machine learning problems more difficult}}. This happens in two principal ways: 1. {{c3::The state space increases exponentially in dimension}} 2. {{c3::The geometry of high dimensional space is just different in a way that's counterintuitive: most vectors on the unit sphere are orthogonal to one another. Secondly there's more volume: for KNN you need to look further away to get k samples!}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 717, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(3452), 2.5f, 2, "The {{c1::curse of dimensionality}} refers to how {{c2::the geometry of high dimensional space conspires to make machine learning problems more difficult}}. This happens in two principal ways: 1. {{c3::The state space increases exponentially in dimension}} 2. {{c3::The geometry of high dimensional space is just different in a way that's counterintuitive: most vectors on the unit sphere are orthogonal to one another. Secondly there's more volume: for KNN you need to look further away to get k samples!}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 716, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(3393), 2.5f, 2, "The {{c1::curse of dimensionality}} refers to how {{c2::the geometry of high dimensional space conspires to make machine learning problems more difficult}}. This happens in two principal ways: 1. {{c3::The state space increases exponentially in dimension}} 2. {{c3::The geometry of high dimensional space is just different in a way that's counterintuitive: most vectors on the unit sphere are orthogonal to one another. Secondly there's more volume: for KNN you need to look further away to get k samples!}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 715, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(3288), 2.5f, 2, "The {{c1::curse of dimensionality}} refers to how {{c2::the geometry of high dimensional space conspires to make machine learning problems more difficult}}. This happens in two principal ways: 1. {{c3::The state space increases exponentially in dimension}} 2. {{c3::The geometry of high dimensional space is just different in a way that's counterintuitive: most vectors on the unit sphere are orthogonal to one another. Secondly there's more volume: for KNN you need to look further away to get k samples!}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 714, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(2695), 2.5f, 2, "If we {{c1::cannot represent or efficiently compute}} our cost function then we must use {{c2::a surrogate cost function}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 713, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(2659), 2.5f, 2, "If we {{c1::cannot represent or efficiently compute}} our cost function then we must use {{c2::a surrogate cost function}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 712, 4, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(2115), 2.5f, 2, "A deep learning system consists of four critical parts: 1. {{c1::The dataset}} 2. {{c2::An appropriate cost function}} 3. {{c3::An optimization procedure}} 4. {{c4::A model or statistical model}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 711, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(2079), 2.5f, 2, "A deep learning system consists of four critical parts: 1. {{c1::The dataset}} 2. {{c2::An appropriate cost function}} 3. {{c3::An optimization procedure}} 4. {{c4::A model or statistical model}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 710, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(2047), 2.5f, 2, "A deep learning system consists of four critical parts: 1. {{c1::The dataset}} 2. {{c2::An appropriate cost function}} 3. {{c3::An optimization procedure}} 4. {{c4::A model or statistical model}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 709, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(2008), 2.5f, 2, "A deep learning system consists of four critical parts: 1. {{c1::The dataset}} 2. {{c2::An appropriate cost function}} 3. {{c3::An optimization procedure}} 4. {{c4::A model or statistical model}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 708, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(1486), 2.5f, 2, "The {{c1::estimate of the gradient}} for a minibatch is given by {{c2::$\\boldsymbol{g}=\\frac{1}{m^{\\prime} } \\nabla_{\\boldsymbol{\\theta} } \\sum_{i=1}^{m^{\\prime} } L\\left(\\boldsymbol{x}^{(i)}, y^{(i)}, \\boldsymbol{\\theta}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 707, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(1320), 2.5f, 2, "The {{c1::estimate of the gradient}} for a minibatch is given by {{c2::$\\boldsymbol{g}=\\frac{1}{m^{\\prime} } \\nabla_{\\boldsymbol{\\theta} } \\sum_{i=1}^{m^{\\prime} } L\\left(\\boldsymbol{x}^{(i)}, y^{(i)}, \\boldsymbol{\\theta}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 706, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(764), 2.5f, 2, "Clustering is inherently {{c1::an ill-posed problem}} because {{c2::relationships between objects are often hierarchical}}. As an example suppose we want to cluster pictures of red cars, red trucks, black cards, and black trucks. This is related to the difference between {{c3::localized and distributed representations because by performing clustering we are forcing a localized representation onto our data}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 705, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(628), 2.5f, 2, "Clustering is inherently {{c1::an ill-posed problem}} because {{c2::relationships between objects are often hierarchical}}. As an example suppose we want to cluster pictures of red cars, red trucks, black cards, and black trucks. This is related to the difference between {{c3::localized and distributed representations because by performing clustering we are forcing a localized representation onto our data}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 704, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 863, DateTimeKind.Utc).AddTicks(566), 2.5f, 2, "Clustering is inherently {{c1::an ill-posed problem}} because {{c2::relationships between objects are often hierarchical}}. As an example suppose we want to cluster pictures of red cars, red trucks, black cards, and black trucks. This is related to the difference between {{c3::localized and distributed representations because by performing clustering we are forcing a localized representation onto our data}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 673, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 862, DateTimeKind.Utc).AddTicks(38), 2.5f, 2, "The {{c1::Gaussian kernel}} is defined by {{c2::$k(\\boldsymbol{u}, \\boldsymbol{v})=\\mathcal{N}\\left(\\boldsymbol{u}-\\boldsymbol{v} ; 0, \\sigma^{2} \\boldsymbol{I}\\right)$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 672, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 861, DateTimeKind.Utc).AddTicks(9213), 2.5f, 2, "For a {{c1::feature embedding}} {{c2::$\\phi(\\cdot)$ that embeds data into a different space}} we can define the {{c1::kernel function}} {{c2::$k\\left(\\boldsymbol{x}, \\boldsymbol{x}^{(i)}\\right)=\\phi(\\boldsymbol{x}) \\cdot \\phi\\left(\\boldsymbol{x}^{(i)}\\right)$}} of the mapping typically denoted {{c2::$K_{ij}$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 671, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 861, DateTimeKind.Utc).AddTicks(9145), 2.5f, 2, "For a {{c1::feature embedding}} {{c2::$\\phi(\\cdot)$ that embeds data into a different space}} we can define the {{c1::kernel function}} {{c2::$k\\left(\\boldsymbol{x}, \\boldsymbol{x}^{(i)}\\right)=\\phi(\\boldsymbol{x}) \\cdot \\phi\\left(\\boldsymbol{x}^{(i)}\\right)$}} of the mapping typically denoted {{c2::$K_{ij}$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 670, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 861, DateTimeKind.Utc).AddTicks(9024), 2.5f, 2, "For a {{c1::feature embedding}} {{c2::$\\phi(\\cdot)$ that embeds data into a different space}} we can define the {{c1::kernel function}} {{c2::$k\\left(\\boldsymbol{x}, \\boldsymbol{x}^{(i)}\\right)=\\phi(\\boldsymbol{x}) \\cdot \\phi\\left(\\boldsymbol{x}^{(i)}\\right)$}} of the mapping typically denoted {{c2::$K_{ij}$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 638, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(8757), 2.5f, 2, "If the true probability distribution {{c1::lies within the modeling family for some ideal parameter value $\\theta^*$}} then {{c2::the estimator produced by MLE is consistent}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 637, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(8702), 2.5f, 2, "If the true probability distribution {{c1::lies within the modeling family for some ideal parameter value $\\theta^*$}} then {{c2::the estimator produced by MLE is consistent}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 636, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(8028), 2.5f, 2, "How can we view linear regression as a MLE task?", new TimeSpan(0, 0, 10, 0, 0), 2, "In linear regression we assume that our data is parameterized by $p(y \\mid \\boldsymbol{x})=\\mathcal{N}\\left(y ; \\hat{y}(\\boldsymbol{x} ; \\boldsymbol{w}), \\sigma^{2}\\right)$ and we wish to produce a point estimator $\\hat{\\textbf{w}}$ of $w$. The MLE estimate is $\\begin{aligned}& \\sum_{i=1}^{m} \\log p\\left(y^{(i)} \\mid \\boldsymbol{x}^{(i)} ; \\boldsymbol{\\theta}\\right) \\\\=&-m \\log \\sigma-\\frac{m}{2} \\log (2 \\pi)-\\sum_{i=1}^{m} \\frac{\\left\\|\\hat{y}^{(i)}-y^{(i)}\\right\\|^{2}}{2 \\sigma^{2}}\\end{aligned}$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 635, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(7465), 2.5f, 2, "What is the maximum likelihood estimate in the case of supervised learning where we aim to model $P(\\textbf{y}\\mid\\textbf{x};\\theta)$?", new TimeSpan(0, 0, 10, 0, 0), 2, "If the data is independent and identically distributed then we have $\\boldsymbol{\\theta}_{\\mathrm{ML}}=\\underset{\\boldsymbol{\\theta}}{\\arg \\max } \\sum_{i=1}^{m} \\log P\\left(\\boldsymbol{y}^{(i)} \\mid \\boldsymbol{x}^{(i)} ; \\boldsymbol{\\theta}\\right)$" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 634, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(7068), 2.5f, 2, "By choosing the {{c2::MLE estimate}} for a point estimator we minimize {{c1::the dissimilarity between the empirical distribution and the model distribution, i.e. it minimizes the KL divergence}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 633, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(6945), 2.5f, 2, "By choosing the {{c2::MLE estimate}} for a point estimator we minimize {{c1::the dissimilarity between the empirical distribution and the model distribution, i.e. it minimizes the KL divergence}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 632, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(6441), 2.5f, 2, "If we have a set of m examples, $\\mathbb{X}=\\left\\{\\boldsymbol{x}^{(1)}, \\ldots, \\boldsymbol{x}^{(m)}\\right\\}$, drawn from $p_{\\text{data} }(\\textbf{x})$ we might wish to model the underlying distribution by $p_{\\text{model} }(\\textbf{x};\\theta)$. To do this we build an {{c1::estimator for $\\theta$}}. Maximum likelihood suggests taking {{c2::$\\begin{aligned}\\boldsymbol{\\theta}_{\\mathrm{ML} } &=\\underset{\\boldsymbol{\\theta} }{\\arg \\max } p_{\\text {model } }(\\mathbb{X} ; \\boldsymbol{\\theta}) \\\\&=\\underset{\\boldsymbol{\\theta} }{\\arg \\max } \\prod_{i=1}^{m} p_{\\operatorname{model} }\\left(\\boldsymbol{x}^{(i)} ; \\boldsymbol{\\theta}\\right)\\\\\\end{aligned}$}} which can be simplified as {{c2::$\\boldsymbol{\\theta}_{\\mathrm{ML} }=\\underset{\\boldsymbol{\\theta} }{\\arg \\max } \\mathbb{E}_{\\mathbf{x} \\sim \\hat{p}_{\\text {data } } } \\log p_{\\text {model } }(\\boldsymbol{x} ; \\boldsymbol{\\theta})$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 631, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(6244), 2.5f, 2, "If we have a set of m examples, $\\mathbb{X}=\\left\\{\\boldsymbol{x}^{(1)}, \\ldots, \\boldsymbol{x}^{(m)}\\right\\}$, drawn from $p_{\\text{data} }(\\textbf{x})$ we might wish to model the underlying distribution by $p_{\\text{model} }(\\textbf{x};\\theta)$. To do this we build an {{c1::estimator for $\\theta$}}. Maximum likelihood suggests taking {{c2::$\\begin{aligned}\\boldsymbol{\\theta}_{\\mathrm{ML} } &=\\underset{\\boldsymbol{\\theta} }{\\arg \\max } p_{\\text {model } }(\\mathbb{X} ; \\boldsymbol{\\theta}) \\\\&=\\underset{\\boldsymbol{\\theta} }{\\arg \\max } \\prod_{i=1}^{m} p_{\\operatorname{model} }\\left(\\boldsymbol{x}^{(i)} ; \\boldsymbol{\\theta}\\right)\\\\\\end{aligned}$}} which can be simplified as {{c2::$\\boldsymbol{\\theta}_{\\mathrm{ML} }=\\underset{\\boldsymbol{\\theta} }{\\arg \\max } \\mathbb{E}_{\\mathbf{x} \\sim \\hat{p}_{\\text {data } } } \\log p_{\\text {model } }(\\boldsymbol{x} ; \\boldsymbol{\\theta})$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 630, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(5932), 2.5f, 2, "If we have a set of m examples, $\\mathbb{X}=\\left\\{\\boldsymbol{x}^{(1)}, \\ldots, \\boldsymbol{x}^{(m)}\\right\\}$, drawn from $p_{\\text{data} }(\\textbf{x})$ we might wish to model the underlying distribution by $p_{\\text{model} }(\\textbf{x};\\theta)$. To do this we build an {{c1::estimator for $\\theta$}}. Maximum likelihood suggests taking {{c2::$\\begin{aligned}\\boldsymbol{\\theta}_{\\mathrm{ML} } &=\\underset{\\boldsymbol{\\theta} }{\\arg \\max } p_{\\text {model } }(\\mathbb{X} ; \\boldsymbol{\\theta}) \\\\&=\\underset{\\boldsymbol{\\theta} }{\\arg \\max } \\prod_{i=1}^{m} p_{\\operatorname{model} }\\left(\\boldsymbol{x}^{(i)} ; \\boldsymbol{\\theta}\\right)\\\\\\end{aligned}$}} which can be simplified as {{c2::$\\boldsymbol{\\theta}_{\\mathrm{ML} }=\\underset{\\boldsymbol{\\theta} }{\\arg \\max } \\mathbb{E}_{\\mathbf{x} \\sim \\hat{p}_{\\text {data } } } \\log p_{\\text {model } }(\\boldsymbol{x} ; \\boldsymbol{\\theta})$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 629, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(5240), 2.5f, 2, "A simple example of a point estimator that is unbiased but not consistent is {{c1::taking the first observed value as an estimate for the mean}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 628, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(4644), 2.5f, 2, "A point estimator is called {{c1::consistent}} if it {{c2::has the correct limit in probability}}, i.e. {{c2::$P\\left(\\left|\\hat{\\theta}_{m}-\\theta\\right|>\\epsilon\\right) \\rightarrow 0 \\text { as } m \\rightarrow \\infty$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 627, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(4531), 2.5f, 2, "A point estimator is called {{c1::consistent}} if it {{c2::has the correct limit in probability}}, i.e. {{c2::$P\\left(\\left|\\hat{\\theta}_{m}-\\theta\\right|>\\epsilon\\right) \\rightarrow 0 \\text { as } m \\rightarrow \\infty$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 626, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(4486), 2.5f, 2, "A point estimator is called {{c1::consistent}} if it {{c2::has the correct limit in probability}}, i.e. {{c2::$P\\left(\\left|\\hat{\\theta}_{m}-\\theta\\right|>\\epsilon\\right) \\rightarrow 0 \\text { as } m \\rightarrow \\infty$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 625, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(3954), 2.5f, 2, "{{c1::bias}} = {{c2::underfitting}} {{c1::variance}} = {{c2::overfitting}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 624, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(3933), 2.5f, 2, "{{c1::bias}} = {{c2::underfitting}} {{c1::variance}} = {{c2::overfitting}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 623, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(3886), 2.5f, 2, "{{c1::bias}} = {{c2::underfitting}} {{c1::variance}} = {{c2::overfitting}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 622, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(3864), 2.5f, 2, "{{c1::bias}} = {{c2::underfitting}} {{c1::variance}} = {{c2::overfitting}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 621, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(3404), 2.5f, 2, "How are variance and bias related for estimators? {{c1::$\\begin{aligned}\\mathrm{MSE} &=\\mathbb{E}\\left[\\left(\\hat{\\theta}_{m}-\\theta\\right)^{2}\\right] \\\\&=\\operatorname{Bias}\\left(\\hat{\\theta}_{m}\\right)^{2}+\\operatorname{Var}\\left(\\hat{\\theta}_{m}\\right)\\end{aligned}$}} This hints that we must sometimes {{c1::make a tradeoff between bias and variance}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 620, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(3353), 2.5f, 2, "How are variance and bias related for estimators? {{c1::$\\begin{aligned}\\mathrm{MSE} &=\\mathbb{E}\\left[\\left(\\hat{\\theta}_{m}-\\theta\\right)^{2}\\right] \\\\&=\\operatorname{Bias}\\left(\\hat{\\theta}_{m}\\right)^{2}+\\operatorname{Var}\\left(\\hat{\\theta}_{m}\\right)\\end{aligned}$}} This hints that we must sometimes {{c1::make a tradeoff between bias and variance}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 619, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(2434), 2.5f, 2, "If we take the frequentist lens then an estimator is {{c1::a random variable because the data is random}} and we can produce {{c1::the variance or standard deviation of the value of the estimator}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 618, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(2362), 2.5f, 2, "If we take the frequentist lens then an estimator is {{c1::a random variable because the data is random}} and we can produce {{c1::the variance or standard deviation of the value of the estimator}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 617, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(1806), 2.5f, 2, "An estimator is said to be {{c1::asymptotically unbiased}} if {{c2::in the limit of infinite data the bias converges to 0}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 616, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(1743), 2.5f, 2, "An estimator is said to be {{c1::asymptotically unbiased}} if {{c2::in the limit of infinite data the bias converges to 0}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 615, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(1199), 2.5f, 2, "Estimators that have zero bias are called {{c1::unbiased}}. This concept can be deceptive because {{c2::looking at just a single sample and ignoring further data}} is an {{c1::unbiased}} estimate of the mean.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 614, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(1183), 2.5f, 2, "Estimators that have zero bias are called {{c1::unbiased}}. This concept can be deceptive because {{c2::looking at just a single sample and ignoring further data}} is an {{c1::unbiased}} estimate of the mean.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 613, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(1116), 2.5f, 2, "Estimators that have zero bias are called {{c1::unbiased}}. This concept can be deceptive because {{c2::looking at just a single sample and ignoring further data}} is an {{c1::unbiased}} estimate of the mean.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 612, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(641), 2.5f, 2, "The bias of an estimator is defined through {{c1::$\\operatorname{bias}\\left(\\hat{\\boldsymbol{\\theta} }_{m}\\right)=\\mathbb{E}\\left(\\hat{\\boldsymbol{\\theta}}_{m}\\right)-\\boldsymbol{\\theta}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 639, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(9205), 2.5f, 2, "{{c1::MLE}} = {{c2::maximum likelihood estimation}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1951, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 901, DateTimeKind.Utc).AddTicks(112), 2.5f, 2, "\"A method can become an {{c1::extension method}} if 1. {{c2::it's declared in a static class}} 2. {{c3::the method is static}} 3. {{c3::the first parameter has the keyword \"\"this\"\" in front of it}}\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 640, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(9244), 2.5f, 2, "{{c1::MLE}} = {{c2::maximum likelihood estimation}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 642, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(9831), 2.5f, 2, "Two estimators can differ in their {{c1::statistic efficiency}} meaning that {{c2::one estimator may still perofrm better in the limit of smaller sample sizes}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 669, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 861, DateTimeKind.Utc).AddTicks(9000), 2.5f, 2, "For a {{c1::feature embedding}} {{c2::$\\phi(\\cdot)$ that embeds data into a different space}} we can define the {{c1::kernel function}} {{c2::$k\\left(\\boldsymbol{x}, \\boldsymbol{x}^{(i)}\\right)=\\phi(\\boldsymbol{x}) \\cdot \\phi\\left(\\boldsymbol{x}^{(i)}\\right)$}} of the mapping typically denoted {{c2::$K_{ij}$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 668, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 861, DateTimeKind.Utc).AddTicks(8937), 2.5f, 2, "For a {{c1::feature embedding}} {{c2::$\\phi(\\cdot)$ that embeds data into a different space}} we can define the {{c1::kernel function}} {{c2::$k\\left(\\boldsymbol{x}, \\boldsymbol{x}^{(i)}\\right)=\\phi(\\boldsymbol{x}) \\cdot \\phi\\left(\\boldsymbol{x}^{(i)}\\right)$}} of the mapping typically denoted {{c2::$K_{ij}$}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 667, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 861, DateTimeKind.Utc).AddTicks(8371), 2.5f, 2, "The kernel trick applies when {{c1::we can write our algorithm entirely in terms of dot products between training examples. To construct the algorithm we write our point estimates for the model parameters in terms of a linear combination of the examples seen in each update step}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 666, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 861, DateTimeKind.Utc).AddTicks(7293), 2.5f, 2, "Models that {{c1::ultimately make linear predictions}} can be made to have much higher capacity by using the {{c2::Kernel trick}} which amounts to {{c2::designing a possibly infinite dimensional feature mapping over the input data}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 665, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 861, DateTimeKind.Utc).AddTicks(7209), 2.5f, 2, "Models that {{c1::ultimately make linear predictions}} can be made to have much higher capacity by using the {{c2::Kernel trick}} which amounts to {{c2::designing a possibly infinite dimensional feature mapping over the input data}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 664, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 861, DateTimeKind.Utc).AddTicks(7186), 2.5f, 2, "Models that {{c1::ultimately make linear predictions}} can be made to have much higher capacity by using the {{c2::Kernel trick}} which amounts to {{c2::designing a possibly infinite dimensional feature mapping over the input data}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 663, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 861, DateTimeKind.Utc).AddTicks(6646), 2.5f, 2, "{{c1::Support vector machine}} = {{c2::SVM}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 662, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 861, DateTimeKind.Utc).AddTicks(6632), 2.5f, 2, "{{c1::Support vector machine}} = {{c2::SVM}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 661, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 861, DateTimeKind.Utc).AddTicks(6151), 2.5f, 2, "The guiding intuition for {{c1::support vector machines}} is that {{c2::for linearly separable data, not all partitioning hyperplanes are equal. It is typically better to pick one that separates the data by a large margin}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 660, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 861, DateTimeKind.Utc).AddTicks(5996), 2.5f, 2, "The guiding intuition for {{c1::support vector machines}} is that {{c2::for linearly separable data, not all partitioning hyperplanes are equal. It is typically better to pick one that separates the data by a large margin}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 659, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 861, DateTimeKind.Utc).AddTicks(5464), 2.5f, 2, "The relationship between linear and logistic regression is that {{c1::both can be viewed as a generalized linear model with a particular distribution of the predictions. In the case of linear regression they are normally distributed whereas in logistic regression they are Bernoulli.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 658, 0, 1, new DateTime(2020, 10, 10, 23, 1, 42, 861, DateTimeKind.Utc).AddTicks(4563), 2.5f, 2, "Do all regularization penalties correspond to MAP Bayesian inference?", new TimeSpan(0, 0, 10, 0, 0), 2, "No certainly not. We can choose a regularization term that depends on the data or cannot be written as a Bayesian prior. As an example in the case of Echo State Networks we impose a regularization term on the gradient change at each layer (or at least approximately)." });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 657, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 861, DateTimeKind.Utc).AddTicks(4206), 2.5f, 2, "The relationship between the MAP and MLE estimates is that there an extra term {{c1::$\\log p(\\boldsymbol{\\theta}$}} in {{c1::the MAP estimate}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 656, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 861, DateTimeKind.Utc).AddTicks(4179), 2.5f, 2, "The relationship between the MAP and MLE estimates is that there an extra term {{c1::$\\log p(\\boldsymbol{\\theta}$}} in {{c1::the MAP estimate}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 655, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 861, DateTimeKind.Utc).AddTicks(3646), 2.5f, 2, "Maximum a posterior (MAP) estimation provides a compromise between MLE and using the entire distribution for Bayesian inference. MAP estimation chooses {{c1::the mode of the posterior distribution}} which mathematically takes the form {{c1::$p\\left(x^{(m+1)} \\mid x^{(1)}, \\ldots, x^{(m)}\\right)=\\int p\\left(x^{(m+1)} \\mid \\boldsymbol{\\theta}\\right) p\\left(\\boldsymbol{\\theta} \\mid x^{(1)}, \\ldots, x^{(m)}\\right) d \\boldsymbol{\\theta}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 654, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 861, DateTimeKind.Utc).AddTicks(3415), 2.5f, 2, "Maximum a posterior (MAP) estimation provides a compromise between MLE and using the entire distribution for Bayesian inference. MAP estimation chooses {{c1::the mode of the posterior distribution}} which mathematically takes the form {{c1::$p\\left(x^{(m+1)} \\mid x^{(1)}, \\ldots, x^{(m)}\\right)=\\int p\\left(x^{(m+1)} \\mid \\boldsymbol{\\theta}\\right) p\\left(\\boldsymbol{\\theta} \\mid x^{(1)}, \\ldots, x^{(m)}\\right) d \\boldsymbol{\\theta}$}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 653, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 861, DateTimeKind.Utc).AddTicks(2781), 2.5f, 2, "There are two significant differences between the Bayesian estimation approach and MLE: 1. In the Bayesian approach {{c1::we use the full distribution of the parameter to make predictions. I.e. $p\\left(x^{(m+1)} \\mid x^{(1)}, \\ldots, x^{(m)}\\right)=\\int p\\left(x^{(m+1)} \\mid \\boldsymbol{\\theta}\\right) p\\left(\\boldsymbol{\\theta} \\mid x^{(1)}, \\ldots, x^{(m)}\\right) d \\boldsymbol{\\theta}$}} 2. In the Bayesian approach {{c2::we can cleverly set the prior to encode constraints, inductive bias, or regularization}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 652, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 861, DateTimeKind.Utc).AddTicks(2688), 2.5f, 2, "There are two significant differences between the Bayesian estimation approach and MLE: 1. In the Bayesian approach {{c1::we use the full distribution of the parameter to make predictions. I.e. $p\\left(x^{(m+1)} \\mid x^{(1)}, \\ldots, x^{(m)}\\right)=\\int p\\left(x^{(m+1)} \\mid \\boldsymbol{\\theta}\\right) p\\left(\\boldsymbol{\\theta} \\mid x^{(1)}, \\ldots, x^{(m)}\\right) d \\boldsymbol{\\theta}$}} 2. In the Bayesian approach {{c2::we can cleverly set the prior to encode constraints, inductive bias, or regularization}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 651, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 861, DateTimeKind.Utc).AddTicks(1586), 2.5f, 2, "When thinking about parameters and data, the difference between Bayesian and frequentist standpoints can be boiled down to: in the Bayesian world, the data {{c1::is fixed}} and the model {{c1::is considered random or at least the parameters of it are}}, while in the frequentist world the model parameters {{c1::are fixed}} and the data {{c1::is considered random}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 650, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 861, DateTimeKind.Utc).AddTicks(1559), 2.5f, 2, "When thinking about parameters and data, the difference between Bayesian and frequentist standpoints can be boiled down to: in the Bayesian world, the data {{c1::is fixed}} and the model {{c1::is considered random or at least the parameters of it are}}, while in the frequentist world the model parameters {{c1::are fixed}} and the data {{c1::is considered random}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 649, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 861, DateTimeKind.Utc).AddTicks(1541), 2.5f, 2, "When thinking about parameters and data, the difference between Bayesian and frequentist standpoints can be boiled down to: in the Bayesian world, the data {{c1::is fixed}} and the model {{c1::is considered random or at least the parameters of it are}}, while in the frequentist world the model parameters {{c1::are fixed}} and the data {{c1::is considered random}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 648, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 861, DateTimeKind.Utc).AddTicks(1477), 2.5f, 2, "When thinking about parameters and data, the difference between Bayesian and frequentist standpoints can be boiled down to: in the Bayesian world, the data {{c1::is fixed}} and the model {{c1::is considered random or at least the parameters of it are}}, while in the frequentist world the model parameters {{c1::are fixed}} and the data {{c1::is considered random}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 647, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 861, DateTimeKind.Utc).AddTicks(994), 2.5f, 2, "An estimator that achieves the {{c1::Cramér-Rao bound}} is called {{c2::efficient}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 646, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 861, DateTimeKind.Utc).AddTicks(973), 2.5f, 2, "An estimator that achieves the {{c1::Cramér-Rao bound}} is called {{c2::efficient}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 645, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 861, DateTimeKind.Utc).AddTicks(451), 2.5f, 2, "The {{c1::Cramér Rao bound}} shows that {{c2::no consistent estimator has lower mean MSE than the MLE.}} Any estimator achieving this {{c2::bound is said to be efficient.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 644, 2, 1, new DateTime(2020, 10, 10, 23, 1, 42, 861, DateTimeKind.Utc).AddTicks(381), 2.5f, 2, "The {{c1::Cramér Rao bound}} shows that {{c2::no consistent estimator has lower mean MSE than the MLE.}} Any estimator achieving this {{c2::bound is said to be efficient.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 643, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 861, DateTimeKind.Utc).AddTicks(316), 2.5f, 2, "The {{c1::Cramér Rao bound}} shows that {{c2::no consistent estimator has lower mean MSE than the MLE.}} Any estimator achieving this {{c2::bound is said to be efficient.}}", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 641, 1, 1, new DateTime(2020, 10, 10, 23, 1, 42, 860, DateTimeKind.Utc).AddTicks(9747), 2.5f, 2, "Two estimators can differ in their {{c1::statistic efficiency}} meaning that {{c2::one estimator may still perofrm better in the limit of smaller sample sizes}}.", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "Cards",
                columns: new[] { "Id", "ClozeItem", "CreatorId", "DueAt", "Ease", "Engine", "FrontText", "Interval", "Kind", "RearText" },
                values: new object[] { 1952, 3, 1, new DateTime(2020, 10, 10, 23, 1, 42, 901, DateTimeKind.Utc).AddTicks(179), 2.5f, 2, "\"A method can become an {{c1::extension method}} if 1. {{c2::it's declared in a static class}} 2. {{c3::the method is static}} 3. {{c3::the first parameter has the keyword \"\"this\"\" in front of it}}\"", new TimeSpan(0, 0, 10, 0, 0), 1, "" });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 69, 1 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1321, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1322, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1322, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1323, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1323, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1324, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1324, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1325, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1325, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1326, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1326, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1321, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1327, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1328, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1328, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1329, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1329, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1330, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1330, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1331, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1331, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1332, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1332, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1333, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1327, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1320, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1320, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1319, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1307, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1307, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1308, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1308, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1309, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1309, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1310, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1310, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1311, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1311, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1312, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1312, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1313, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1313, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1314, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1314, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1315, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1315, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1316, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1316, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1317, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1317, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1318, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1318, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1319, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1333, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1306, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1334, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1335, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1350, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1350, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1351, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1351, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1352, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1352, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1353, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1353, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1354, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1354, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1355, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1349, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1355, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1356, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1357, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1357, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1358, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1358, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1359, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1359, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1360, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1360, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1361, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1361, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1356, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1349, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1348, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1348, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1335, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1336, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1336, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1337, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1337, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1338, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1338, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1339, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1339, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1340, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1340, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1341, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1341, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1342, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1342, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1343, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1343, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1344, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1344, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1345, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1345, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1346, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1346, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1347, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1347, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1334, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1362, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1306, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1305, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1263, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1264, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1264, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1265, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1265, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1266, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1266, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1267, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1267, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1268, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1268, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1263, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1269, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1270, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1270, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1271, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1271, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1272, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1272, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1273, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1273, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1274, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1274, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1275, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1269, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1262, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1262, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1261, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1249, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1249, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1250, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1250, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1251, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1251, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1252, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1252, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1253, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1253, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1254, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1254, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1255, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1255, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1256, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1256, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1257, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1257, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1258, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1258, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1259, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1259, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1260, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1260, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1261, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1275, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1305, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1276, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1277, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1293, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1293, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1294, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1294, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1295, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1295, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1296, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1296, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1297, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1297, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1298, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1292, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1298, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1299, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1300, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1300, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1301, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1301, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1302, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1302, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1303, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1303, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1304, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1304, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1299, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1292, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1291, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1291, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1277, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1278, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1278, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1279, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1279, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1280, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1280, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1281, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1281, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1282, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1282, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1284, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1284, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1285, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1285, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1286, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1286, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1287, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1287, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1288, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1288, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1289, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1289, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1290, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1290, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1276, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1248, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1362, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1363, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1435, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1436, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1436, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1437, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1437, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1438, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1438, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1439, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1439, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1440, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1440, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1435, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1441, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1442, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1442, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1443, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1443, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1444, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1444, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1445, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1445, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1446, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1446, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1447, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1441, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1434, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1434, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1433, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1421, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1421, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1422, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1422, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1423, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1423, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1424, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1424, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1425, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1425, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1426, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1426, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1427, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1427, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1428, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1428, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1429, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1429, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1430, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1430, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1431, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1431, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1432, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1432, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1433, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1447, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1420, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1448, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1449, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1459, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1459, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1460, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1460, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1460, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1461, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1461, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1461, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1462, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1462, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1462, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1459, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1463, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1463, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1464, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1464, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1464, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1465, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1465, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1465, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1466, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1466, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1466, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1467, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1463, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1458, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1458, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1458, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1449, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1450, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1450, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1450, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1451, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1451, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1451, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1452, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1452, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1452, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1453, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1453, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1453, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1454, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1454, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1454, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1455, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1455, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1455, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1456, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1456, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1456, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1457, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1457, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1457, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1448, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1363, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1420, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1419, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1378, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1379, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1379, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1380, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1380, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1381, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1381, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1382, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1382, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1383, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1383, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1378, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1384, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1385, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1385, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1386, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1386, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1387, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1387, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1388, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1388, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1389, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1389, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1390, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1384, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1377, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1377, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1376, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1364, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1364, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1365, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1365, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1366, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1366, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1367, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1367, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1368, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1368, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1369, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1369, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1370, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1370, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1371, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1371, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1372, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1372, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1373, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1373, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1374, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1374, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1375, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1375, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1376, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1390, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1419, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1391, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1392, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1407, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1407, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1408, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1408, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1409, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1409, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1410, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1410, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1411, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1411, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1412, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1406, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1412, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1413, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1414, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1414, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1415, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1415, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1416, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1416, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1417, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1417, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1418, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1418, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1413, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1406, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1405, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1405, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1392, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1393, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1393, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1394, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1394, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1395, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1395, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1396, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1396, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1397, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1397, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1398, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1398, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1399, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1399, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1400, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1400, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1401, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1401, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1402, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1402, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1403, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1403, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1404, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1404, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1391, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1467, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1248, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1247, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1092, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1093, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1093, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1094, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1094, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1095, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1095, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1096, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1096, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1097, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1097, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1092, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1098, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1099, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1099, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1100, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1100, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1101, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1101, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1102, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1102, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1103, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1103, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1104, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1098, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1091, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1091, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1090, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1078, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1078, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1079, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1079, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1080, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1080, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1081, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1081, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1082, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1082, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1083, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1083, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1084, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1084, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1085, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1085, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1086, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1086, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1087, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1087, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1088, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1088, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1089, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1089, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1090, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1104, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1077, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1105, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1106, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1121, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1121, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1122, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1122, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1123, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1123, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1124, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1124, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1125, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1125, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1126, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1120, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1126, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1127, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1128, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1128, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1129, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1129, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1130, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1130, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1131, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1131, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1132, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1132, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1127, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1120, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1119, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1119, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1106, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1107, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1107, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1108, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1108, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1109, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1109, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1110, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1110, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1111, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1111, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1112, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1112, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1113, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1113, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1114, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1114, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1115, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1115, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1116, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1116, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1117, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1117, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1118, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1118, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1105, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1133, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1077, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1076, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1035, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1036, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1036, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1037, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1037, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1038, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1038, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1039, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1039, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1040, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1040, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1035, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1041, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1042, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1042, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1043, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1043, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1044, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1044, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1045, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1045, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1046, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1046, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1047, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1041, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1034, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1034, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1033, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1021, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1021, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1022, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1022, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1023, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1023, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1024, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1024, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1025, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1025, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1026, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1026, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1027, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1027, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1028, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1028, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1029, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1029, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1030, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1030, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1031, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1031, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1032, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1032, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1033, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1047, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1076, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1048, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1049, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1064, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1064, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1065, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1065, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1066, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1066, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1067, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1067, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1068, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1068, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1069, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1063, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1069, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1070, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1071, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1071, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1072, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1072, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1073, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1073, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1074, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1074, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1075, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1075, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1070, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1063, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1062, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1062, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1049, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1050, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1050, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1051, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1051, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1052, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1052, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1053, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1053, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1054, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1054, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1055, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1055, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1056, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1056, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1057, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1057, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1058, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1058, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1059, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1059, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1060, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1060, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1061, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1061, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1048, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1247, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1133, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1134, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1206, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1207, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1207, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1208, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1208, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1209, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1209, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1210, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1210, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1211, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1211, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1206, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1212, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1213, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1213, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1214, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1214, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1215, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1215, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1216, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1216, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1217, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1217, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1218, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1212, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1205, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1205, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1204, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1192, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1192, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1193, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1193, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1194, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1194, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1195, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1195, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1196, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1196, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1197, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1197, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1198, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1198, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1199, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1199, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1200, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1200, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1201, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1201, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1202, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1202, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1203, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1203, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1204, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1218, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1191, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1219, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1220, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1235, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1235, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1236, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1236, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1237, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1237, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1238, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1238, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1239, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1239, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1240, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1234, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1240, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1241, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1242, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1242, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1243, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1243, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1244, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1244, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1245, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1245, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1246, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1246, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1241, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1234, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1233, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1233, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1220, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1221, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1221, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1222, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1222, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1223, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1223, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1224, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1224, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1225, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1225, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1226, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1226, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1227, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1227, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1228, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1228, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1229, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1229, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1230, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1230, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1231, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1231, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1232, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1232, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1219, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1134, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1191, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1190, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1149, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1150, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1150, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1151, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1151, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1152, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1152, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1153, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1153, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1154, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1154, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1149, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1155, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1156, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1156, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1157, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1157, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1158, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1158, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1159, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1159, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1160, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1160, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1161, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1155, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1148, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1148, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1147, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1135, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1135, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1136, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1136, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1137, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1137, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1138, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1138, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1139, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1139, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1140, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1140, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1141, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1141, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1142, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1142, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1143, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1143, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1144, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1144, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1145, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1145, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1146, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1146, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1147, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1161, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1190, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1162, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1163, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1178, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1178, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1179, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1179, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1180, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1180, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1181, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1181, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1182, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1182, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1183, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1177, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1183, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1184, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1185, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1185, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1186, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1186, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1187, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1187, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1188, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1188, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1189, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1189, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1184, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1177, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1176, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1176, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1163, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1164, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1164, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1165, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1165, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1166, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1166, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1167, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1167, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1168, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1168, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1169, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1169, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1170, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1170, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1171, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1171, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1172, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1172, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1173, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1173, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1174, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1174, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1175, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1175, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1162, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1020, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1467, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1468, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1768, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1769, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1769, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1770, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1770, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1771, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1771, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1772, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1772, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1773, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1773, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1768, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1774, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1775, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1775, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1776, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1776, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1777, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1777, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1778, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1778, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1779, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1779, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1780, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1774, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1767, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1767, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1766, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1748, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1749, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1755, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1755, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1756, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1756, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1757, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1757, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1758, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1758, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1759, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1759, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1760, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1760, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1761, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1761, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1762, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1762, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1763, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1763, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1764, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1764, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1765, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1765, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1766, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1780, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1747, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1781, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1782, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1798, 42 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1798, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1799, 42 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1799, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1800, 42 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1800, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1801, 42 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1801, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1802, 42 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1802, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1803, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1797, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1804, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1810, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1811, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1812, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1813, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1814, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1815, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1816, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1817, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1818, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1819, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1820, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1805, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1797, 42 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1796, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1796, 42 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1782, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1783, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1783, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1784, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1784, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1785, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1785, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1786, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1786, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1787, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1787, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1788, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1788, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1789, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1789, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1790, 39 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1790, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1791, 41 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1792, 41 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1793, 42 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1793, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1794, 42 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1794, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1795, 42 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1795, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1781, 40 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1821, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1746, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1744, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1666, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1667, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1668, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1669, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1670, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1671, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1672, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1673, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1674, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1675, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1676, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1659, 33 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1677, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1679, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1680, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1681, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1682, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1683, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1684, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1685, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1686, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1687, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1688, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1689, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1678, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1658, 33 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1653, 32 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1653, 31 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1640, 32 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1641, 31 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1641, 32 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1642, 31 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1642, 32 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1643, 31 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1643, 32 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1644, 31 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1644, 32 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1645, 31 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1645, 32 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1646, 31 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1646, 32 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1647, 31 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1647, 32 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1648, 31 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1648, 32 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1649, 31 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1649, 32 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1650, 31 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1650, 32 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1651, 31 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1651, 32 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1652, 31 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1652, 32 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1690, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1745, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1691, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1693, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1720, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1721, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1722, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1723, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1724, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1725, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1726, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1727, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1728, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1729, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1730, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1719, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1731, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1733, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1734, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1735, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1736, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1737, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1738, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1739, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1740, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1741, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1742, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1743, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1732, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1718, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1717, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1716, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1694, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1695, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1696, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1697, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1698, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1699, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1700, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1701, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1702, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1703, 35 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1706, 36 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1706, 37 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1707, 36 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1707, 37 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1708, 36 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1708, 37 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1709, 36 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1709, 37 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1710, 36 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1710, 37 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1711, 36 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1711, 37 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1713, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1714, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1715, 38 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1692, 34 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1640, 31 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1822, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1824, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1911, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1912, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1912, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1913, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1913, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1914, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1914, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1915, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1915, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1916, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1916, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1911, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1917, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1918, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1918, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1919, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1919, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1920, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1920, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1921, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1921, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1922, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1922, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1923, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1917, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1910, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1910, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1909, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1897, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1897, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1898, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1898, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1899, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1899, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1900, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1900, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1901, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1901, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1902, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1902, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1903, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1903, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1904, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1904, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1905, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1905, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1906, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1906, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1907, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1907, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1908, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1908, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1909, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1923, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1896, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1924, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1925, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1940, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1940, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1941, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1941, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1942, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1942, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1943, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1943, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1944, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1944, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1945, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1939, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1945, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1946, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1947, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1947, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1948, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1948, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1949, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1949, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1950, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1950, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1951, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1951, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1946, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1939, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1938, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1938, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1925, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1926, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1926, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1927, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1927, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1928, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1928, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1929, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1929, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1930, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1930, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1931, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1931, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1932, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1932, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1933, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1933, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1934, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1934, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1935, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1935, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1936, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1936, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1937, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1937, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1924, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1823, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1896, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1895, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1851, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1852, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1852, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1853, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1853, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1854, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1854, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1855, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1855, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1856, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1856, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1851, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1857, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1858, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1858, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1859, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1859, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1860, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1860, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1861, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1861, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1862, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1862, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1863, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1857, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1850, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1850, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1849, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1825, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1826, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1827, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1828, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1829, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1830, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1831, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1832, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1833, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1834, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1835, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1836, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1837, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1838, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1839, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1840, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1841, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1842, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1843, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1844, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1845, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1846, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1847, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1848, 43 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1849, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1863, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1895, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1864, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1865, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1880, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1881, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1884, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1884, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1885, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1885, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1886, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1886, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1887, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1887, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1888, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1879, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1888, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1889, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1890, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1890, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1891, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1891, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1892, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1892, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1893, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1893, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1894, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1894, 46 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1889, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1879, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1878, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1878, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1865, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1866, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1866, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1867, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1867, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1868, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1868, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1869, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1869, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1870, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1870, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1871, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1871, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1872, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1872, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1873, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1873, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1874, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1874, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1875, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1875, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1876, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1876, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1877, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1877, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1864, 44 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1468, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1639, 32 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1638, 32 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1516, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1516, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1517, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1517, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1517, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1518, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1518, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1518, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1519, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1519, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1519, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1516, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1520, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1520, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1521, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1521, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1521, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1522, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1522, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1522, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1523, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1523, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1523, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1524, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1520, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1515, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1515, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1515, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1506, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1507, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1507, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1507, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1508, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1508, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1508, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1509, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1509, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1509, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1510, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1510, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1510, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1511, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1511, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1511, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1512, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1512, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1512, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1513, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1513, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1513, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1514, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1514, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1514, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1524, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1506, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1524, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1525, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1535, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1535, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1536, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1536, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1536, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1537, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1537, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1537, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1538, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1538, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1538, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1535, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1539, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1539, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1540, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1540, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1540, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1541, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1541, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1541, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1542, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1542, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1542, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1543, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1539, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1534, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1534, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1534, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1525, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1526, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1526, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1526, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1527, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1527, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1527, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1528, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1528, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1528, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1529, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1529, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1529, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1530, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1530, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1530, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1531, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1531, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1531, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1532, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1532, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1532, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1533, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1533, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1533, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1525, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1543, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1506, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1505, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1478, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1478, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1479, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1479, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1479, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1480, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1480, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1480, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1481, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1481, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1481, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1478, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1482, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1482, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1483, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1483, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1483, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1484, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1484, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1484, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1485, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1485, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1485, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1486, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1482, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1477, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1477, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1477, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1468, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1469, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1469, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1469, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1470, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1470, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1470, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1471, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1471, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1471, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1472, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1472, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1472, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1473, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1473, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1473, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1474, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1474, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1474, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1475, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1475, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1475, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1476, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1476, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1476, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1486, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1505, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1486, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1487, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1497, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1497, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1498, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1498, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1498, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1499, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1499, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1499, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1500, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1500, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1500, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1497, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1501, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1501, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1502, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1502, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1502, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1503, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1503, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1503, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1504, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1504, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1504, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1505, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1501, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1496, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1496, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1496, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1487, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1488, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1488, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1488, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1489, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1489, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1489, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1490, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1490, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1490, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1491, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1491, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1491, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1492, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1492, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1492, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1493, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1493, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1493, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1494, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1494, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1494, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1495, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1495, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1495, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1487, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1639, 31 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1543, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1544, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1592, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1592, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1593, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1593, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1593, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1594, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1594, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1594, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1595, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1595, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1595, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1592, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1601, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1601, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1602, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1602, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1602, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1603, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1603, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1603, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1604, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1604, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1604, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1605, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1601, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1591, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1591, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1591, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1582, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1583, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1583, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1583, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1584, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1584, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1584, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1585, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1585, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1585, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1586, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1586, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1586, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1587, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1587, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1587, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1588, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1588, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1588, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1589, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1589, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1589, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1590, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1590, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1590, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1605, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1582, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1605, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1606, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1625, 29 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1626, 29 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1627, 29 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1628, 31 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1628, 32 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1629, 31 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1629, 32 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1630, 31 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1630, 32 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1631, 31 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1631, 32 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1624, 29 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1632, 31 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1633, 31 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1633, 32 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1634, 31 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1634, 32 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1635, 31 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1635, 32 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1636, 31 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1636, 32 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1637, 31 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1637, 32 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1638, 31 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1632, 32 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1623, 29 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1622, 29 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1621, 29 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1606, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1607, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1607, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1607, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1608, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1608, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1608, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1609, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1609, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1609, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1610, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1610, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1610, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1611, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1611, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1611, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1612, 29 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1613, 29 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1614, 30 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1615, 30 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1616, 30 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1617, 29 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1618, 29 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1619, 29 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1620, 29 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1606, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1544, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1582, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1581, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1554, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1554, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1555, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1555, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1555, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1556, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1556, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1556, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1557, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1557, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1557, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1554, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1558, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1558, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1559, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1559, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1559, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1560, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1560, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1560, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1561, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1561, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1561, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1562, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1558, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1553, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1553, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1553, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1544, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1545, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1545, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1545, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1546, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1546, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1546, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1547, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1547, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1547, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1548, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1548, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1548, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1549, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1549, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1549, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1550, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1550, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1550, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1551, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1551, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1551, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1552, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1552, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1552, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1562, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1581, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1562, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1563, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1573, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1573, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1574, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1574, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1574, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1575, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1575, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1575, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1576, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1576, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1576, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1573, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1577, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1577, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1578, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1578, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1578, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1579, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1579, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1579, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1580, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1580, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1580, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1581, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1577, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1572, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1572, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1572, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1563, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1564, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1564, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1564, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1565, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1565, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1565, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1566, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1566, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1566, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1567, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1567, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1567, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1568, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1568, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1568, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1569, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1569, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1569, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1570, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1570, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1570, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1571, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1571, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1571, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1563, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1020, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1019, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1019, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 421, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 421, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 422, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 422, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 423, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 423, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 424, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 424, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 425, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 425, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 426, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 420, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 426, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 427, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 428, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 428, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 429, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 429, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 430, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 430, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 431, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 431, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 432, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 432, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 427, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 420, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 419, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 419, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 406, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 407, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 407, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 408, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 408, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 409, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 409, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 410, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 410, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 411, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 411, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 412, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 412, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 413, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 413, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 414, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 414, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 415, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 415, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 416, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 416, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 417, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 417, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 418, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 418, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 433, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 406, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 433, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 434, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 449, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 450, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 450, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 451, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 451, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 452, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 452, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 453, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 453, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 454, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 454, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 449, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 455, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 456, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 456, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 457, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 457, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 458, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 458, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 459, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 459, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 460, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 460, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 461, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 455, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 448, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 448, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 447, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 435, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 435, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 436, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 436, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 437, 26 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 437, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 438, 26 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 438, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 439, 26 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 439, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 440, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 440, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 441, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 441, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 442, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 442, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 443, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 443, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 444, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 444, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 445, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 445, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 446, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 446, 25 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 447, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 434, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 461, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 405, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 404, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 364, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 364, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 365, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 365, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 366, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 366, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 367, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 367, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 368, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 368, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 369, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 363, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 369, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 370, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 371, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 371, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 372, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 372, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 373, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 373, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 374, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 374, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 375, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 375, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 370, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 363, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 362, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 362, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 350, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 350, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 351, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 351, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 352, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 352, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 353, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 353, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 353, 14 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 354, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 354, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 355, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 355, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 356, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 356, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 357, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 357, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 358, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 358, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 359, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 359, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 360, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 360, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 361, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 361, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 376, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 405, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 376, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 377, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 392, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 393, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 393, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 394, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 394, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 395, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 395, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 396, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 396, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 397, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 397, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 392, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 398, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 399, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 399, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 400, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 400, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 401, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 401, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 402, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 402, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 403, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 403, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 404, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 398, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 391, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 391, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 390, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 378, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 378, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 379, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 379, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 380, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 380, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 381, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 381, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 382, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 382, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 383, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 383, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 384, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 384, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 385, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 385, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 386, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 386, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 387, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 387, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 388, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 388, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 389, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 389, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 390, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 377, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 349, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 462, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 463, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 535, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 535, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 536, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 536, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 537, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 537, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 538, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 538, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 539, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 539, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 540, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 534, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 540, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 541, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 542, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 542, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 543, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 543, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 544, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 544, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 545, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 545, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 546, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 546, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 541, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 534, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 533, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 533, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 520, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 521, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 521, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 522, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 522, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 523, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 523, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 524, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 524, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 525, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 525, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 526, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 526, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 527, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 527, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 528, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 528, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 529, 27 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 529, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 530, 27 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 530, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 531, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 531, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 532, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 532, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 547, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 520, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 547, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 548, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 563, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 564, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 564, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 565, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 565, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 566, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 566, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 567, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 567, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 568, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 568, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 563, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 569, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 570, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 570, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 571, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 571, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 572, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 572, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 573, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 573, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 574, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 574, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 575, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 569, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 562, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 562, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 561, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 549, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 549, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 550, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 550, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 551, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 551, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 552, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 552, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 553, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 553, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 554, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 554, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 555, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 555, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 556, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 556, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 557, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 557, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 558, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 558, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 559, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 559, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 560, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 560, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 561, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 548, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 462, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 519, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 518, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 478, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 478, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 479, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 479, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 480, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 480, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 481, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 481, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 482, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 482, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 483, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 477, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 483, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 484, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 485, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 485, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 486, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 486, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 487, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 487, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 488, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 488, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 489, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 489, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 484, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 477, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 476, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 476, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 463, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 464, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 464, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 465, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 465, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 466, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 466, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 467, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 467, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 468, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 468, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 469, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 469, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 470, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 470, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 471, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 471, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 472, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 472, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 473, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 473, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 474, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 474, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 475, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 475, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 490, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 519, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 490, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 491, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 506, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 507, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 507, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 508, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 508, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 509, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 509, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 510, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 510, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 511, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 511, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 506, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 512, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 513, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 513, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 514, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 514, 20 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 515, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 515, 20 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 516, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 516, 20 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 517, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 517, 20 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 518, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 512, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 505, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 505, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 504, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 492, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 492, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 493, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 493, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 494, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 494, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 495, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 495, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 496, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 496, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 497, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 497, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 498, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 498, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 499, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 499, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 500, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 500, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 501, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 501, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 502, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 502, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 503, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 503, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 504, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 491, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 575, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 349, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 348, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 192, 15 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 192, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 193, 15 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 193, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 194, 15 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 194, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 195, 15 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 195, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 196, 15 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 196, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 197, 15 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 191, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 197, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 199, 17 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 200, 17 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 201, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 202, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 203, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 204, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 205, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 206, 19 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 206, 20 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 207, 19 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 207, 20 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 198, 17 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 191, 15 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 190, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 190, 15 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 177, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 178, 15 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 178, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 179, 15 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 179, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 180, 15 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 180, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 181, 15 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 181, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 182, 15 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 182, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 183, 15 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 183, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 184, 15 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 184, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 185, 15 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 185, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 186, 15 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 186, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 187, 15 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 187, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 188, 15 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 188, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 189, 15 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 189, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 208, 19 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 177, 15 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 208, 20 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 209, 20 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 224, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 225, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 226, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 227, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 227, 14 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 228, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 228, 14 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 229, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 229, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 230, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 230, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 224, 19 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 231, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 232, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 232, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 233, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 233, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 234, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 234, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 235, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 235, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 236, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 236, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 237, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 231, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 223, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 223, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 222, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 210, 19 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 210, 20 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 211, 19 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 211, 20 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 212, 19 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 212, 20 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 213, 19 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 213, 20 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 214, 19 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 214, 20 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 215, 19 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 215, 20 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 216, 19 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 216, 20 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 217, 21 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 217, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 218, 21 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 218, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 219, 8 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 219, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 220, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 220, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 221, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 221, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 222, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 209, 19 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 237, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 176, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 175, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 98, 7 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 98, 9 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 99, 7 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 99, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 102, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 103, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 104, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 105, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 106, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 107, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 108, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 97, 8 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 109, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 111, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 112, 8 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 113, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 114, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 115, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 116, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 117, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 118, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 119, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 120, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 121, 4 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 110, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 97, 7 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 96, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 96, 7 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 73, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 74, 3 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 77, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 78, 4 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 79, 3 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 80, 3 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 81, 4 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 82, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 83, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 84, 4 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 85, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 86, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 87, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 88, 6 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 89, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 90, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 91, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 92, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 92, 4 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 93, 7 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 93, 3 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 94, 7 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 94, 3 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 95, 7 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 95, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 122, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 176, 15 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 123, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 125, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 154, 13 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 155, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 156, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 157, 6 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 158, 6 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 159, 14 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 160, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 161, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 162, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 162, 6 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 163, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 153, 13 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 163, 6 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 164, 6 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 165, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 166, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 167, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 167, 6 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 168, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 173, 15 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 173, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 174, 15 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 174, 16 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 175, 15 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 164, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 152, 13 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 151, 13 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 150, 13 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 126, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 127, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 128, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 129, 10 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 130, 11 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 131, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 131, 10 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 132, 12 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 133, 12 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 134, 12 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 135, 12 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 136, 12 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 137, 12 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 138, 12 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 139, 12 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 140, 12 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 141, 12 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 142, 12 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 143, 12 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 144, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 145, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 146, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 147, 10 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 148, 13 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 149, 13 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 124, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 348, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 238, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 239, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 307, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 308, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 308, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 309, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 309, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 310, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 310, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 311, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 311, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 312, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 312, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 307, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 313, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 314, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 314, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 315, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 315, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 316, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 316, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 317, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 317, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 318, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 318, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 319, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 313, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 306, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 306, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 305, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 293, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 294, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 294, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 294, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 295, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 295, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 296, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 296, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 297, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 297, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 298, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 298, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 299, 19 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 299, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 300, 19 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 300, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 301, 19 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 301, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 302, 19 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 302, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 303, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 303, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 304, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 304, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 305, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 319, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 293, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 320, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 321, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 336, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 336, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 337, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 337, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 338, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 338, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 339, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 339, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 340, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 340, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 341, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 335, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 341, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 342, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 343, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 343, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 344, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 344, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 345, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 345, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 346, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 346, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 347, 11 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 347, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 342, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 335, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 334, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 334, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 321, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 322, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 322, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 323, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 323, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 324, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 324, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 325, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 325, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 326, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 326, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 327, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 327, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 328, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 328, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 329, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 329, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 330, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 330, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 331, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 331, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 332, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 332, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 333, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 333, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 320, 18 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 238, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 293, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 292, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 254, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 254, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 255, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 255, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 256, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 256, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 257, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 257, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 258, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 258, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 259, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 253, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 259, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 260, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 261, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 261, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 262, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 262, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 263, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 263, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 264, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 264, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 265, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 265, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 260, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 253, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 252, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 252, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 239, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 240, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 240, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 241, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 241, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 242, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 242, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 243, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 243, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 244, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 244, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 245, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 245, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 246, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 246, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 247, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 247, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 248, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 248, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 249, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 249, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 250, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 250, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 251, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 251, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 266, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 292, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 266, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 267, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 282, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 283, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 283, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 284, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 284, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 285, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 285, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 286, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 286, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 287, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 287, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 282, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 288, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 288, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 289, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 289, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 289, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 290, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 290, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 290, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 291, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 291, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 291, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 292, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 288, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 281, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 281, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 280, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 268, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 268, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 269, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 269, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 270, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 270, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 271, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 271, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 272, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 272, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 273, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 273, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 274, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 274, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 275, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 275, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 276, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 276, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 277, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 277, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 278, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 278, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 279, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 279, 23 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 280, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 267, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 576, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 576, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 577, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 864, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 865, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 865, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 866, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 866, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 867, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 867, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 868, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 868, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 869, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 869, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 864, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 870, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 871, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 871, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 872, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 872, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 873, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 873, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 874, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 874, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 875, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 875, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 876, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 870, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 863, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 863, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 862, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 850, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 850, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 851, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 851, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 852, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 852, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 853, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 853, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 854, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 854, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 855, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 855, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 856, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 856, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 857, 3 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 857, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 858, 3 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 858, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 859, 3 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 859, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 860, 3 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 860, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 861, 3 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 861, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 862, 3 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 876, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 849, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 877, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 878, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 893, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 893, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 894, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 894, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 895, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 895, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 896, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 896, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 897, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 897, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 898, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 892, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 898, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 899, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 900, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 900, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 901, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 901, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 902, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 902, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 903, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 903, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 904, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 904, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 899, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 892, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 891, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 891, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 878, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 879, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 879, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 880, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 880, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 881, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 881, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 882, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 882, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 883, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 883, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 884, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 884, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 885, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 885, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 886, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 886, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 887, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 887, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 888, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 888, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 889, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 889, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 890, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 890, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 877, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 905, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 849, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 848, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 807, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 808, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 808, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 809, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 809, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 810, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 810, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 811, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 811, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 812, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 812, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 807, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 813, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 814, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 814, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 815, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 815, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 816, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 816, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 817, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 817, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 818, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 818, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 819, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 813, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 806, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 806, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 805, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 793, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 793, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 794, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 794, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 795, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 795, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 796, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 796, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 797, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 797, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 798, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 798, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 799, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 799, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 800, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 800, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 801, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 801, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 802, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 802, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 803, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 803, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 804, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 804, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 805, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 819, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 848, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 820, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 821, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 836, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 836, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 837, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 837, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 838, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 838, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 839, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 839, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 840, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 840, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 841, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 835, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 841, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 842, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 843, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 843, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 844, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 844, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 845, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 845, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 846, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 846, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 847, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 847, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 842, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 835, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 834, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 834, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 821, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 822, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 822, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 823, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 823, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 824, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 824, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 825, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 825, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 826, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 826, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 827, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 827, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 828, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 828, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 829, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 829, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 830, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 830, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 831, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 831, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 832, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 832, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 833, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 833, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 820, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 792, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 905, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 906, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 978, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 979, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 979, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 980, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 980, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 981, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 981, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 982, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 982, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 983, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 983, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 978, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 984, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 985, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 985, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 986, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 986, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 987, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 987, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 988, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 988, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 989, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 989, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 990, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 984, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 977, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 977, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 976, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 964, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 964, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 965, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 965, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 966, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 966, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 967, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 967, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 968, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 968, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 969, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 969, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 970, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 970, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 971, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 971, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 972, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 972, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 973, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 973, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 974, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 974, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 975, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 975, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 976, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 990, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 963, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 991, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 992, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1007, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1007, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1008, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1008, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1009, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1009, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1010, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1010, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1011, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1011, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1012, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1006, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1012, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1013, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1014, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1014, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1015, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1015, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1016, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1016, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1017, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1017, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1018, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1018, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1013, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1006, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1005, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1005, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 992, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 993, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 993, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 994, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 994, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 995, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 995, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 996, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 996, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 997, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 997, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 998, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 998, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 999, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 999, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1000, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1000, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1001, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1001, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1002, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1002, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1003, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1003, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1004, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1004, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 991, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 906, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 963, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 962, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 921, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 922, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 922, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 923, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 923, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 924, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 924, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 925, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 925, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 926, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 926, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 921, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 927, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 928, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 928, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 929, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 929, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 930, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 930, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 931, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 931, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 932, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 932, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 933, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 927, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 920, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 920, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 919, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 907, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 907, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 908, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 908, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 909, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 909, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 910, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 910, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 911, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 911, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 912, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 912, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 913, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 913, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 914, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 914, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 915, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 915, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 916, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 916, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 917, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 917, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 918, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 918, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 919, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 933, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 962, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 934, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 935, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 950, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 950, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 951, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 951, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 952, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 952, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 953, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 953, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 954, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 954, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 955, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 949, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 955, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 956, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 957, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 957, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 958, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 958, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 959, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 959, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 960, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 960, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 961, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 961, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 956, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 949, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 948, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 948, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 935, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 936, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 936, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 937, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 937, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 938, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 938, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 939, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 939, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 940, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 940, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 941, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 941, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 942, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 942, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 943, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 943, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 944, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 944, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 945, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 945, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 946, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 946, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 947, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 947, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 934, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 792, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 791, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 791, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 649, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 649, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 650, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 650, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 651, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 651, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 652, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 652, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 653, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 653, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 654, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 648, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 654, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 655, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 656, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 656, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 657, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 657, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 658, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 658, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 659, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 659, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 660, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 660, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 655, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 648, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 647, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 647, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 634, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 635, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 635, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 636, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 636, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 637, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 637, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 638, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 638, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 639, 11 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 639, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 640, 11 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 640, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 641, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 641, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 642, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 642, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 643, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 643, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 644, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 644, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 645, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 645, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 646, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 646, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 660, 28 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 634, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 661, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 661, 28 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 671, 28 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 672, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 672, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 672, 28 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 673, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 673, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 673, 28 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 674, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 674, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 674, 28 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 675, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 671, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 675, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 676, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 676, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 676, 28 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 677, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 677, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 677, 28 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 678, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 678, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 678, 28 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 679, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 679, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 675, 28 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 671, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 670, 28 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 670, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 662, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 662, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 662, 28 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 663, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 663, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 663, 28 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 664, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 664, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 664, 28 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 665, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 665, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 665, 28 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 666, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 666, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 666, 28 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 667, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 667, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 667, 28 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 668, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 668, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 668, 28 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 669, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 669, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 669, 28 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 670, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 661, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 679, 28 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 633, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 632, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 592, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 592, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 593, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 593, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 594, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 594, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 595, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 595, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 596, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 596, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 597, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 591, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 597, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 598, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 599, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 599, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 600, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 600, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 601, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 601, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 602, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 602, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 603, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 603, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 598, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 591, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 590, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 590, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 577, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 578, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 578, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 579, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 579, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 580, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 580, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 581, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 581, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 582, 5 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 582, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 583, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 583, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 584, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 584, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 585, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 585, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 586, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 586, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 587, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 587, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 588, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 588, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 589, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 589, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 604, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 633, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 604, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 605, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 620, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 621, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 621, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 622, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 622, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 623, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 623, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 624, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 624, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 625, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 625, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 620, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 626, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 627, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 627, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 628, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 628, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 629, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 629, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 630, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 630, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 631, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 631, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 632, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 626, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 619, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 619, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 618, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 606, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 606, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 607, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 607, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 608, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 608, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 609, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 609, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 610, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 610, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 611, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 611, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 612, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 612, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 613, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 613, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 614, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 614, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 615, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 615, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 616, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 616, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 617, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 617, 24 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 618, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 605, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 680, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 680, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 680, 28 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 750, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 751, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 751, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 752, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 752, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 753, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 753, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 754, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 754, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 755, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 755, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 750, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 756, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 757, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 757, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 758, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 758, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 759, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 759, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 760, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 760, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 761, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 761, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 762, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 756, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 749, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 749, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 748, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 736, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 736, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 737, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 737, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 738, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 738, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 739, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 739, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 740, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 740, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 741, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 741, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 742, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 742, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 743, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 743, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 744, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 744, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 745, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 745, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 746, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 746, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 747, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 747, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 748, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 762, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 735, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 763, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 764, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 779, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 779, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 780, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 780, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 781, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 781, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 782, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 782, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 783, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 783, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 784, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 778, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 784, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 785, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 786, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 786, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 787, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 787, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 788, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 788, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 789, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 789, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 790, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 790, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 785, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 778, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 777, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 777, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 764, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 765, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 765, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 766, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 766, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 767, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 767, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 768, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 768, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 769, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 769, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 770, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 770, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 771, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 771, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 772, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 772, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 773, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 773, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 774, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 774, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 775, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 775, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 776, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 776, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 763, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 735, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 734, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 734, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 693, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 693, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 694, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 694, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 695, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 695, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 696, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 696, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 697, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 697, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 698, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 692, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 698, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 699, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 700, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 700, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 701, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 701, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 702, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 702, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 703, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 703, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 704, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 704, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 699, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 692, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 691, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 691, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 681, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 681, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 681, 28 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 682, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 682, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 682, 28 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 683, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 683, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 683, 28 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 684, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 684, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 684, 28 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 685, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 685, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 685, 28 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 686, 11 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 686, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 687, 11 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 687, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 688, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 688, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 689, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 689, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 690, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 690, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 705, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 705, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 706, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 706, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 721, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 722, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 722, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 723, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 723, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 724, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 724, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 725, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 725, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 726, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 726, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 727, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 727, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 728, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 728, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 729, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 729, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 730, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 730, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 731, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 731, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 732, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 732, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 733, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 733, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 721, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1952, 45 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 720, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 719, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 707, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 707, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 708, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 708, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 709, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 709, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 710, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 710, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 711, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 711, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 712, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 712, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 713, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 713, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 714, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 714, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 715, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 715, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 716, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 716, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 717, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 717, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 718, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 718, 22 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 719, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 720, 2 });

            migrationBuilder.InsertData(
                table: "CardTags",
                columns: new[] { "CardId", "TagId" },
                values: new object[] { 1952, 46 });

            migrationBuilder.CreateIndex(
                name: "IX_CardAttempts_CardId",
                table: "CardAttempts",
                column: "CardId");

            migrationBuilder.CreateIndex(
                name: "IX_CardAttempts_UserId",
                table: "CardAttempts",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Cards_CreatorId",
                table: "Cards",
                column: "CreatorId");

            migrationBuilder.CreateIndex(
                name: "IX_CardTags_TagId",
                table: "CardTags",
                column: "TagId");

            migrationBuilder.CreateIndex(
                name: "IX_Users_Email",
                table: "Users",
                column: "Email",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Users_SettingsId",
                table: "Users",
                column: "SettingsId",
                unique: true);
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "CardAttempts");

            migrationBuilder.DropTable(
                name: "CardTags");

            migrationBuilder.DropTable(
                name: "Cards");

            migrationBuilder.DropTable(
                name: "Tags");

            migrationBuilder.DropTable(
                name: "Users");

            migrationBuilder.DropTable(
                name: "UserSettings");
        }
    }
}
